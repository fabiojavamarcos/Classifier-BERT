issueNumber,prNumber,Util,Network,Interpreter,i18n,Logic,Test,IO,App,corpus
76.0,138,1,0,0,0,0,0,1,0,implemented sequenceequal operator fixes issue #76since there is no direct analogue of `iequalitycomparer` in java `func2 ` has been used nice and great use of the zip operator! || thank you again @mairbek ||
125.0,146,1,0,0,0,0,0,1,0,merge of pull #125 for issue #87 operator takewhile manually merging https://githubcom/netflix/rxjava/pull/125 from @mairbek implementation of https://githubcom/netflix/rxjava/issues/87 done by @mairbek ive run the unit tests locally and reviewed the code while doing the manual merge looks good so merging into master branch ||
87.0,146,1,0,0,0,0,0,1,0,merge of pull #125 for issue #87 operator takewhile manually merging https://githubcom/netflix/rxjava/pull/125 from @mairbek implementation of https://githubcom/netflix/rxjava/issues/87 done by @mairbek ive run the unit tests locally and reviewed the code while doing the manual merge looks good so merging into master branch ||
18.0,156,1,0,0,0,0,0,1,0,implemented toiterable operation for issue #18this would allow to implement other blocking methods like `single` `lastordefault` next this looks good merging ||
164.0,165,1,0,0,0,0,0,1,0,fixed bug in ranges fixed issue #164 [rxjava-pull-requests #3](https://netflixosscicloudbeescom/job/rxjava-pull-requests/3/) successthis pull request looks good ||
202.0,205,1,0,0,0,0,0,1,0,"reimplementation of concat improved handling of observable >the old version required all of the observable s to be generated and bufferedbefore the concat could begin if the outer observable was asynchronous itemscould be dropped (test added) the new version passes the test and does thebest job i could (after examining several possible strategies) of achievingclear and consistent semantics in accordance with the principle of leastsurprise(my attempt to fix issue #202) [rxjava-pull-requests #45](https://netflixosscicloudbeescom/job/rxjava-pull-requests/45/) aborted || there is another issue with this implementation the countdown latch will always block the calling thread which is not desirable anything that returns an observable should never be blocking rx is meant to support composition of operations and allows each operation to run concurrently || while reviewing this i started playing with the unit tests and added 2 new ones i also made them use inorderverify so they ensure correct ordering ive pasted it below so you can merge into your branch instead of me complicating the merge with another branch the tests pass pass except `testconcatunsubscribe` which deadlocks it does this because a list wont return the subscription asynchronously so it cant unsubscribe meanwhile a countdownlatch is waiting for the change to trigger and the two latches end up waiting on each otheri havent thought through enough yet to determine if there is a way to solve that or if the unit test is just testing the wrong thing and thus a bad testthe comment above from @billy about countdownlatch originated from a discussion between him and i - but while reviewing this it is probably the right approachi was playing with other approaches that are purely non-blocking while retaining the correct concat sequential behavior but they all seem to require either:- another wrapping thread- stealing work from one of the child observable threads and making it do work that is queued on the others and that seems like a bad idea even though it can be hacked to ""work"" but it does so in a way that is very unexpected and thus not something i want to pursue- queueing all onnext values which could be a bad memory issue and also means we eagerly subscribe which is not what we wantmy biggest issue right now is that concat(o1 o2) is a very common usage but that results in list which will be blocking and unsubscribe doesnt workill think through this more but id appreciate your thoughts on how to handle `testconcatunsubscribe` ``` java public static class unittest { @test public void testconcat() { @suppresswarnings(""unchecked"") observer observer mock(observerclass) final string[] o { ""1"" ""3"" ""5"" ""7"" } final string[] e { ""2"" ""4"" ""6"" } final observable odds observabletoobservable(o) final observable even observabletoobservable(e) @suppresswarnings(""unchecked"") observable concat observablecreate(concat(odds even)) concatsubscribe(observer) verify(observer times(7))onnext(anystring()) } @test public void testconcatwithlist() { @suppresswarnings(""unchecked"") observer observer mock(observerclass) final string[] o { ""1"" ""3"" ""5"" ""7"" } final string[] e { ""2"" ""4"" ""6"" } final observable odds observabletoobservable(o) final observable even observabletoobservable(e) final list > list new arraylist >() listadd(odds) listadd(even) observable concat observablecreate(concat(list)) concatsubscribe(observer) verify(observer times(7))onnext(anystring()) } @test public void testconcatunsubscribe() { final countdownlatch callonce new countdownlatch(1) final countdownlatch oktocontinue new countdownlatch(1) final testobservable w1 new testobservable (""one"" ""two"" ""three"") final testobservable w2 new testobservable (callonce oktocontinue ""four"" ""five"" ""six"") @suppresswarnings(""unchecked"") observer aobserver mock(observerclass) @suppresswarnings(""unchecked"") observable concat observablecreate(concat(w1 w2)) systemoutprintln(""before subscribe"") subscription s1 concatsubscribe(aobserver) systemoutprintln(""after subscribe"") try { //block main thread to allow observable ""w1"" to complete and observable ""w2"" to call onnext once systemoutprintln(""before callonceawait"") callonceawait() systemoutprintln(""after callonceawait"") s1unsubscribe() systemoutprintln(""after s1unsubscribe"") //unblock the observable to continue oktocontinuecountdown() systemoutprintln(""after countdown"") w1tjoin() w2tjoin() } catch (exception e) { eprintstacktrace() fail(egetmessage()) } inorder inorder inorder(aobserver) inorderverify(aobserver times(1))onnext(""one"") inorderverify(aobserver times(1))onnext(""two"") inorderverify(aobserver times(1))onnext(""three"") inorderverify(aobserver times(1))onnext(""four"") inorderverify(aobserver never())onnext(""five"") inorderverify(aobserver never())onnext(""six"") inorderverify(aobserver times(1))oncompleted() } @test public void testmergeobservableofobservables() { @suppresswarnings(""unchecked"") observer observer mock(observerclass) final string[] o { ""1"" ""3"" ""5"" ""7"" } final string[] e { ""2"" ""4"" ""6"" } final observable odds observabletoobservable(o) final observable even observabletoobservable(e) observable > observableofobservables observablecreate(new func1 > subscription>() { @override public subscription call(observer > observer) { // simulate what would happen in an observable observeronnext(odds) observeronnext(even) observeroncompleted() return new subscription() { @override public void unsubscribe() { // unregister will never be called here since we are executing synchronously } } } }) observable concat observablecreate(concat(observableofobservables)) concatsubscribe(observer) verify(observer times(7))onnext(anystring()) } /** * simple concat of 2 asynchronous observables ensuring it emits in correct order */ @suppresswarnings(""unchecked"") @test public void testsimpleasyncconcat() { observer observer mock(observerclass) testobservable o1 new testobservable (""one"" ""two"" ""three"") testobservable o2 new testobservable (""four"" ""five"" ""six"") observableconcat(o1 o2)subscribe(observer) try { // wait for async observables to complete o1tjoin() o2tjoin() } catch (exception e) { throw new runtimeexception(""failed waiting on threads"") } inorder inorder inorder(observer) inorderverify(observer times(1))onnext(""one"") inorderverify(observer times(1))onnext(""two"") inorderverify(observer times(1))onnext(""three"") inorderverify(observer times(1))onnext(""four"") inorderverify(observer times(1))onnext(""five"") inorderverify(observer times(1))onnext(""six"") } /** * test an async observable that emits more async observables */ @suppresswarnings(""unchecked"") @test public void testnestedasyncconcat() throws exception { observer observer mock(observerclass) final testobservable o1 new testobservable (""one"" ""two"" ""three"") final testobservable o2 new testobservable (""four"" ""five"" ""six"") final testobservable o3 new testobservable (""seven"" ""eight"" ""nine"") final countdownlatch allowthird new countdownlatch(1) final atomicreference parent new atomicreference () observable > observableofobservables observablecreate(new func1 > subscription>() { @override public subscription call(final observer > observer) { final booleansubscription s new booleansubscription() parentset(new thread(new runnable() { @override public void run() { try { // emit first if (!sisunsubscribed()) { systemoutprintln(""emit o1"") observeronnext(o1) } // emit second if (!sisunsubscribed()) { systemoutprintln(""emit o2"") observeronnext(o2) } // wait until sometime later and emit third try { allowthirdawait() } catch (interruptedexception e) { observeronerror(e) } if (!sisunsubscribed()) { systemoutprintln(""emit o3"") observeronnext(o3) } } catch (exception e) { observeronerror(e) } finally { systemoutprintln(""done parent observable"") observeroncompleted() } } })) parentget()start() return s } }) observablecreate(concat(observableofobservables))subscribe(observer) // wait for parent to start while (parentget() null) { threadsleep(1) } try { // wait for first 2 async observables to complete while (o1t null) { threadsleep(1) } systemoutprintln(""thread1 started waiting for it to complete "") o1tjoin() while (o2t null) { threadsleep(1) } systemoutprintln(""thread2 started waiting for it to complete "") o2tjoin() } catch (exception e) { throw new runtimeexception(""failed waiting on threads"" e) } inorder inorder inorder(observer) inorderverify(observer times(1))onnext(""one"") inorderverify(observer times(1))onnext(""two"") inorderverify(observer times(1))onnext(""three"") inorderverify(observer times(1))onnext(""four"") inorderverify(observer times(1))onnext(""five"") inorderverify(observer times(1))onnext(""six"") // we shouldnt have the following 3 yet inorderverify(observer never())onnext(""seven"") inorderverify(observer never())onnext(""eight"") inorderverify(observer never())onnext(""nine"") // we should not be completed yet verify(observer never())oncompleted() verify(observer never())onerror(any(exceptionclass)) // now allow the third allowthirdcountdown() try { while (o3t null) { threadsleep(1) } // wait for 3rd to complete o3tjoin() } catch (exception e) { throw new runtimeexception(""failed waiting on threads"" e) } inorderverify(observer times(1))onnext(""seven"") inorderverify(observer times(1))onnext(""eight"") inorderverify(observer times(1))onnext(""nine"") inorderverify(observer times(1))oncompleted() verify(observer never())onerror(any(exceptionclass)) } @suppresswarnings(""unchecked"") @test public void testblockedobservableofobservables() { observer observer mock(observerclass) final string[] o { ""1"" ""3"" ""5"" ""7"" } final string[] e { ""2"" ""4"" ""6"" } final observable odds observabletoobservable(o) final observable even observabletoobservable(e) final countdownlatch callonce new countdownlatch(1) final countdownlatch oktocontinue new countdownlatch(1) testobservable > observableofobservables new testobservable >(callonce oktocontinue odds even) func1 subscription> concatf concat(observableofobservables) observable concat observablecreate(concatf) concatsubscribe(observer) try { //block main thread to allow observables to serve up o1 callonceawait() } catch (exception ex) { exprintstacktrace() fail(exgetmessage()) } // the concated observable should have served up all of the odds verify(observer times(1))onnext(""1"") verify(observer times(1))onnext(""3"") verify(observer times(1))onnext(""5"") verify(observer times(1))onnext(""7"") try { // unblock observables so it can serve up o2 and complete oktocontinuecountdown() observableofobservablestjoin() } catch (exception ex) { exprintstacktrace() fail(exgetmessage()) } // the concatenated observable should now have served up all the evens verify(observer times(1))onnext(""2"") verify(observer times(1))onnext(""4"") verify(observer times(1))onnext(""6"") } private static class testobservable extends observable { private final subscription s new subscription() { @override public void unsubscribe() { subscribed false } } private final list values private thread t null private int count 0 private boolean subscribed true private final countdownlatch once private final countdownlatch oktocontinue public testobservable(t values) { this(null null values) } public testobservable(countdownlatch once countdownlatch oktocontinue t values) { thisvalues arraysaslist(values) thisonce once thisoktocontinue oktocontinue } @override public subscription subscribe(final observer observer) { t new thread(new runnable() { @override public void run() { try { while (count while reviewing this i started playing with the unit tests and added 2 new> ones i also made them use inorderverify so they ensure correct ordering> ive pasted it below so you can merge into your branch instead of me> complicating the merge with another branch> > the tests pass pass except testconcatunsubscribe which deadlocks it does> this because a list wont return the subscription asynchronously so it> cant unsubscribe meanwhile a countdownlatch is waiting for the change to> trigger and the two latches end up waiting on each other> > i havent thought through enough yet to determine if there is a way to> solve that or if the unit test is just testing the wrong thing and thus a> bad test> > the comment above from @billy https://githubcom/billy about> countdownlatch originated from a discussion between him and i - but while> reviewing this it is probably the right approach> > i was playing with other approaches that are purely non-blocking while> retaining the correct concat sequential behavior but they all seem to> require either:> - another wrapping thread> - stealing work from one of the child observable threads and making it> do work that is queued on the others and that seems like a bad idea> even though it can be hacked to ""work"" but it does so in a way that is very> unexpected and thus not something i want to pursue> - queueing all onnext values which could be a bad memory issue and> also means we eagerly subscribe which is not what we want> > my biggest issue right now is that concat(o1 o2) is a very common usage> but that results in list which will be blocking and unsubscribe doesnt> work> > ill think through this more but id appreciate your thoughts on how to> handle testconcatunsubscribe> > ```> public static class unittest {> > @test> public void testconcat() {> @suppresswarnings(""unchecked"")> observer observer mock(observerclass)> > final string[] o { ""1"" ""3"" ""5"" ""7"" }> final string[] e { ""2"" ""4"" ""6"" }> > final observable odds observabletoobservable(o)> final observable even observabletoobservable(e)> > @suppresswarnings(""unchecked"")> observable concat observablecreate(concat(odds even))> concatsubscribe(observer)> > verify(observer times(7))onnext(anystring())> }> > @test> public void testconcatwithlist() {> @suppresswarnings(""unchecked"")> observer observer mock(observerclass)> > final string[] o { ""1"" ""3"" ""5"" ""7"" }> final string[] e { ""2"" ""4"" ""6"" }> > final observable odds observabletoobservable(o)> final observable even observabletoobservable(e)> final list > list new arraylist >()> listadd(odds)> listadd(even)> observable concat observablecreate(concat(list))> concatsubscribe(observer)> > verify(observer times(7))onnext(anystring())> }> > @test> public void testconcatunsubscribe() {> final countdownlatch callonce new countdownlatch(1)> final countdownlatch oktocontinue new countdownlatch(1)> final testobservable w1 new testobservable (""one"" ""two"" ""three"")> final testobservable w2 new testobservable (callonce oktocontinue ""four"" ""five"" ""six"")> > @suppresswarnings(""unchecked"")> observer aobserver mock(observerclass)> @suppresswarnings(""unchecked"")> observable concat observablecreate(concat(w1 w2))> systemoutprintln(""before subscribe"")> subscription s1 concatsubscribe(aobserver)> systemoutprintln(""after subscribe"")> try {> //block main thread to allow observable ""w1"" to complete and observable ""w2"" to call onnext once> systemoutprintln(""before callonceawait"")> callonceawait()> systemoutprintln(""after callonceawait"")> s1unsubscribe()> systemoutprintln(""after s1unsubscribe"")> //unblock the observable to continue> oktocontinuecountdown()> systemoutprintln(""after countdown"")> w1tjoin()> w2tjoin()> } catch (exception e) {> eprintstacktrace()> fail(egetmessage())> }> > inorder inorder inorder(aobserver)> inorderverify(aobserver times(1))onnext(""one"")> inorderverify(aobserver times(1))onnext(""two"")> inorderverify(aobserver times(1))onnext(""three"")> inorderverify(aobserver times(1))onnext(""four"")> inorderverify(aobserver never())onnext(""five"")> inorderverify(aobserver never())onnext(""six"")> inorderverify(aobserver times(1))oncompleted()> }> > @test> public void testmergeobservableofobservables() {> @suppresswarnings(""unchecked"")> observer observer mock(observerclass)> > final string[] o { ""1"" ""3"" ""5"" ""7"" }> final string[] e { ""2"" ""4"" ""6"" }> > final observable odds observabletoobservable(o)> final observable even observabletoobservable(e)> > observable > observableofobservables observablecreate(new func1 > subscription>() {> > @override> public subscription call(observer > observer) {> // simulate what would happen in an observable> observeronnext(odds)> observeronnext(even)> observeroncompleted()> > return new subscription() {> > @override> public void unsubscribe() {> // unregister will never be called here since we are executing synchronously> }> > }> }> > })> observable concat observablecreate(concat(observableofobservables))> concatsubscribe(observer)> verify(observer times(7))onnext(anystring())> }> > /** * simple concat of 2 asynchronous observables ensuring it emits in correct order */> @suppresswarnings(""unchecked"")> @test> public void testsimpleasyncconcat() {> observer observer mock(observerclass)> > testobservable o1 new testobservable (""one"" ""two"" ""three"")> testobservable o2 new testobservable (""four"" ""five"" ""six"")> > observableconcat(o1 o2)subscribe(observer)> > try {> // wait for async observables to complete> o1tjoin()> o2tjoin()> } catch (exception e) {> throw new runtimeexception(""failed waiting on threads"")> }> > inorder inorder inorder(observer)> inorderverify(observer times(1))onnext(""one"")> inorderverify(observer times(1))onnext(""two"")> inorderverify(observer times(1))onnext(""three"")> inorderverify(observer times(1))onnext(""four"")> inorderverify(observer times(1))onnext(""five"")> inorderverify(observer times(1))onnext(""six"")> }> > /** * test an async observable that emits more async observables */> @suppresswarnings(""unchecked"")> @test> public void testnestedasyncconcat() throws exception {> observer observer mock(observerclass)> > final testobservable o1 new testobservable (""one"" ""two"" ""three"")> final testobservable o2 new testobservable (""four"" ""five"" ""six"")> final testobservable o3 new testobservable (""seven"" ""eight"" ""nine"")> final countdownlatch allowthird new countdownlatch(1)> > final atomicreference parent new atomicreference ()> observable > observableofobservables observablecreate(new func1 > subscription>() {> > @override> public subscription call(final observer > observer) {> final booleansubscription s new booleansubscription()> parentset(new thread(new runnable() {> > @override> public void run() {> try {> // emit first> if (!sisunsubscribed()) {> systemoutprintln(""emit o1"")> observeronnext(o1)> }> // emit second> if (!sisunsubscribed()) {> systemoutprintln(""emit o2"")> observeronnext(o2)> }> > // wait until sometime later and emit third> try {> allowthirdawait()> } catch (interruptedexception e) {> observeronerror(e)> }> if (!sisunsubscribed()) {> systemoutprintln(""emit o3"")> observeronnext(o3)> }> > } catch (exception e) {> observeronerror(e)> } finally {> systemoutprintln(""done parent observable"")> observeroncompleted()> }> }> }))> parentget()start()> return s> }> })> > observablecreate(concat(observableofobservables))subscribe(observer)> > // wait for parent to start> while (parentget() null) {> threadsleep(1)> }> > try {> // wait for first 2 async observables to complete> while (o1t null) {> threadsleep(1)> }> systemoutprintln(""thread1 started waiting for it to complete "")> o1tjoin()> while (o2t null) {> threadsleep(1)> }> systemoutprintln(""thread2 started waiting for it to complete "")> o2tjoin()> } catch (exception e) {> throw new runtimeexception(""failed waiting on threads"" e)> }> > inorder inorder inorder(observer)> inorderverify(observer times(1))onnext(""one"")> inorderverify(observer times(1))onnext(""two"")> inorderverify(observer times(1))onnext(""three"")> inorderverify(observer times(1))onnext(""four"")> inorderverify(observer times(1))onnext(""five"")> inorderverify(observer times(1))onnext(""six"")> // we shouldnt have the following 3 yet> inorderverify(observer never())onnext(""seven"")> inorderverify(observer never())onnext(""eight"")> inorderverify(observer never())onnext(""nine"")> // we should not be completed yet> verify(observer never())oncompleted()> verify(observer never())onerror(any(exceptionclass))> > // now allow the third> allowthirdcountdown()> > try {> while (o3t null) {> threadsleep(1)> }> // wait for 3rd to complete> o3tjoin()> } catch (exception e) {> throw new runtimeexception(""failed waiting on threads"" e)> }> > inorderverify(observer times(1))onnext(""seven"")> inorderverify(observer times(1))onnext(""eight"")> inorderverify(observer times(1))onnext(""nine"")> > inorderverify(observer times(1))oncompleted()> verify(observer never())onerror(any(exceptionclass))> }> > @suppresswarnings(""unchecked"")> @test> public void testblockedobservableofobservables() {> observer observer mock(observerclass)> > final string[] o { ""1"" ""3"" ""5"" ""7"" }> final string[] e { ""2"" ""4"" ""6"" }> final observable odds observabletoobservable(o)> final observable even observabletoobservable(e)> final countdownlatch callonce new countdownlatch(1)> final countdownlatch oktocontinue new countdownlatch(1)> testobservable > observableofobservables new testobservable >(callonce oktocontinue odds even)> func1 subscription> concatf concat(observableofobservables)> observable concat observablecreate(concatf)> concatsubscribe(observer)> try {> //block main thread to allow observables to serve up o1> callonceawait()> } catch (exception ex) {> exprintstacktrace()> fail(exgetmessage())> }> // the concated observable should have served up all of the odds> verify(observer times(1))onnext(""1"")> verify(observer times(1))onnext(""3"")> verify(observer times(1))onnext(""5"")> verify(observer times(1))onnext(""7"")> > try {> // unblock observables so it can serve up o2 and complete> oktocontinuecountdown()> observableofobservablestjoin()> } catch (exception ex) {> exprintstacktrace()> fail(exgetmessage())> }> // the concatenated observable should now have served up all the evens> verify(observer times(1))onnext(""2"")> verify(observer times(1))onnext(""4"")> verify(observer times(1))onnext(""6"")> }> > private static class testobservable extends observable {> > private final subscription s new subscription() {> > @override> public void unsubscribe() {> subscribed false> }> > }> private final list values> private thread t null> private int count 0> private boolean subscribed true> private final countdownlatch once> private final countdownlatch oktocontinue> > public testobservable(t values) {> this(null null values)> }> > public testobservable(countdownlatch once countdownlatch oktocontinue t values) {> thisvalues arraysaslist(values)> thisonce once> thisoktocontinue oktocontinue> }> > @override> public subscription subscribe(final observer observer) {> t new thread(new runnable() {> > @override> public void run() {> try {> while (count observeronnext(valuesget(count))> count++> //unblock the main thread to call unsubscribe> if (null ! once)> oncecountdown()> //block until the main thread has called unsubscribe> if (null ! once)> oktocontinueawait()> }> if (subscribed)> observeroncompleted()> } catch (interruptedexception e) {> eprintstacktrace()> fail(egetmessage())> }> }> > })> tstart()> return s> }> > }> > }> ```> > > reply to this email directly or view it on githubhttps://githubcom/netflix/rxjava/pull/205#issuecomment-15496596> || [rxjava-pull-requests #59](https://netflixosscicloudbeescom/job/rxjava-pull-requests/59/) successthis pull request looks good || [rxjava-pull-requests #60](https://netflixosscicloudbeescom/job/rxjava-pull-requests/60/) successthis pull request looks good || thanks for update let me take a look and i will do some moreresearch/thought on the testconcatsubscribe test caseon fri mar 29 2013 at 2:22 am cloudbees pull request builder plugin wrote:> rxjava-pull-requests #60https://netflixosscicloudbeescom/job/rxjava-pull-requests/60/success> > this pull request looks good> > —> reply to this email directly or view it on githubhttps://githubcom/netflix/rxjava/pull/205#issuecomment-15633763> || [rxjava-pull-requests #72](https://netflixosscicloudbeescom/job/rxjava-pull-requests/72/) successthis pull request looks good || my original test case was intended to test the unsubscribe inside one ofchild observable the countdownlatch was used so that the code will havea chance to unsubscribe in a predicable manner (unsubscribe after ""four"") in a normal case there should be no blocking between inner and outerobservable i rewrote the case for better clarity and having the outerobservable is in a separate thread (so the test will pass now) youbrought up a good point about ""when"" you can unsubscribe should it onlyallow unsubscribe to happen during the outer onnext()? i need to do moreresearch on it here is the test i plan to add``` @test``` public void testconcatunsubscribeobservableofobservable() {``` final countdownlatch callonce new countdownlatch(1) final countdownlatch oktocontinue new countdownlatch(1) final testobservable w1 new testobservable (```""one"" ""two"" ""three"")``` final testobservable w2 ```newtestobservable (callonce oktocontinue""four"" ""five"" ""six"")``` @suppresswarnings(""unchecked"") observer aobserver mock(observerclass) @suppresswarnings(""unchecked"")``` testobservable > observableofobservables newtestobservable >(w1 w2)``` func1 subscription> concatf ```concat(observableofobservables)``` observable concat observablecreate(concatf) subscription s1 concatsubscribe(aobserver) try { //block main thread to allow observable ""w1"" to complete```and observable ""w2"" to call onnext exactly once``` callonceawait() //""four"" has been processed by onnext() s1unsubscribe() //""five"" and ""six"" will not be processed by onnext() //unblock the observable to continue oktocontinuecountdown() w1tjoin() w2tjoin() } catch (exception e) { eprintstacktrace() fail(egetmessage()) } inorder inorder inorder(aobserver) inorderverify(aobserver times(1))onnext(""one"") inorderverify(aobserver times(1))onnext(""two"") inorderverify(aobserver times(1))onnext(""three"") inorderverify(aobserver times(1))onnext(""four"") inorderverify(aobserver never())onnext(""five"") inorderverify(aobserver never())onnext(""six"") verify(aobserver never())oncompleted() verify(aobserver never())onerror(any(exceptionclass))``` }on tue apr 2 2013 at 8:55 pm cloudbees pull request builder plugin wrote:> rxjava-pull-requests #72https://netflixosscicloudbeescom/job/rxjava-pull-requests/72/success> > this pull request looks good> > —> reply to this email directly or view it on githubhttps://githubcom/netflix/rxjava/pull/205#issuecomment-15816463> || the rx net version of concat uses the immediatescheduler to execute theoperation which will execute the operation on the same calling thread soif the observables are running on the same thread it will besynchronous/blocked i have pulled in your changes from your fork andadded the additional unit test to test unsubscribe() with observablesrunning in different thread i have also updated the javadoc about theblocking with observable on the same thread from my side it looks goodon wed apr 3 2013 at 10:20 am billy yuen billyy@gmailcom wrote:> my original test case was intended to test the unsubscribe inside one of> child observable the countdownlatch was used so that the code will have> a chance to unsubscribe in a predicable manner (unsubscribe after ""four"")> in a normal case there should be no blocking between inner and outer> observable i rewrote the case for better clarity and having the outer> observable is in a separate thread (so the test will pass now) you> brought up a good point about ""when"" you can unsubscribe should it only> allow unsubscribe to happen during the outer onnext()? i need to do more> research on it here is the test i plan to add> > ```> @test> ```> > public void testconcatunsubscribeobservableofobservable() {> > ```> final countdownlatch callonce new countdownlatch(1)> > final countdownlatch oktocontinue new countdownlatch(1)> > final testobservable w1 new testobservable (> ```> > ""one"" ""two"" ""three"")> > ```> final testobservable w2 newtestobservable (callonce oktocontinue> ```> > ""four"" ""five"" ""six"")> > ```> @suppresswarnings(""unchecked"")> > observer aobserver mock(observerclass)> > @suppresswarnings(""unchecked"")> ```> > testobservable > observableofobservables newtestobservable >(w1 w2)> > ```> func1 subscription> concatf > ```> > concat(observableofobservables)> > ```> observable concat observablecreate(concatf)> > > > subscription s1 concatsubscribe(aobserver)> > > > try {> > //block main thread to allow observable ""w1"" to complete> ```> > and observable ""w2"" to call onnext exactly once> > ```> callonceawait()> > //""four"" has been processed by onnext()> > s1unsubscribe()> > //""five"" and ""six"" will not be processed by onnext()> > //unblock the observable to continue> > oktocontinuecountdown()> > w1tjoin()> > w2tjoin()> > } catch (exception e) {> > eprintstacktrace()> > fail(egetmessage())> > }> > > inorder inorder inorder(aobserver)> > inorderverify(aobserver times(1))onnext(""one"")> > inorderverify(aobserver times(1))onnext(""two"")> > inorderverify(aobserver times(1))onnext(""three"")> > inorderverify(aobserver times(1))onnext(""four"")> > inorderverify(aobserver never())onnext(""five"")> > inorderverify(aobserver never())onnext(""six"")> > verify(aobserver never())oncompleted()> > verify(aobserver never())onerror(any(exceptionclass))> ```> > }> > on tue apr 2 2013 at 8:55 pm cloudbees pull request builder plugin notifications@githubcom> wrote:> > > rxjava-pull-requests #72https://netflixosscicloudbeescom/job/rxjava-pull-requests/72/success> > > > this pull request looks good> > > > —> > reply to this email directly or view it on githubhttps://githubcom/netflix/rxjava/pull/205#issuecomment-15816463> > || > i do find it a little strange that observablefrom(iterable) is a ""shotgun> observable"" ie the subscribe() blocks until all downstream operations> have completed on all items which means it is impossible to ever> unsubscribe() but given that this is correct behavior i think that it> makes sense that concat(o1 o2) also cannot be unsubscribed-from i added a> cautionary comment to the javadocrx does not (or rarely does) add concurrency (see guideline 612) thus `observablefrom` is wrapping a synchronous iterable therefore the observable will be synchronousa `scheduler` could be used to make the subscription to an iterable happen on another thread or a custom `observable` could be created that handles an iterable asynchronouslyall rx operators must be capable of handling both synchronous and asynchronous sequences and if its synchronous that means unsubscribe will not work (which means its up to the implementor of an observable to understand this and decided if its okay to firehose the results)for the case of concat my concern is that if all the sequences being combined are async then we need to retain the async behavior and not block and prevent unsubscriptionfor example:- async or synchronous observablea with 10 items- async or synchronous observableb with 20 items- async observablec with infinite items (hot observable that never completed)i should be able to do this: `concat(a b c)take(50)` this should get the 10 items from a 20 items from b and first 20 items from c and then unsubscribe and continuedoes this work with the current implementation and correctly unsubscribe from observablec? || good point the best way to tell is to build an unit test for this case i can expand my new test to include this case and see what happenon wed apr 3 2013 at 2:29 pm ben christensen notifications@githubcomwrote:> i do find it a little strange that observablefrom(iterable) is a ""shotgun> observable"" ie the subscribe() blocks until all downstream operations> have completed on all items which means it is impossible to ever> unsubscribe() but given that this is correct behavior i think that it> makes sense that concat(o1 o2) also cannot be unsubscribed-from i added a> cautionary comment to the javadoc> > rx does not (or rarely does) add concurrency (see guideline 612) thus> observablefrom is wrapping a synchronous iterable therefore the> observable will be synchronous> > a scheduler could be used to make the subscription to an iterable happen> on another thread or a custom observable could be created that handles> an iterable asynchronously> > all rx operators must be capable of handling both synchronous and> asynchronous sequences and if its synchronous that means unsubscribe will> not work (which means its up to the implementor of an observable to> understand this and decided if its okay to firehose the results)> > for the case of concat my concern is that if all the sequences being> combined are async then we need to retain the async behavior and not block> and prevent unsubscription> > for example:> - async or synchronous observablea with 10 items> - async or synchronous observableb with 20 items> - async observablec with infinite items (hot observable that never> completed)> > i should be able to do this:> > concat(a b c)take(50)> > this should get the 10 items from a 20 items from b and first 20 items> from c and then unsubscribe and continue> > does this work with the current implementation and correctly unsubscribe> from observablec?> > —> reply to this email directly or view it on githubhttps://githubcom/netflix/rxjava/pull/205#issuecomment-15866540> ||"
199.0,225,1,0,0,0,0,0,1,0,"schedulers (merge of pull #199) manual merge of https://githubcom/netflix/rxjava/pull/199 by @mairbek plus the following changes:- made some classes non-public so they dont become part of the published api (if we find they have value in the public api we can make them so but once published its hard to remove them so id rather keep them implementation details until then)- consolidated executorscheduler and scheduledexecutorscheduler- made executorscheduler use a system-wide scheduledexecutorscheduler for handling delayed events when only an executor is available- made the iothreadpool use a non-bounded cached thread-pool next step from here is to review all operator implementations and add the scheduler overloads [rxjava-pull-requests #77](https://netflixosscicloudbeescom/job/rxjava-pull-requests/77/) successthis pull request looks good || [rxjava-pull-requests #78](https://netflixosscicloudbeescom/job/rxjava-pull-requests/78/) failurelooks like theres a problem with this pull request || the unit test is poorly written (non-deterministic) ill fix in the morning || awesome work! - with this it should be easy to implement operators like ""sample"" etc || yes it should open the gates to many operators we havent been able to pursue || committed a few tweaks and fixesopen questions for me are:- were not using the schedulernow value anywhere should we be? or is that only for the virtual scheduler used for testing?- not quite sure how the overloads should work on `merge` etc ive implemented them but the behavior might not yet match c# || can someone with an rxnet environment setup implement a test similar to this from java and tell me the output?``` java@test public void testmixedschedulers() throws interruptedexception { final string mainthreadname threadcurrentthread()getname() observable o observable create(new func1 subscription>() { @override public subscription call(observer observer) { systemoutprintln(""origin observable is running on: "" + threadcurrentthread()getname()) assertfalse(threadcurrentthread()getname()equals(mainthreadname)) asserttrue(""actually: "" + threadcurrentthread()getname() threadcurrentthread()getname()startswith(""rxiothreadpool"")) observeronnext(""one"") observeronnext(""two"") observeronnext(""three"") observeroncompleted() return subscriptionsempty() } })subscribeon(schedulersthreadpoolforio()) // subscribe to the source on the io thread pool // now merge on the cpu threadpool o observable merge(o observable from(""four"" ""five"")) subscribeon(schedulersthreadpoolforcomputation()) map(new func1 () { @override public string call(string v) { // opportunity to see what thread the merge is running on systemoutprintln(""merge is running on: "" + threadcurrentthread()getname()) return v } }) final countdownlatch latch new countdownlatch(1) final atomicreference onerror new atomicreference () // subscribe on a new thread osubscribe(new observer () { @override public void oncompleted() { systemoutprintln(""> received oncompleted"") latchcountdown() } @override public void onerror(exception e) { systemoutprintln(""> received onerror: "" + egetmessage()) onerrorset((runtimeexception) e) latchcountdown() } @override public void onnext(string v) { systemoutprintln(""> final subscribe is running on: "" + threadcurrentthread()getname()) systemoutprintln(""> onnext: "" + v) } } schedulersnewthread()) // wait for the above to finish or blow up if its blocked latchawait(5 timeunitseconds) }```im trying to understand how a sequence should work when multiple `subscribeon` operators are applied at different steps of a sequenceof course rxnet doesnt have the io and cpu thread pools those are just helper methods to executors which would be 2 separate threadpools for different work types so youll need to adjust that || [rxjava-pull-requests #79](https://netflixosscicloudbeescom/job/rxjava-pull-requests/79/) successthis pull request looks good || is there any reason to use `schedulerschedule` on an internal operator implementation instead of just leveraging `subscribeon` (other than when we need the delay arguments of course)?for example on a method overload of `merge` is this okay?``` java return merge(source)subscribeon(scheduler)```or is there some reason to inside the `operationmerge` do this:``` java return schedulerschedule(new func0 () { @override public subscription call() { return new mergeobservable (o)call(observer) } })```they seem to accomplish the same thing but would like to know if theres a reason to prefer one over the otheri prefer just reusing `subscribeon` i cant tell from reading c# code what it does as i cant find the extensions that implement the override methods! || im pulling the trigger and merging this into master so people can start playing with it and providing feedbackthe public api changes are fairly limited still so most changes (which i fully expect) will be implementation details || [rxjava-pull-requests #80](https://netflixosscicloudbeescom/job/rxjava-pull-requests/80/) successthis pull request looks good ||"
55.0,228,1,0,0,0,0,0,1,0,"interval i have attempted to implement the ""interval"" operator (#55) here as far as i can see it seems to work this is based on the quite fresh work on schedulersit doesnt work with the `currentthread` or `newthread` schedulers i guess due to the simple `sleepingaction` it does work with a `scheduledexecutorservice` thoughfor testing this conveniently i also wrote a test scheduler with adjustable timelooking forward to any review comments [rxjava-pull-requests #83](https://netflixosscicloudbeescom/job/rxjava-pull-requests/83/) failurelooks like theres a problem with this pull request || [rxjava-pull-requests #84](https://netflixosscicloudbeescom/job/rxjava-pull-requests/84/) successthis pull request looks good || lets consider adding new method to the `scheduler```` javascheduleperiodically(action0 action long initialdelay long period timeunit unit) ```it would allow to leverage `scheduledexecutorservice#scheduleatfixedrate` for the `executorscheduler` for other schedulers we could use recursive action scheduling from pull request #229 || i agree `scheduleperiodically` would be helpful here || @jmhofer do you plan to work on this feature? im thinking about implementing buffer operator #16 and this one will be very helpful for me || ill have a look at it || maybe we should also combine all the longs and units into a timespan class? - it doesnt feel right to always have them as separate parameters || anyone know why net wouldnt have a `scheduleperiodically` concept? if we were to add that it would only really work with `scheduledexecutorservice` and thus most `scheduler` implementations would have to rely upon the generic `scheduledexecutorservice` that ive added in https://githubcom/netflix/rxjava/pull/235 called `genericscheduledexecutorservice`this suggests to me that it isnt the right solution to add another interface method as it seems very tied to a particular implementation cant this be achieved with recursive schedulers which now work after the changes you did in https://githubcom/netflix/rxjava/pull/229? || im curious about this:> it doesnt work with the currentthread or newthread schedulers i guess due to the simple sleepingaction it does work with a scheduledexecutorservice thoughit seems that this operator needs to be async and must default to using something like `schedulersthreadpoolforcomputation()`documentation at msdn (http://msdnmicrosoftcom/en-us/library/hh228911(vvs103)aspx) suggests that this defaults to using a thread-pool scheduler:> the following example code uses the interval operator to generate a sequence of long integers staring at zero each integer in the sequence is generated after the two second period has expired each integer is written to the console window along with the current time to show the period parameter in effect the generation of the integer sequence is scheduled to run on a thread from the net thread pool so the main thread is not blocked and can process the enter key being pressed to stop the intervalperhaps `newthreadscheduler` will work as of https://githubcom/netflix/rxjava/pull/235 because it now uses `genericscheduledexecutorservice` when a delay is passed in instead of `sleepingaction`what happens in net if someone tries to use `immediatescheduler` or `currentthreadscheduler`? anyone have access to net to try that? || > maybe we should also combine all the longs and units into a timespan class? - it doesnt feel right to always have them as separate parametersif were going to consider doing this then we should do it as part of https://githubcom/netflix/rxjava/pull/235 before i release another version since this would change the `schedulers` interfacejava itself always keeps the 2 separate though so perhaps the idiomatic thing to do in java is to keep them separate? i dont have a strong opinion on this one but the decision made now will last a very long time || actually net does have `scheduleperiodic` see here: https://rxcodeplexcom/sourcecontrol/changeset/view/e24677887e1727fb3b5dd614d996aa6d113b3834#rx/net/source/systemreactiveinterfaces/reactive/concurrency/ischedulerperiodiccsimho its useful to avoid recursive scheduling where the schedulers support this directly as well as to do the slightly messy recursive scheduling ourselves for other types of schedulers so that the user doesnt have to || ah interesting thanks for educating me on that || this doesnt look like its been integrated into observable but im going to merge as it looks useful to get this in the testscheduler especially while interval continues getting work done || great thanks (this still needs a bit of work if/when we do periodic scheduling) || are you okay with me releasing current code on the master branch and then the rest of `interval` coming later?is there anything else about master branch as it stands that should be changed before i release? id like to do so today || thats alright with me || @benjchristensen now the `interval` operators in rxjava and rxnet have different behaviors when the scheduler is `currentthread`in rxnet the following codes``` c# var o observableinterval(timespanfrommilliseconds(100) schedulercurrentthread) otake(5)subscribe( x > consolewriteline(x) ) otake(4)subscribe( x > consolewriteline(x) ) consolereadline()```output```012340123```in rxjava the following codes``` java observable o observableinterval(100 timeunitmilliseconds schedulerscurrentthread()) otake(5)subscribe(new action1 () { @override public void call(long t1) { systemoutprintln(t1) } }) otake(4)subscribe(new action1 () { @override public void call(long t1) { systemoutprintln(t1) } })```output```01234```and the current thread is blocked at the first `subscribe`is it ok or the `interval` operator should not be used with `currentthread`? ||"
19.0,229,1,0,0,0,0,0,1,0,"trying to extend the scheduler interface according to the comments at ive tried to extend the `scheduler` interface according to the discussion at issue #19 if i understand this correctly most of it can be done via the `abstractscheduler`i hope this helps please have a look [rxjava-pull-requests #85](https://netflixosscicloudbeescom/job/rxjava-pull-requests/85/) successthis pull request looks good || awesome looks like it doesnt break a `scheduler` interface i thought about two examples``` java final scheduler scheduler schedulerscurrentthread() observable obs observablecreate(new func1 subscription>() { @override public subscription call(final observer observer) { return schedulerschedule(0 new func2 () { @override public subscription call(scheduler scheduler integer i) { if (i > 42) { observeroncompleted() return subscriptionsempty() } observeronnext(i) return schedulerschedule(i + 1 this) } }) } }) obssubscribe(new observer () { @override public void oncompleted() { systemoutprintln(""completed"") } @override public void onerror(exception e) { systemoutprintln(""error"") } @override public void onnext(integer args) { systemoutprintln(args) } })```and``` java final scheduler scheduler schedulersthreadpoolforcomputation() observable obs observablecreate(new func1 subscription>() { @override public subscription call(final observer observer) { return schedulerschedule(new booleansubscription() new func2 () { @override public subscription call(scheduler scheduler booleansubscription cancel) { if (cancelisunsubscribed()) { observeroncompleted() return subscriptionsempty() } observeronnext(42) try { threadsleep(1000) } catch (interruptedexception e) { eprintstacktrace() } schedulerschedule(cancel this) return cancel } }) } }) subscription subscribe obssubscribe(new observer () { @override public void oncompleted() { systemoutprintln(""completed"") } @override public void onerror(exception e) { systemoutprintln(""error"") } @override public void onnext(integer args) { systemoutprintln(args) } }) threadsleep(10000) subscribeunsubscribe() systemoutprintln(""unsubscribe"") threadsleep(10000)```and they worked well for me || im wondering if the `scheduler` interface really needs all of these overloads?rx has 3 primary methods (the rest are extension methods that look like they do transformations)http://msdnmicrosoftcom/en-us/library/hh211963(vvs103)aspxthus the 2 key ones are:``` java subscription schedule(t state func2 action) subscription schedule(t state func2 action long duetime timeunit unit)```we dont have one with an explicit time to run only relative at this time || it appears the overloads all make sense but again net is able to use extension methods to make the design much more elegant where only the main 3 are part of the interface and the rest come along for the rideit means we end up with a scheduler/abstractscheduler interface/abstract pairing to make this workshould we just make scheduler an abstract? im very tempted to do so because of the following problems:- adding methods to scheduler will be breaking changes requiring major version increments- people implementing schedulers will basically always have to also extend abstractscheduler or copy/paste all of those method overloadsor should be remove all but the main 3 methods from scheduler and put all the overloads as utility functions on the schedulers class instead?the precedent for using abstract (or concrete) classes instead of interfaces (which net then augments with extension methods) is already done - observable is a concrete class instead of interface for this very reasonall plugins are done as abstracts instead of interfaces for this reason as wellthoughts? || while reviewing and playing with this i considered some changes id like to propose i have submitted another pull request (https://githubcom/netflix/rxjava/pull/235) that builds on top of your work @jmhofer and includes the unit tests from @mairbek i would appreciate your thoughts on it and whether they are beneficial changes or just pedantic || merged manually via https://githubcom/netflix/rxjava/pull/235 ||"
74.0,248,1,0,0,0,0,0,1,0,implemented sample operation now that `operationinterval` is in `operationsample` (see #74) was kind of straightforward i also added a unit test against sampling and allowed for specifying a scheduler used by the sample operation [rxjava-pull-requests #108](https://netflixosscicloudbeescom/job/rxjava-pull-requests/108/) successthis pull request looks good || we want methods on `observable` dont we? || sure i just completely forgot about that ill add them || [rxjava-pull-requests #113](https://netflixosscicloudbeescom/job/rxjava-pull-requests/113/) successthis pull request looks good ||
93.0,249,1,0,0,0,0,0,1,0,timestamp operation straightforward implementation of issue #93 based on `operationmap` (without the scheduler version as `map` doesnt take a scheduler yet either) [rxjava-pull-requests #109](https://netflixosscicloudbeescom/job/rxjava-pull-requests/109/) failurelooks like theres a problem with this pull request || the failing test has nothing to do with my changes - i guess its a sporadic test problem as theres not much difference between 10 and 30 milliseconds || this should also be added to `observable` shouldnt it? || [rxjava-pull-requests #112](https://netflixosscicloudbeescom/job/rxjava-pull-requests/112/) failurelooks like theres a problem with this pull request || my eclipse configuration also automatically added a lot of `@override` annotations i hope you dont mind otherwise i can remove them again of course || the @override annotations are fine - they are standard java they may be missing in some places because this project started with java 5 compliance and it had the annotations in less places than java 6 ||
17.0,250,1,0,0,0,0,0,1,0,initial implementation of asyncsubject ive done some work on asyncsubject including unit tests and im looking for feedback i dont expect to get this pull request immediately accepted but i hope to find out if this is the correct workflow for this repository and if the code is up to your standards before i start pouring in more hours into issue #17 if you guys are ok with the asyncsubject implementation ill start working on the otherslooking forward to some feedback! [rxjava-pull-requests #110](https://netflixosscicloudbeescom/job/rxjava-pull-requests/110/) successthis pull request looks good || hi @michaeldejong thanks for getting involved!based on my reading of the msdn docs for `asyncsubject` and your code this looks goodthank for you following the coding style of the project and making sure the copyright unit tests etc are all in placemerging now ||
20.0,257,1,0,0,0,0,0,1,0,improved scan reduce aggregate `scan` is currently restricted to accumulators of type `func2 ` where `func2 ` would be possible for initial values of type `r` this pull request tries to fix this by generalizing the `scan` implementation i had to restructure the scan operator a bit for this to stay typesafe imho its more readable now thoughthis indirectly leads to generalized `reduce` tooalso `aggregate` is added as an alias for `reduce` (see #20) [rxjava-pull-requests #120](https://netflixosscicloudbeescom/job/rxjava-pull-requests/120/) successthis pull request looks good || [rxjava-pull-requests #121](https://netflixosscicloudbeescom/job/rxjava-pull-requests/121/) failurelooks like theres a problem with this pull request || [rxjava-pull-requests #122](https://netflixosscicloudbeescom/job/rxjava-pull-requests/122/) successthis pull request looks good || thank you for working on this - `observable` had not had any changes done to it to expose the new `reduce` or `scan` methods so that should probably be added to this pull request- what names should we use on the public api?rxnet never used `reduce` it uses `aggregate` others call it fold accumulate etc (more here http://enwikipediaorg/wiki/fold_(higher-order_function))java 8 is using the `reduce` and `collector` names (http://downloadjavanet/lambda/b74/docs/api/java/util/stream/streamhtml) what names should we use and what aliases if any should we include in `observable`? || about `observable` - hmm seems that the changes got lost somehow ill go dig them out agaid about the names to use: imho rxjava should have the java 8 names as well as the orginial rxnet names || agreed with your opinion on naming can you add those when you update the observable and make sure the javadocs of the methods are clear in linking to each other when they are aliases of each other? || ive had a look at the java 8 stream operations to me it looks like theres no explicit `scan` equivalent in java 8 or am i missing something?`collect` seems to be specifically made for mutable operations i dont see where we would use thatso i would just alias `reduce` with `aggregate` and `scan` stays unaliased if thats okay || that works for me we can always add more aliases if java 8 adds a `scan` equivalent || i plan on doing a release tomorrow (about 12 hours from now) if you want to try and have this ready for that || [rxjava-pull-requests #131](https://netflixosscicloudbeescom/job/rxjava-pull-requests/131/) successthis pull request looks good || as soon as this is in my `swing` branch becomes finally ready for a merge it offers a few simple observables created from button click keyboard and mouse events looking forward to this :) ||
326.0,331,1,0,0,1,0,0,1,0,"adding super/extends so that observable is covariant ok so this pull request changes a _lot_ of lines its mostly generalizing all the `funcx`s to be used like `funcx[-t1 -t2 -tx +r]` (contravariant parameters covariant return type) and all the `observer`s to be used ""in a contravariant way"" a few of the `observable` uses are covariant now too (mostly `zip`)this is the pull request for #326this doesnt look very good in the code (thanks java) also it doesnt seem to make scala interop easier at all (at least not yet)please take a look im not exactly happy with the result - maybe im doing something wrong here? - ive still got hope that theres an easier waythe pull request compiles and tests ok for me (except for the clojure module but thats another story and not due to my changes) [rxjava-pull-requests #213](https://netflixosscicloudbeescom/job/rxjava-pull-requests/213/) failurelooks like theres a problem with this pull request || ill have to spend some time later playing with this anyone else able to try this out and comment on the changes?@jmhofer can you provide examples or use cases of using the updated code that demonstrates covariant/contravariant usage that couldnt be achieved before? || ok heres an example of what you can do now with the improved `zip`:``` javaimport rxobservableimport rxutilfunctionsfunc2class media {}class movie extends media {}class horrormovie extends movie {}class rating {}class coolrating extends rating {}class result {}class extendedresult extends result {}public class covariance { public static void main(string[] args) { observable horrors observablefrom(new horrormovie()) observable ratings observablefrom(new coolrating()) func2 combine new func2 () { @override public extendedresult call(media m rating r) { return null } } observablezip(horrors ratings combine) // 011: the method zip(observable observable func2 ) // in the type observable is not applicable for the arguments // (observable observable func2 ) // // but works in super-extends branch }}``` || lots more `observable` usages to go however the `observer`s are probably mostly done || [rxjava-pull-requests #216](https://netflixosscicloudbeescom/job/rxjava-pull-requests/216/) failurelooks like theres a problem with this pull request || let me know when youre ready for this to be merged and released i plan on releasing this as 0120 as it does have some breaking changes || that cloudbees build failure is legit i also cant build `rxjava-scala` on my machine with this branch the core library is fine```* what went wrong:execution failed for task :language-adaptors:rxjava-scala:compilescala> compilation failed because of an internal compiler error see the error output for details``` || in this line:``` javaobservable observable observablecreate(new func1 subscription>()```is it the case that java programmers creating an `observable` this way would always have to include the `? super` bit? or is this just for completeness? is this what you mean by ""im not exactly happy with the result""? i havent thought through it but this doesnt seem like it should be necessary if its done right || @benjchristensen i just noticed that too and adapted the `rximplicits`@daveray looks like it yes i couldnt make the compiler happy without it but maybe im missing something if you find something that avoids this then please let me know || [rxjava-pull-requests #217](https://netflixosscicloudbeescom/job/rxjava-pull-requests/217/) successthis pull request looks good || still to do: future is covariant and timestamped and notification are probably tooalso: lots of operators can be used standalone and therefore should be generalized too || [rxjava-pull-requests #218](https://netflixosscicloudbeescom/job/rxjava-pull-requests/218/) successthis pull request looks good || [rxjava-pull-requests #219](https://netflixosscicloudbeescom/job/rxjava-pull-requests/219/) failurelooks like theres a problem with this pull request || huh? - very interesting (compiles for me) || [rxjava-pull-requests #220](https://netflixosscicloudbeescom/job/rxjava-pull-requests/220/) successthis pull request looks good || [rxjava-pull-requests #221](https://netflixosscicloudbeescom/job/rxjava-pull-requests/221/) successthis pull request looks good || [rxjava-pull-requests #222](https://netflixosscicloudbeescom/job/rxjava-pull-requests/222/) successthis pull request looks good || [rxjava-pull-requests #223](https://netflixosscicloudbeescom/job/rxjava-pull-requests/223/) successthis pull request looks good || i would call this ready to merge now i looked through all the code and adapted everything i found i cant guarantee that i havent overlooked something but i guess a few places here and there can still be adapted later on without too much harmthe one caveat is @daverays comment maybe the observers are overgeneralized somewhere and we can really avoid people having to write `? super x` when creating their own observers i havent found a solution for this but im probably blind to it by nowof course one could still add a lot of ""tests"" or ""use cases"" in `covariancetest` to show that everything compiles as it should - in that respect im rather optimistic thoughmaybe we can also get rid of more rawtype/unchecked annotations now ill check this later onnow i need some time to recover from all that toiling through java boilerplatery :) || i need to spend some more time on this in my playing around i wasnt thrilled by how it forces this type of user code that has `? super` in it:``` java public static observable o observablecreate(new func1 subscription>() { @override public subscription call(observer t1) { return null } })``` || i have the same concern guava seems to takes the same approach but i dont recall ever having to use type constraints like that when using it briefly looking through the guava code nothing stood out to me though that would make it behave differently though || re-reading effective java josh bloch says this on page 137:> properly used wildcard types are nearly invisible to users of a class they cause methods to accept the parameters they should accept and reject those they should reject if the user of a class has to think about wildcard types there is probably something wrong with the class’s apihowever all of his examples are about methods they arent about instantiating classes like `func1 ` where ` ` ends up as ` ? extends subscription>` || perhaps if this is what covariant generics truly requires we create a new function type specifically for this extremely common case of creating an `observable` and have it be something like this:``` javapublic interface observablefunction extends func1 subscription> { public subscription call(observer t1)}```it can then be used like this:``` java public static observable o2 observablecreate(new observablefunction () { @override public subscription call(observer t1) { return null } }) public static class myobserver implements observer { @override public void oncompleted() { // todo auto-generated method stub } @override public void onerror(throwable e) { // todo auto-generated method stub } @override public void onnext(media args) { // todo auto-generated method stub } } public static void testthis() { o2subscribe(new myobserver()) }```this still requires `public subscription call(observer t1)` but that is auto-generated by an ide (and lets face it anyone writing java is using an ide) whereas the function definition is far easier: `new observablefunction `probably need a better name than `observablefunction` but thus far it feels better to use || unfortunately it cant be an overload of the existing create method as type erasure (and dynamic languages) see it as the same thing``` javapublic static observable create(func1 ? extends subscription> func)```using the `observablefunction` works against that but then people would have to discover that new type in some other way to be truly user-friendly the method signature would need to change to:``` javapublic static observable create(observablefunction func)```this way people would get prompted by their ides and javadoc to use the easiest approachthis whole thing (with or without a new type) is a wide-impact breaking change all places someone does `observablecreate` || i tried again to do without observer in several relevant places but i failed yet again it seems to be just necessary it stands to reason though if you think about it because observer is a contravariant type and java cant deal with that in any other way and in the case of observers api users are not just using them theyre creating themi like bens `observablefunction` idea above i think it would probably even be possible to get around the overloading problem by not inheriting from `func1` delegating to it instead however its still a wide-impact breaking change due to the `? super` that has to be added within every `call` method signature concerning observersstill if the `create` method is the biggest problem maybe its not so big after all or is `create` really so widely used? - id think that mostly api users will be using already created observables combining them and subscribing to them || here is a trivial example using java 8 demonstrating how `? super` needs to exist even here if retaining type safety:``` java observable omovie observablecreate((observer o) -> { oonnext(new movie()) oonnext(new movie()) return subscriptionsempty() })map((movie) -> { return ""movie transformed: "" + movie }) observable omedia observablecreate((observer o) -> { oonnext(new media()) oonnext(new horrormovie()) return subscriptionsempty() })map((movie) -> { return ""media transformed: "" + movie }) observablezip(omovie omedia (a b) -> { return a + "" ----- "" + b })subscribe((movie) -> { systemoutprintln(""media/movie: "" + movie) })```or type safety can be thrown away:``` java observable omovie observablecreate((observer o) -> { oonnext(new movie()) oonnext(new movie()) return subscriptionsempty() })map((movie) -> { return ""movie transformed: "" + movie })```but now that allows this to compile:``` java observable omovie observablecreate((observer o) -> { oonnext(new movie()) oonnext(""hello"") // this is not a movie object return subscriptionsempty() })map((movie) -> { return ""movie transformed: "" + movie })``` || @jmhofer the `create` method is how `observable`s are created so this affects all producers this should not affect consumers other than making the prompts/docs verbose:![screen shot 2013-09-03 at 4 41 21 pm](https://fcloudgithubcom/assets/813492/1077109/6a7a584a-14f2-11e3-9886-bdddd24de290png)@mttkay and @mustafasezgin do you have any input on this discussion since you are using rxjava from plain java? || groovy is similar but the generics dont actually do much for it as they are more-or-less ignored at compile time as best i can tell:``` groovy observable omovie observablecreate({ observer o -> oonnext(new movie()) oonnext(new movie()) return subscriptionsempty() })map({ movie -> return ""movie transformed: "" + movie }) observable omedia observablecreate({ observer o -> oonnext(new media()) oonnext(new horrormovie()) return subscriptionsempty() })map({ movie -> return ""media transformed: "" + movie }) observablezip(omovie omedia { a b -> return a + "" ----- "" + b })subscribe({ movie -> systemoutprintln(""media/movie: "" + movie) })``` || this groovy code works against current master as well as the new code with `? super`:``` groovy observable omovie observablecreate({ observer o -> oonnext(new movie()) oonnext(new movie()) ooncompleted() return subscriptionsempty() }) observable omedia observablecreate({ observer o -> oonnext(new media()) oonnext(new horrormovie()) ooncompleted() return subscriptionsempty() }) observablezip(omovie omedia { movie a media b -> return stringvalueof(a) + "" ----- "" + stringvalueof(b) })subscribe({ media -> systemoutprintln(""media/movie: "" + media) })```and here it is again in plain java:``` java observable omovie observablecreate(new func1 subscription>() { @override public subscription call(observer o) { oonnext(new movie()) oonnext(new movie()) ooncompleted() return subscriptionsempty() } }) observable omedia observablecreate(new func1 subscription>() { @override public subscription call(observer o) { oonnext(new media()) oonnext(new horrormovie()) ooncompleted() return subscriptionsempty() } }) observablezip(omovie omedia new func2 () { @override public string call(movie a media b) { return stringvalueof(a) + "" ----- "" + stringvalueof(b) } })subscribe(new action1 () { @override public void call(string media) { systemoutprintln(""media/movie: "" + media) } })```it seems that `? super` is fine on the outer generics and doesnt need to be typed everywhere its just when its a generic inside a generic the type of the `observer` that it becomes annoying || it seems the only option (while supporting covariance) for reducing code verbosity is to create a new type that hides the `func1 ? extends subscription>` complexityso my question now is: should we change the api to make all uses of `create` use the new type or should it remain as `func1` and the other type is just a nice utility that can be used to fulfill the signature?in other words do we leave it as this:``` javapublic static observable create(func1 ? extends subscription> func)```or change it to ``` javapublic static observable create(observablefunction func)```and what do we call the new type if we go that route? options ive considered are:- `observablefunction`- `observablefunc`- `onsubscribefunction`- `onsubscribefunc`- `funconsubscribe`and should that live in `rxutilfunctions` or `rx` alongside `rxobservable`? it feels that this is not generic and should therefore live inside `rx`unfortunately we can not overload this method and support both as type erasure makes them the same (and it will confuse dynamic languages implicits etc) if we had two methods with similar single function signaturesnormally id rather leave the lower level `func1` method signature and just have a helper class but code completion and javadocs will be far less obvious and not very discoverable thus for discoverability i think it makes more sense to use `create(observablefunction func)` i cant yet think of any forward-compatibility reason why this would be a bad thing this pull request is breaking either direction we pursue || one last spam to everyone please weigh in if you have an opinion as i intend on making a decision and releasing this weekthis will be a breaking change and affect usage for everyone || here is what the `observablefunction` interface looks like:``` java/** * function interface for work to be performed when an {@link observable} is subscribed to via {@link observable#subscribe(observer)} * * @param */public interface observablefunction extends func1 subscription> { public subscription call(observer t1)}```and the updated `create` method:``` javapublic static observable create(observablefunction func) ```and sample code using this:``` java observable omovie observablecreate(new observablefunction () { @override public subscription call(observer o) { oonnext(new movie()) oonnext(new movie()) ooncompleted() return subscriptionsempty() } })``` || here is a fork including these changes so we can review and discuss: https://githubcom/benjchristensen/rxjava/commit/de0358f48518225cea6aaf1fbb56ee529eec8191im still not thrilled by any of the directions we can take here i cant argue against making rxjava support covariant types josh bloch certainly supports it in effective java when he says ""if you write a library that will be widely used the proper use of wildcard types should be considered mandatory""on the flip-side it forces the use of ? super/? extends everywhere even when covariant requirements are rarei think the only decision at this point to make is whether we should use something like `observablefunction ` to minimize the verbosity or just leave `func1 ? extends subscription>` and if we do use `observablefunction` do we provide similar solutions elsewhere? that feels wrong to have special function interfaces for so many things even though it likely will improve readability and usabilityother operators that are awkward include:- `defer(func0 > observablefactory)`- `aggregate(func2 accumulator)`- `buffer(func0 > bufferclosingselector)`- `flatmap(func1 > func)`flatmap is very common and ends up like this:``` java omediaflatmap(new func1 >() { @override public observable call(media s) { } })```compare this with current:``` java omediaflatmap(new func1 >() { @override public observable call(media s) { } })```however lambdas do make a big different on instance methods (not as much on statics) as they can infer the types for example in java 8 the above can become this:``` java omediaflatmap(value -> { return null })```so without `observablefunction ` in java 8 we have:``` java observablecreate((observer o) -> { oonnext(new media()) oonnext(new horrormovie()) return subscriptionsempty() })flatmap(movie -> { return observablefrom(""media transformed: "" + moviegetname()) })```with `observablefunction ` in java 8 we get this:``` java observablecreate((observer o) -> { oonnext(new media()) oonnext(new horrormovie()) return subscriptionsempty() })flatmap(movie -> { return observablefrom(""media transformed: "" + moviegetname()) })```it seems that type inference will handle the instance methods for example `aggregate`/`reduce` becomes this:``` java observablecreate((observer o) -> { oonnext(1) oonnext(2) return subscriptionsempty() })aggregate((previous current) -> { return previous + current })```so its only the static methods of concern `create` being the most significantjava 6/7 (and android) are going to be ugly no matter what - but we already knew that and they already are this makes it worse || experiencing some of the pain with generic method signatures and nestingfirst hand i prefer the type alias in form of an interface i would arguethat the subscription function is so widely used that the interfacecloaking it will be understood quickly enough by developers so the loss indirect clarity should be negligible || [rxjava-pull-requests #229](https://netflixosscicloudbeescom/job/rxjava-pull-requests/229/) failurelooks like theres a problem with this pull request || +1 observablefunction interface but call it something else maybe with subscription/subscribe in the name || @benjchristensen we could overload `create` etc - for this wed have to make `observablefunction` delegate to `func1` then instead of inheriting from it im not sure if thats a good idea though it would probably be even more confusingim not sure about the naming although it is kind of _the_ internal `observable` function i think id prefer `subscriptionfunction` or `subscriberfunction` or something like that || [rxjava-pull-requests #230](https://netflixosscicloudbeescom/job/rxjava-pull-requests/230/) successthis pull request looks good || how about these names?- `onsubscribefunction`- `onsubscribefunc`- `funconsubscribe` || based on my highly scientific poll of people around me at my office and the few who have commented above im going with `onsubscribefunc` || @benjchristensen works for me will it extend `func1` or be an independent type as @jmhofer suggests above i think id prefer the latter || i havent played with it not extending func1 it will need to at least extend `function` so it fits with all other functions in the codebase in what way will it improve things if it doesnt extend? || since this function is only intended for us by the `observablecreate` does anyone have issues with it being namespaced as `rxobservableonsubscribefunc` as a static inner class of `observable` rather than a first-class citizen `rxonsubscribefunc`?this works great in java are there any issues from clojure or scala doing it this way?create looks like this:``` javapublic static observable create(onsubscribefunc func)```use of it looks like this:``` java import rxobservable import rxobservableonsubscribefunc observable observable observablecreate(new onsubscribefunc () { @override public subscription call(observer observer) { observeronnext(""one"") observeronnext(""two"") observeronnext(""three"") observeroncompleted() return subscriptionsempty() } })```the function definition looks like:``` java /** * function interface for work to be performed when an {@link observable} is subscribed to via {@link observable#subscribe(observer)} * * @param */ public static interface onsubscribefunc extends function { public subscription call(observer t1) }``` || good idea and shouldnt be a problem for scala || great ill proceed with this change then thanks for the feedback || final interface looks like this:``` java /** * function interface for work to be performed when an {@link observable} is subscribed to via {@link observable#subscribe(observer)} * * @param */ public static interface onsubscribefunc extends function { public subscription onsubscribe(observer t1) }```this is being merged in https://githubcom/netflix/rxjava/pull/343 ||"
38.0,375,1,0,0,0,0,0,1,0,implemented `distinct` operator this pr implements `distinct` as speficied by #38 again i havent implemented the net methods taking an `iequalitycomparator` (see #374) [rxjava-pull-requests #272](https://netflixosscicloudbeescom/job/rxjava-pull-requests/272/) successthis pull request looks good ||
372.0,381,1,0,0,0,0,0,1,0,implemented `mapwithindex` as requested by @samuelgruetter in #372 [rxjava-pull-requests #278](https://netflixosscicloudbeescom/job/rxjava-pull-requests/278/) failurelooks like theres a problem with this pull request || (test failure again due to sporadic timing problems) || i just submitted an [issue](https://githubcom/netflix/rxjava/issues/383) for this || looks good ||
24.0,385,1,0,0,0,0,0,1,0,"implemented the any operator this implements the operator `any` from #24 in all two variantshowever i encountered two problemsupdated: the online document http://msdnmicrosoftcom/en-us/library/hh211993(vvs103)aspx is wrong see my later discussioother question is if i add the `any` method to `rxobservable ` some unit tests will fail as the method `any` in `rxobservable ` overrides the method `orgmockitomatchersany(javalangclass )` in some unit tests (eg `rxsubjectsreplaysubject `) do i need to use another method name or just modify the unit tests? now the `any` methods in `rxobservable ` are commented outthanks [rxjava-pull-requests #284](https://netflixosscicloudbeescom/job/rxjava-pull-requests/284/) successthis pull request looks good || i havent looked at the first question yet but on the second one well likely need to stop importing `orgmockitomatchers*` and call it directly `orgmockitomatchersany` || sorry that i missed the keyword `empty` in my description the first question is im not sure how to handle an `empty` observable sequence || [rxjava-pull-requests #285](https://netflixosscicloudbeescom/job/rxjava-pull-requests/285/) aborted || i tested the c# `any` today the environment is vs2010 net 40i found the description in my vs is `determines whether any element of an observable sequence satisfies a condition` this is totally different from the online document http://msdnmicrosoftcom/en-us/library/hh211993(vvs103)aspxi always did some tests for `any` here is the code: using systemusing systemcollectionsgenericusing systemlinqusing systemtextusing systemreactivelinqnamespace consoleapplication1{ class program { static void main(string[] args) { var any observableempty ()any() anysubscribe( x > consolewriteline(""subscriber got "" + x) // subscriber got false ) any observablerange(1 5)any() anysubscribe( x > consolewriteline(""subscriber got "" + x) // subscriber got true ) any observableempty ()any( x > true ) anysubscribe( x > consolewriteline(""subscriber got "" + x) // subscriber got false ) any observablerange(1 5)any( x > x > 3 ) anysubscribe( x > consolewriteline(""subscriber got "" + x) // subscriber got true ) any observablerange(1 5)any( x > x > 5 ) anysubscribe( x > consolewriteline(""subscriber got "" + x) // subscriber got false ) consolereadline() } }} here is the output: subscriber got falsesubscriber got truesubscriber got falsesubscriber got truesubscriber got false in summary - if an observable sequence is empty `any` emits `false`- if one element of an observable sequence satisfies the condition `any` emits `true`- if all elements of an observable sequence do not satisfy the condition `any` emits `false` || i have implemented the correct any operator please take a look thanks! || [rxjava-pull-requests #286](https://netflixosscicloudbeescom/job/rxjava-pull-requests/286/) aborted || in scala we will probably use `isempty` instead of `any()` (negated) and `exists(somepredicate)` instead of `any(somepredicate)` you could use these names also in java to avoid confusion and name conflicts || @zsxwing i dont have time tonight but will definitely get to this in the near future thank you for getting involved! ||"
41.0,390,1,0,0,0,0,0,1,0,implemented the elementat and elementatordefault operators see #41 hithis implements the `elementat` and `elementatordefault` operators from #41for `elementat` if the index is less than 0 or greater than or equal to the number of elements in the source sequence an indexoutofboundsexception will be threwfor `elementatordefault` if the index is less than 0 an indexoutofboundsexception will be threw whats more i added a `defaultvalue` parameter i can not get the element type in the source observable due to type erasure so i can not determine the default value automatically thats why `elementatordefault` needs a `defaultvalue` parameter [rxjava-pull-requests #288](https://netflixosscicloudbeescom/job/rxjava-pull-requests/288/) successthis pull request looks good || thank you @zsxwing ||
84.0,409,1,0,0,0,0,0,1,0,implemented synchronize with lock hii implemented #84 to support that sending a lock to the `synchronize` operatori also found that there was a issue that `testmultithreadedwithnpe` and `testmultithreadedwithnpeinmiddle` might fail in some special situation when `onerror` is invoked before any `onnext` the last statement `assertequals(1 busyobservermaxconcurrentthreadsget())` in these methods will fail i also fixed this issue in the pull request [rxjava-pull-requests #313](https://netflixosscicloudbeescom/job/rxjava-pull-requests/313/) aborted || looks good thank you! ||
42.0,415,1,0,0,0,0,0,1,0,implemented the empty operator with scheduler hii implemented the empty operator with scheduler #42 please take a look thanks [rxjava-pull-requests #323](https://netflixosscicloudbeescom/job/rxjava-pull-requests/323/) successthis pull request looks good || [rxjava-pull-requests #325](https://netflixosscicloudbeescom/job/rxjava-pull-requests/325/) successthis pull request looks good ||
89.0,416,1,0,0,0,0,0,1,0,implemented the throw operator with scheduler hii implemented the `throw` operator #89 with scheduler i found that rxjava had an `error` method so i just implemented the scheduler overload [rxjava-pull-requests #324](https://netflixosscicloudbeescom/job/rxjava-pull-requests/324/) successthis pull request looks good || @benjchristensen i agree with you i updated the codes and rebased it to master || [rxjava-pull-requests #338](https://netflixosscicloudbeescom/job/rxjava-pull-requests/338/) successthis pull request looks good ||
54.0,424,1,0,0,0,0,0,1,0,implemented the ignoreelements operator hii implemented the `ignoreelements` operator #54 please take a look thanks [rxjava-pull-requests #333](https://netflixosscicloudbeescom/job/rxjava-pull-requests/333/) successthis pull request looks good || can you rebase this with the changes to master so it can be cleanly merged again? with all the other changes this no longer cleanly mergesthank you @zsxwing for this and all the other pull requests i really appreciate your involvement in the project || i rebased the pull request now it should be able to merge to master directly || [rxjava-pull-requests #336](https://netflixosscicloudbeescom/job/rxjava-pull-requests/336/) successthis pull request looks good || [rxjava-pull-requests #337](https://netflixosscicloudbeescom/job/rxjava-pull-requests/337/) successthis pull request looks good ||
90.0,450,1,0,0,0,0,0,1,0,implemented the timeinterval operator hi this pr implemented the `timeinterval` operator #90 please take a look thanks [rxjava-pull-requests #370](https://netflixosscicloudbeescom/job/rxjava-pull-requests/370/) failurelooks like theres a problem with this pull request || looks good thanks @zsxwing ||
22.0,460,1,0,0,0,0,0,1,0,implemented the amb operator hi this pr implemented the `amb` operator #22 i used varargs to support the array version and first-second version in one method so in my pr there are only two variants [rxjava-pull-requests #379](https://netflixosscicloudbeescom/job/rxjava-pull-requests/379/) failurelooks like theres a problem with this pull request || you shouldnt define a vararg method taking a generic type because you cannot use it without getting warnings (weve already had this with other operators) instead define an overload for 2 args 3 args 4 args || yup its a pain but this is what we ended up doing for zip merge etc instead of using varargs || [rxjava-pull-requests #382](https://netflixosscicloudbeescom/job/rxjava-pull-requests/382/) failurelooks like theres a problem with this pull request || thank you ||
91.0,463,1,0,0,0,0,1,1,1,added the rest overloads of timeout operator hi this pr implemented the rest overloads of `timeout` operator #91 please take a look thanks [rxjava-pull-requests #383](https://netflixosscicloudbeescom/job/rxjava-pull-requests/383/) failurelooks like theres a problem with this pull request || due to pull request https://githubcom/netflix/rxjava/pull/466 which touched virtually every file in the project can you please rebase this so it can merge cleanly again? || [rxjava-pull-requests #388](https://netflixosscicloudbeescom/job/rxjava-pull-requests/388/) failurelooks like theres a problem with this pull request || i have rebased it || thank you @zsxwing ||
61.0,478,1,0,0,0,0,0,1,0,"implemented the ""operator: min and minby"" and ""operator: max and maxby"" hi this pr implemented the `operator: min and minby` #63 and `operator: max and maxby` #61 every operator has 2 variants one for `comparable` another for `comparator` please take a look thanks! [rxjava-pull-requests #404](https://netflixosscicloudbeescom/job/rxjava-pull-requests/404/) successthis pull request looks good || `operationmin` and `operationmax` are exactly the same except that ` ` are swapped cant you implement one in terms of the other? or create a general one which takes +1 or -1 to know whether we want ` `? || is the following solution ok?``` java public static > observable min( observable source) { return minmax(source -1) } public static > observable max( observable source) { return minmax(source 1) } public static > observable minmax( observable source final long flag) { return sourcereduce(new func2 () { @override public t call(t acc t value) { if (flag * acccompareto(value) > 0) { return acc } return value } }) }````flag` must be `long` as `integermin_value -1 * integermin_value` but we will have one multiplication for every `compareto`another solution is:``` java public static > observable min( observable source) { return minmax(source true) } public static > observable max( observable source) { return minmax(source false) } public static > observable minmax( observable source final boolean ismin) { return sourcereduce(new func2 () { @override public t call(t acc t value) { if (ismin) { if (acccompareto(value) 0) { return acc } } return value } }) }```@samuelgruetter do you have other better solution? || i like both of these two solutions with a slight preference for the first one -)nice catch with integermin_value :-)a third solution would be to implement max using min and wrapping the given comparator such that it inverts the ordering but i think the first solution is the bestanother issue: what if there are several minimal elements? does min return the first of them the last of them or is it unspecified? this should be documented || @samuelgruetter thanks for your review i used the +1/-1 way to implement it and also updated the document || [rxjava-pull-requests #407](https://netflixosscicloudbeescom/job/rxjava-pull-requests/407/) successthis pull request looks good || looks good @zsxwing and thanks @samuelgruetter for the reviewsome nice use of generics in those signatures! ||"
63.0,478,1,0,0,0,0,0,1,0,"implemented the ""operator: min and minby"" and ""operator: max and maxby"" hi this pr implemented the `operator: min and minby` #63 and `operator: max and maxby` #61 every operator has 2 variants one for `comparable` another for `comparator` please take a look thanks! [rxjava-pull-requests #404](https://netflixosscicloudbeescom/job/rxjava-pull-requests/404/) successthis pull request looks good || `operationmin` and `operationmax` are exactly the same except that ` ` are swapped cant you implement one in terms of the other? or create a general one which takes +1 or -1 to know whether we want ` `? || is the following solution ok?``` java public static > observable min( observable source) { return minmax(source -1) } public static > observable max( observable source) { return minmax(source 1) } public static > observable minmax( observable source final long flag) { return sourcereduce(new func2 () { @override public t call(t acc t value) { if (flag * acccompareto(value) > 0) { return acc } return value } }) }````flag` must be `long` as `integermin_value -1 * integermin_value` but we will have one multiplication for every `compareto`another solution is:``` java public static > observable min( observable source) { return minmax(source true) } public static > observable max( observable source) { return minmax(source false) } public static > observable minmax( observable source final boolean ismin) { return sourcereduce(new func2 () { @override public t call(t acc t value) { if (ismin) { if (acccompareto(value) 0) { return acc } } return value } }) }```@samuelgruetter do you have other better solution? || i like both of these two solutions with a slight preference for the first one -)nice catch with integermin_value :-)a third solution would be to implement max using min and wrapping the given comparator such that it inverts the ordering but i think the first solution is the bestanother issue: what if there are several minimal elements? does min return the first of them the last of them or is it unspecified? this should be documented || @samuelgruetter thanks for your review i used the +1/-1 way to implement it and also updated the document || [rxjava-pull-requests #407](https://netflixosscicloudbeescom/job/rxjava-pull-requests/407/) successthis pull request looks good || looks good @zsxwing and thanks @samuelgruetter for the reviewsome nice use of generics in those signatures! ||"
423.0,480,1,0,0,0,0,0,1,0,bugfix: emit an illegalargumentexception instead of arithmeticexception if the observable is empty this pr fixed the `average` issue in #423 if an observable is empty `average` will emit an `illegalargumentexception` instead of `arithmeticexception` thanks! [rxjava-pull-requests #405](https://netflixosscicloudbeescom/job/rxjava-pull-requests/405/) successthis pull request looks good ||
99.0,481,1,0,0,0,0,0,1,0,implement the using operator hi this pr implemented the `using` operator #99 please take a look thanks! [rxjava-pull-requests #406](https://netflixosscicloudbeescom/job/rxjava-pull-requests/406/) successthis pull request looks good || interesting operator hadnt really ever looked at this onethank you @zsxwing for the implementation! ||
68.0,492,1,0,0,0,0,0,1,0,implement the scheduler overloads for range from startwith hi this pr implemented the scheduler overloads for range #68 from #98 startwith #82 please take a look thanks! [rxjava-pull-requests #415](https://netflixosscicloudbeescom/job/rxjava-pull-requests/415/) successthis pull request looks good || this conflicts and cant merge can you rebase and update the pr please? || i have updated the pr || [rxjava-pull-requests #420](https://netflixosscicloudbeescom/job/rxjava-pull-requests/420/) successthis pull request looks good || thanks ||
82.0,492,1,0,0,0,0,0,1,0,implement the scheduler overloads for range from startwith hi this pr implemented the scheduler overloads for range #68 from #98 startwith #82 please take a look thanks! [rxjava-pull-requests #415](https://netflixosscicloudbeescom/job/rxjava-pull-requests/415/) successthis pull request looks good || this conflicts and cant merge can you rebase and update the pr please? || i have updated the pr || [rxjava-pull-requests #420](https://netflixosscicloudbeescom/job/rxjava-pull-requests/420/) successthis pull request looks good || thanks ||
98.0,492,1,0,0,0,0,0,1,0,implement the scheduler overloads for range from startwith hi this pr implemented the scheduler overloads for range #68 from #98 startwith #82 please take a look thanks! [rxjava-pull-requests #415](https://netflixosscicloudbeescom/job/rxjava-pull-requests/415/) successthis pull request looks good || this conflicts and cant merge can you rebase and update the pr please? || i have updated the pr || [rxjava-pull-requests #420](https://netflixosscicloudbeescom/job/rxjava-pull-requests/420/) successthis pull request looks good || thanks ||
494.0,496,1,0,0,0,0,0,1,0,add contravariant for min and max hi this pr added contravariant for min and max mentioned in #494 [rxjava-pull-requests #419](https://netflixosscicloudbeescom/job/rxjava-pull-requests/419/) successthis pull request looks good ||
100.0,506,1,0,0,0,0,0,1,0,operators: and then when issue #23 issue #88 issue #100can be extended to plan4plan9 and pattern4pattern9 if action4action9 is available not sure about the actionn version [rxjava-pull-requests #430](https://netflixosscicloudbeescom/job/rxjava-pull-requests/430/) failurelooks like theres a problem with this pull request || i dont understand i used the master havent touched groupby or the schedulers the build succeeds on my machine (although with jdk 7) now what?edit: i found the logical error in operationgroupbytest:334 assuming the thread will finish if it emits 29-49 items is unreliable should that assertion be tested at all? || just another case of https://githubcom/netflix/rxjava/issues/383#issuecomment-27571436 the operationgroupbytest test issue has not be fixed yet || that is an impressive contribution @akarnokd i dont see any problems in my review the unit tests were essential to understanding and trusting this so thank you for being thoroughim going to merge this and leverage the fact that were still pre 10 so that if there are any issues found we can still fix them even if we need to break a signature ||
23.0,506,1,0,0,0,0,0,1,0,operators: and then when issue #23 issue #88 issue #100can be extended to plan4plan9 and pattern4pattern9 if action4action9 is available not sure about the actionn version [rxjava-pull-requests #430](https://netflixosscicloudbeescom/job/rxjava-pull-requests/430/) failurelooks like theres a problem with this pull request || i dont understand i used the master havent touched groupby or the schedulers the build succeeds on my machine (although with jdk 7) now what?edit: i found the logical error in operationgroupbytest:334 assuming the thread will finish if it emits 29-49 items is unreliable should that assertion be tested at all? || just another case of https://githubcom/netflix/rxjava/issues/383#issuecomment-27571436 the operationgroupbytest test issue has not be fixed yet || that is an impressive contribution @akarnokd i dont see any problems in my review the unit tests were essential to understanding and trusting this so thank you for being thoroughim going to merge this and leverage the fact that were still pre 10 so that if there are any issues found we can still fix them even if we need to break a signature ||
88.0,506,1,0,0,0,0,0,1,0,operators: and then when issue #23 issue #88 issue #100can be extended to plan4plan9 and pattern4pattern9 if action4action9 is available not sure about the actionn version [rxjava-pull-requests #430](https://netflixosscicloudbeescom/job/rxjava-pull-requests/430/) failurelooks like theres a problem with this pull request || i dont understand i used the master havent touched groupby or the schedulers the build succeeds on my machine (although with jdk 7) now what?edit: i found the logical error in operationgroupbytest:334 assuming the thread will finish if it emits 29-49 items is unreliable should that assertion be tested at all? || just another case of https://githubcom/netflix/rxjava/issues/383#issuecomment-27571436 the operationgroupbytest test issue has not be fixed yet || that is an impressive contribution @akarnokd i dont see any problems in my review the unit tests were essential to understanding and trusting this so thank you for being thoroughim going to merge this and leverage the fact that were still pre 10 so that if there are any issues found we can still fix them even if we need to break a signature ||
96.0,513,1,0,0,0,0,0,1,0,operators tomap and tomultimap again issue #96 and issue #97tomap: 3 overloadstomultimap: 4 overloadsadded groovy test to verify overloading [rxjava-pull-requests #438](https://netflixosscicloudbeescom/job/rxjava-pull-requests/438/) successthis pull request looks good || ah this cant merge anymore because of other commits (probably the join operator on your other pr) can you rebase? ||
97.0,513,1,0,0,0,0,0,1,0,operators tomap and tomultimap again issue #96 and issue #97tomap: 3 overloadstomultimap: 4 overloadsadded groovy test to verify overloading [rxjava-pull-requests #438](https://netflixosscicloudbeescom/job/rxjava-pull-requests/438/) successthis pull request looks good || ah this cant merge anymore because of other commits (probably the join operator on your other pr) can you rebase? ||
532.0,560,1,0,0,0,0,0,1,0,add type variances for dooneach actions this fixes the use of contravariant actions (issue #532) [rxjava-pull-requests #487](https://netflixosscicloudbeescom/job/rxjava-pull-requests/487/) successthis pull request looks good || lgtm ||
52.0,563,1,0,0,0,0,0,1,0,operation groupbyuntil issue #52rebased [rxjava-pull-requests #491](https://netflixosscicloudbeescom/job/rxjava-pull-requests/491/) successthis pull request looks good ||
53.0,565,1,0,0,0,0,0,1,0,operator groupjoin v2 issue #53rebasedstill: @headinthebox while writing the test for the operator ive noticed that when both duration selectors are never() rxnet never calls oncompleted on the group subjects even though the left and right sources oncomplete() i havent seen rxnet test for this scenario this comes into play when i want to emulate join() with groupjoin(): the outer merge never oncompletes() if i understand the behavior corretly when both left and right sources get depleted there is no way a new group or new group value would arrive and all the open groups and the main observer can be oncompleted() this is somewhat similar to join() and groupbyuntil() behavior [rxjava-pull-requests #493](https://netflixosscicloudbeescom/job/rxjava-pull-requests/493/) successthis pull request looks good ||
74.0,571,1,0,0,0,0,0,1,0,operation sample with observable v2 issue #74- sample will terminate if either the source or the sampler terminates or throws an error- the sampler now emits values only in its onnext() method therefore if the sampler completes and there is a sampled value available (`valuetaken false`) it wont emit the value before terminating [rxjava-pull-requests #506](https://netflixosscicloudbeescom/job/rxjava-pull-requests/506/) successthis pull request looks good ||
564.0,575,1,0,0,0,0,0,1,0,reimplement the sequenceequal operator hi this pr reimplemented the `sequenceequal` operator #76 and should fix the issue #564the wiki page https://githubcom/netflix/rxjava/wiki/observable-utility-operators#sequenceequal still needs to be updated @davidmgross could you help update the marble diagram of `sequenceequal`? thanks! [rxjava-pull-requests #512](https://netflixosscicloudbeescom/job/rxjava-pull-requests/512/) successthis pull request looks good || okay i think ive got it corrected it only covers one condition so mightbenefit from having some more examples but itll do for nowon fri dec 6 2013 at 7:13 am cloudbees pull request builder plugin wrote:> rxjava-pull-requests #512https://netflixosscicloudbeescom/job/rxjava-pull-requests/512/success> this pull request looks good> > —> reply to this email directly or view it on githubhttps://githubcom/netflix/rxjava/pull/575#issuecomment-30001152> ## david m grossplp consulting || @davidmgross looks cool thanks || [rxjava-pull-requests #514](https://netflixosscicloudbeescom/job/rxjava-pull-requests/514/) successthis pull request looks good || good job just a few things - you are using `gate` to ensure concurrency and you access the `firstdone` and `seconddone` while synchronizing over `gate` i believe these two can be simple boolean fields instead of atomicbooleans- you are setting the `firstvalues` and `secondvalues` in the `init` method into a volatile fields i believe these can be moved into the constructor and set to a regular `private final list` type and accessor - [optional] you might want to call clear on both `firstvalues` and `secondvalues` if there was a termination condition so they dont hold onto queued values until the client observer disappears || i really think that `sequenceequal` should be implemented in terms of other operators dont reinvent the wheel with every operator you add -)in scala id do it like this:``` scaladef sequenceequal[t](o1: observable[t] o2: observable[t]): observable[boolean] { val obs1: observable[option[t]] o1map(some(_)) ++ observable(none) // ++ is concat val obs2: observable[option[t]] o2map(some(_)) ++ observable(none) // if different length comparing the `none` of the shorter with `some(element)` // of the longer will return false (obs1 zip obs2)forall(pair > pair_1 pair_2)}``` || @samuelgruetter great idea really thanks i overrode the previous commit as their is no option in java i use notification instead || [rxjava-pull-requests #515](https://netflixosscicloudbeescom/job/rxjava-pull-requests/515/) successthis pull request looks good || i also have a question about `notificationhasvalue```` java /** * retrieves a value indicating whether this notification has a value * * @return a value indicating whether this notification has a value */ public boolean hasvalue() { return isonnext() && value ! null }```here it checks if value is not null but i think value can be nulli also checked the rxnet codes here: http://rxcodeplexcom/sourcecontrol/latest#rxnet/source/systemreactivecore/reactive/notificationcs``` c# /// /// returns true /// public override bool hasvalue { get { return true } }```it returns true directly in `onnextnotification`if `notificationhasvalue` has the same meaning in rxjava and rxnet i think `&& value ! null` needs to be removed || [rxjava-pull-requests #516](https://netflixosscicloudbeescom/job/rxjava-pull-requests/516/) successthis pull request looks good || much nicer now -)regarding hasvalue: i dont know what is it good for if its the same as isonnext? and why would one need the current version? imho it could just be removedsomething else regarding null values and sequenceequal with default equality: i think you shouldnt call onerror(nullpointerexception) but just onnext(true) or onnext(false) || @samuelgruetter thanks for reminding me the null issue || [rxjava-pull-requests #517](https://netflixosscicloudbeescom/job/rxjava-pull-requests/517/) successthis pull request looks good ||
76.0,575,1,0,0,0,0,0,1,0,reimplement the sequenceequal operator hi this pr reimplemented the `sequenceequal` operator #76 and should fix the issue #564the wiki page https://githubcom/netflix/rxjava/wiki/observable-utility-operators#sequenceequal still needs to be updated @davidmgross could you help update the marble diagram of `sequenceequal`? thanks! [rxjava-pull-requests #512](https://netflixosscicloudbeescom/job/rxjava-pull-requests/512/) successthis pull request looks good || okay i think ive got it corrected it only covers one condition so mightbenefit from having some more examples but itll do for nowon fri dec 6 2013 at 7:13 am cloudbees pull request builder plugin wrote:> rxjava-pull-requests #512https://netflixosscicloudbeescom/job/rxjava-pull-requests/512/success> this pull request looks good> > —> reply to this email directly or view it on githubhttps://githubcom/netflix/rxjava/pull/575#issuecomment-30001152> ## david m grossplp consulting || @davidmgross looks cool thanks || [rxjava-pull-requests #514](https://netflixosscicloudbeescom/job/rxjava-pull-requests/514/) successthis pull request looks good || good job just a few things - you are using `gate` to ensure concurrency and you access the `firstdone` and `seconddone` while synchronizing over `gate` i believe these two can be simple boolean fields instead of atomicbooleans- you are setting the `firstvalues` and `secondvalues` in the `init` method into a volatile fields i believe these can be moved into the constructor and set to a regular `private final list` type and accessor - [optional] you might want to call clear on both `firstvalues` and `secondvalues` if there was a termination condition so they dont hold onto queued values until the client observer disappears || i really think that `sequenceequal` should be implemented in terms of other operators dont reinvent the wheel with every operator you add -)in scala id do it like this:``` scaladef sequenceequal[t](o1: observable[t] o2: observable[t]): observable[boolean] { val obs1: observable[option[t]] o1map(some(_)) ++ observable(none) // ++ is concat val obs2: observable[option[t]] o2map(some(_)) ++ observable(none) // if different length comparing the `none` of the shorter with `some(element)` // of the longer will return false (obs1 zip obs2)forall(pair > pair_1 pair_2)}``` || @samuelgruetter great idea really thanks i overrode the previous commit as their is no option in java i use notification instead || [rxjava-pull-requests #515](https://netflixosscicloudbeescom/job/rxjava-pull-requests/515/) successthis pull request looks good || i also have a question about `notificationhasvalue```` java /** * retrieves a value indicating whether this notification has a value * * @return a value indicating whether this notification has a value */ public boolean hasvalue() { return isonnext() && value ! null }```here it checks if value is not null but i think value can be nulli also checked the rxnet codes here: http://rxcodeplexcom/sourcecontrol/latest#rxnet/source/systemreactivecore/reactive/notificationcs``` c# /// /// returns true /// public override bool hasvalue { get { return true } }```it returns true directly in `onnextnotification`if `notificationhasvalue` has the same meaning in rxjava and rxnet i think `&& value ! null` needs to be removed || [rxjava-pull-requests #516](https://netflixosscicloudbeescom/job/rxjava-pull-requests/516/) successthis pull request looks good || much nicer now -)regarding hasvalue: i dont know what is it good for if its the same as isonnext? and why would one need the current version? imho it could just be removedsomething else regarding null values and sequenceequal with default equality: i think you shouldnt call onerror(nullpointerexception) but just onnext(true) or onnext(false) || @samuelgruetter thanks for reminding me the null issue || [rxjava-pull-requests #517](https://netflixosscicloudbeescom/job/rxjava-pull-requests/517/) successthis pull request looks good ||
60.0,587,1,0,0,0,0,0,1,0,operation longcount issue #60straightforward version of the regular count() (however i would have implemented it differently so the constant boxing-unboxing could be avoided) [rxjava-pull-requests #524](https://netflixosscicloudbeescom/job/rxjava-pull-requests/524/) successthis pull request looks good ||
577.0,593,1,0,0,0,0,0,1,0,"lock-free subscriptions - uniform naming of inner components: issue #592- lock-free approach to avoid deadlocks: issue #577- serialsubscriptionisunsubscribe added: issue #590remarks:- imo an unsubscribed single/serial/multiple subscription return subscriptionsempty() instead of null so unless the user put a null in there he/she shouldnt worry about null- there was a concurrency bug in @jloisel s reimplementation of compositesubscription it allowed multiple threads to enter the mutation part if the current state was already mutate ive added the necessary checks to allow only normal -> mutate transitions it cannot return subscriptionsempty() since the rx contract is to return null also returning empty() when unsubscribed is ambiguous: has it been unsubscribed or has empty() been set by the client code ? || [rxjava-pull-requests #527](https://netflixosscicloudbeescom/job/rxjava-pull-requests/527/) successthis pull request looks good || good that you fixed the race condition in multipleassignementsubscription as well as the contract (it was unsubscribing the previous subscription although it shouldnt) || ive checked the rxnet sources:- singleassignmentdisposable returns defaultdisposableinstance- serialdisposabe returns null- refcountdisposable returns disposableempty- scheduleddisposable returns defaultdisposableinstanceso my question is why only serialdisposable returns null? checking the return of the getsubscription to determine if unsubscription happened is wrong since serialsubscription can be started with null this is why `isunsubscribed()` is to be used to check the state || > it cannot return subscriptionsempty() since the rx contract is to return nulli dont think that is actually this strict that is what the implementation does i think it is better to return empty than null the real ""state"" is is isunsubscribed (and the properties might as well be write-only) || i think the disposable / subscription contract lakes precision and uniformity it doesnt matter to return null or empty what matters is a constant behavior following the ""least astonishment"" principle ||"
590.0,593,1,0,0,0,0,0,1,0,"lock-free subscriptions - uniform naming of inner components: issue #592- lock-free approach to avoid deadlocks: issue #577- serialsubscriptionisunsubscribe added: issue #590remarks:- imo an unsubscribed single/serial/multiple subscription return subscriptionsempty() instead of null so unless the user put a null in there he/she shouldnt worry about null- there was a concurrency bug in @jloisel s reimplementation of compositesubscription it allowed multiple threads to enter the mutation part if the current state was already mutate ive added the necessary checks to allow only normal -> mutate transitions it cannot return subscriptionsempty() since the rx contract is to return null also returning empty() when unsubscribed is ambiguous: has it been unsubscribed or has empty() been set by the client code ? || [rxjava-pull-requests #527](https://netflixosscicloudbeescom/job/rxjava-pull-requests/527/) successthis pull request looks good || good that you fixed the race condition in multipleassignementsubscription as well as the contract (it was unsubscribing the previous subscription although it shouldnt) || ive checked the rxnet sources:- singleassignmentdisposable returns defaultdisposableinstance- serialdisposabe returns null- refcountdisposable returns disposableempty- scheduleddisposable returns defaultdisposableinstanceso my question is why only serialdisposable returns null? checking the return of the getsubscription to determine if unsubscription happened is wrong since serialsubscription can be started with null this is why `isunsubscribed()` is to be used to check the state || > it cannot return subscriptionsempty() since the rx contract is to return nulli dont think that is actually this strict that is what the implementation does i think it is better to return empty than null the real ""state"" is is isunsubscribed (and the properties might as well be write-only) || i think the disposable / subscription contract lakes precision and uniformity it doesnt matter to return null or empty what matters is a constant behavior following the ""least astonishment"" principle ||"
592.0,593,1,0,0,0,0,0,1,0,"lock-free subscriptions - uniform naming of inner components: issue #592- lock-free approach to avoid deadlocks: issue #577- serialsubscriptionisunsubscribe added: issue #590remarks:- imo an unsubscribed single/serial/multiple subscription return subscriptionsempty() instead of null so unless the user put a null in there he/she shouldnt worry about null- there was a concurrency bug in @jloisel s reimplementation of compositesubscription it allowed multiple threads to enter the mutation part if the current state was already mutate ive added the necessary checks to allow only normal -> mutate transitions it cannot return subscriptionsempty() since the rx contract is to return null also returning empty() when unsubscribed is ambiguous: has it been unsubscribed or has empty() been set by the client code ? || [rxjava-pull-requests #527](https://netflixosscicloudbeescom/job/rxjava-pull-requests/527/) successthis pull request looks good || good that you fixed the race condition in multipleassignementsubscription as well as the contract (it was unsubscribing the previous subscription although it shouldnt) || ive checked the rxnet sources:- singleassignmentdisposable returns defaultdisposableinstance- serialdisposabe returns null- refcountdisposable returns disposableempty- scheduleddisposable returns defaultdisposableinstanceso my question is why only serialdisposable returns null? checking the return of the getsubscription to determine if unsubscription happened is wrong since serialsubscription can be started with null this is why `isunsubscribed()` is to be used to check the state || > it cannot return subscriptionsempty() since the rx contract is to return nulli dont think that is actually this strict that is what the implementation does i think it is better to return empty than null the real ""state"" is is isunsubscribed (and the properties might as well be write-only) || i think the disposable / subscription contract lakes precision and uniformity it doesnt matter to return null or empty what matters is a constant behavior following the ""least astonishment"" principle ||"
81.0,594,1,0,0,0,0,0,1,0,"implement the start operator hi this pr implemented the `start` operator #81 please take a look [rxjava-pull-requests #528](https://netflixosscicloudbeescom/job/rxjava-pull-requests/528/) successthis pull request looks good || nice! so `observablestart(func0)` might become the new way of creating futures maybe add some tests which illustrate what happens if i subscribe to `observablestart` before/while/after its calculation has terminated and what happens if there are several subscribers (i think its correctly implemented but just to make everything more stable and better documented) || thanks @samuelgruetter i added more tests is it necessary to construct a special test that `subscribe` and `func` run at the same time? i think ""before"" and ""after"" are enough || [rxjava-pull-requests #533](https://netflixosscicloudbeescom/job/rxjava-pull-requests/533/) successthis pull request looks good || [rxjava-pull-requests #537](https://netflixosscicloudbeescom/job/rxjava-pull-requests/537/) successthis pull request looks good ||"
71.0,612,1,0,0,0,0,0,1,0,"replay additional overloads issue #71- added several overloads of the `replay` operator: - limited buffer limited time window buffer+time - scheduler overloads - versions which perform a projection before the replay- added missing `multicast` overload [rxjava-pull-requests #548](https://netflixosscicloudbeescom/job/rxjava-pull-requests/548/) successthis pull request looks good || could you give me an explanation of what the ""selector"" does and why itsuseful and also what the version of replay that uses a subject factory isall about? the javadocs are opaque to me and the msdn docs / intro-to-rxarent helpful eitheron thu dec 12 2013 at 12:53 pm cloudbees pull request builder plugin wrote:> rxjava-pull-requests #548https://netflixosscicloudbeescom/job/rxjava-pull-requests/548/success> this pull request looks good> > —> reply to this email directly or view it on githubhttps://githubcom/netflix/rxjava/pull/612#issuecomment-30460606> ## david m grossplp consulting || im not sure myself i think it allows transforming the subjects output without the danger of resubscribing to the uplink source i couldnt find any tests for them in the rxnet sources ||"
634.0,635,1,0,0,0,0,0,1,0,operators: switchcase (case) ifthen (if) dowhile (dowhile) whiledo (w hile)issue #634no msdn references available [rxjava-pull-requests #565](https://netflixosscicloudbeescom/job/rxjava-pull-requests/565/) successthis pull request looks good ||
653.0,657,1,0,0,0,0,0,1,0,"operations aggregate average and sum with selector issue #653remarks:- i know we can combine ops to get one of the new aggregate variant but i think it might be worth having a direct version which avoids nesting several layers of observables observers and subscriptions- the `averageinteger` and `suminteger` (and the other types) are handy if we want to use chained operation invocations (with less overhead):``` javaobservablefrom(""a"" ""bb"" ""ccc"")suminteger(s -> slength()) toblockingobservable()single()```instead of``` javaobservablesumintegers(observablefrom(""a"" ""bb"" ""ccc"")map(s -> slength())) toblockingobservable()single()``` [rxjava-pull-requests #590](https://netflixosscicloudbeescom/job/rxjava-pull-requests/590/) successthis pull request looks good || this establishes (or strengthens) a precedent of adding a large number of helper methods for very specific cases to the already massive `observable` so id like to explore one of two routes:1) move mathematical operators to a separate `observable` in `rxobservablenumericalobservable` or something like that2) move them into a contrib module like https://githubcom/netflix/rxjava/blob/master/rxjava-contrib/rxjava-string/src/main/java/rx/observables/stringobservablejava || id go for `numericalobservable` on this one as it is primarily useful out-of-box whereas futures may go into contrib ||"
666.0,667,1,0,0,0,0,0,1,0,operators skip skiplast take with time rebased version without the drain scheduler variant- fixes issue mentioned in #666 as well [rxjava-pull-requests #601](https://netflixosscicloudbeescom/job/rxjava-pull-requests/601/) failurelooks like theres a problem with this pull request ||
653.0,733,1,0,0,0,0,0,1,0,buffer with observable boundary mentined in issue #653- 1 overload where the user can specify the capacity of the internal buffer [rxjava-pull-requests #647](https://netflixosscicloudbeescom/job/rxjava-pull-requests/647/) successthis pull request looks good ||
653.0,734,1,0,0,0,0,0,1,0,delay with subscription and item delaying observables listed in #653note: onerror and oncompleted events of the source are immediately propagated and will prevent emitting any pending values [rxjava-pull-requests #648](https://netflixosscicloudbeescom/job/rxjava-pull-requests/648/) successthis pull request looks good || [rxjava-pull-requests #660](https://netflixosscicloudbeescom/job/rxjava-pull-requests/660/) successthis pull request looks good ||
653.0,735,1,0,0,0,0,0,1,0,window with observable boundary listed in issue #653 [rxjava-pull-requests #649](https://netflixosscicloudbeescom/job/rxjava-pull-requests/649/) successthis pull request looks good ||
653.0,736,1,0,0,0,0,0,1,0,mergemap with iterable and resultselector overloads listed in #653 forgot an overload || [rxjava-pull-requests #650](https://netflixosscicloudbeescom/job/rxjava-pull-requests/650/) successthis pull request looks good || [rxjava-pull-requests #651](https://netflixosscicloudbeescom/job/rxjava-pull-requests/651/) successthis pull request looks good || looks these operators can be implemented by composing the existing operators || i agree there is likely some simplification we can do on this but im going to merge as the public apis look correct and unit tests are good we can iterate on the implementation internally ||
653.0,738,1,0,0,0,0,0,1,0,publish and publishlast overloads listed in #653these operators use the existing multicast and subject infrastructure so i omitted any direct tests [rxjava-pull-requests #652](https://netflixosscicloudbeescom/job/rxjava-pull-requests/652/) successthis pull request looks good || [rxjava-pull-requests #653](https://netflixosscicloudbeescom/job/rxjava-pull-requests/653/) successthis pull request looks good ||
653.0,740,1,0,0,0,0,0,1,0,timeout with selector overloads listed in #653 [rxjava-pull-requests #655](https://netflixosscicloudbeescom/job/rxjava-pull-requests/655/) successthis pull request looks good ||
653.0,741,1,0,0,0,0,0,1,0,zip with iterable removed old aggregator version and updated tests listed in #653 [rxjava-pull-requests #656](https://netflixosscicloudbeescom/job/rxjava-pull-requests/656/) successthis pull request looks good || these are instance methods none of our `zip` operators are at the instance level i would have thought wed add the `zip` overloads with `iterable` to match the existing static ones? || i went according to #653 where there was 2 zip overloads without strike-through || agreed on the overloads but they should be static correct? || no the intention was to chain them to an existing observable:``` javaobservablefrom(1 2 3)zip(arraysaslist(4 5 6) (a b) -> a * b)``` || makes sense wasnt sure as it was different than all the other zip methods thanks for confirming ||
799.0,825,1,0,0,0,0,0,1,0,issue #799 - commenting out the call to attachcallingthreadstack when co nstructing a compositeexception should i merge this manually into 017? ||
858.0,860,1,0,0,0,0,0,1,0,fixing the generics for merge and lift ive tracked down to two problems #858 the first is that lift wasnt quite right i changed the lift argument from `operator ` to `operator ` unfortunately java wont let us hide that away in the `operator` class so we have to redeclare that everywhere in the debug hooks but its still better than the alternative of having to use the full `func1 ? super subscriber >` everywherethe second problem was in the return type of merge `observable ` because of operators like `merge(observable t1 observable t2)` the only thing that can be said for the return type is that it is also `observable ` but at the moment it is returning `observable `this pull request changes all of them and leads to some silly return values like```observable a bobservable x merge(a b)``` [rxjava-pull-requests #784](https://netflixosscicloudbeescom/job/rxjava-pull-requests/784/) failurelooks like theres a problem with this pull request || we should avoid return types such as `a ` || [rxjava-pull-requests #787](https://netflixosscicloudbeescom/job/rxjava-pull-requests/787/) failurelooks like theres a problem with this pull request || [rxjava-pull-requests #788](https://netflixosscicloudbeescom/job/rxjava-pull-requests/788/) successthis pull request looks good || @akarnokd you were right the return type change wasnt necessary ive reverted and rebased the branch to clean out all the mistakes || [rxjava-pull-requests #789](https://netflixosscicloudbeescom/job/rxjava-pull-requests/789/) successthis pull request looks good || i almost did a pr on this when i saw you now did the same thing as i but was it necessary to change the debugs as well? || yes there is a plugin hook inside lift that the debug plugin implements and spreads from there ||
939.0,955,1,0,0,1,0,1,1,1,fixed replaysubject leak fix for issue #939 [rxjava-pull-requests #889](https://netflixosscicloudbeescom/job/rxjava-pull-requests/889/) successthis pull request looks good || i can confirm this fixes #939 for me thanks @akarnokd !this might in fact be the final nail in the coffin for any workarounds we used on android to prevent activities from leaking this is great || @benjchristensen do you think we could get this in for 0171 that would be fantastic it would simplify reasoning about requirements for android operators a lot since the use of `cache` and `replay` is quite common on android and some design decisions for `operatorobservefromandroidcomponent` were made purely due to the existence of this bug (no one actually thought to question the correctness of the underlying operator back then hah) ||
961.0,964,1,0,0,1,0,1,1,1,subjectsubscriptionmanager fix fix for #961if an already unsubscribed subscriber is added the subscription function ends up in an infinite loop as the inner unsubscription logic changes the state to another object before the outer state machine continues- the outer state machine loop now exits if unsubscription happened and doesnt attempt to modify the state- the removeobserver method is changed so that if the subscription to be removed is not in the array it returns this instead of an unnecessary copy in addition copyof calls have been replaced by arraycopy to avoid reflective array creation [rxjava-pull-requests #904](https://netflixosscicloudbeescom/job/rxjava-pull-requests/904/) failurelooks like theres a problem with this pull request || interesting bug thanks for the fix!as for the test failure looks like `testnumberofthreadsonscheduledmerge` has become non-deterministic as a result of recent changes (not your commit) ||
951.0,965,0,0,0,0,0,0,1,0,bugfix: chain subscription in timeoutsubscriber and serializedsubscriber this pr chains subscription in timeoutsubscriber and serializedsubscriber found by @rbramw #951 thanks for your unit tests @rbramw [rxjava-pull-requests #905](https://netflixosscicloudbeescom/job/rxjava-pull-requests/905/) failurelooks like theres a problem with this pull request || i have no idea why `rxoperatorsoperationparallelmergetesttestnumberofthreadsonscheduledmerge` failed in my local machine it fails sometimes is it nondeterministic? || rebased || [rxjava-pull-requests #915](https://netflixosscicloudbeescom/job/rxjava-pull-requests/915/) successthis pull request looks good || thank you ||
971.0,972,1,0,0,1,0,0,1,0,fixed deadlock in subjects + operatorcache fix for issue #971- i had to rewrite operatorcache to allow testing for deadlocks in all subject types- the terminationlatch was unnecessarily waiting for existing subscribers to deliver their termination events which caused deadlock with repeat()- treating subjects as internal implementations was not necessary to fix the problem [rxjava-pull-requests #912](https://netflixosscicloudbeescom/job/rxjava-pull-requests/912/) successthis pull request looks good || i dont understand these changes yet but on first review they are very awkward as the `subjectsubscriptionmanager` methods now both invoke a function and return a collection || true the rewritten subjects dont require an action1 they are fine with action0 the changes had to be made since the countdonwlatch logic acted as a synchronization block and emitting events while holding locks is prone to deadlocks as the associated issue demonstrates || ah holding the lock is the issue we should find a way of doing that without the latches at all as it is blocking || the latch has its use because once the state has been swapped to terminal state we still need to perform some tasks on any related state within the particular subject before client notifications can resume: usually it is to set the last event which then will be available to newcomers || i havent merged this yet as i need to spend time better understanding this and the impact on design || since this has conflicts and i did some cleanup based on our discussion above ive opened https://githubcom/netflix/rxjava/pull/1040 for merging this ||
1060.0,1073,1,0,0,0,0,0,1,0,operatorbuffer operator buffer split into 4 variantsissue #1060there are some important behavioral changes compared to the original versions:- when an onerror event appears from anywhere the currently accumulated chunk(s) are _not_ emitted before the error is propagated this conforms with rx design guideline 66- the observable returned by the func0 inside the `buffer(func0 >)` now is used as long as possible and whenever it fires an event a new buffer chunk is started the func0 is called only once per subscriber the original called it and subscribed to it all the time causing all-increasing resubscriptions [rxjava-pull-requests #986](https://netflixosscicloudbeescom/job/rxjava-pull-requests/986/) successthis pull request looks good ||
1060.0,1079,1,0,0,0,0,0,1,0,"operatorcombinelatest operator combinelatestissue #1060remarks:- added an overload to observable which accepts any number of sources not sure why it wasnt exposed before? perhaps removed?- relying on just the sos onnext is not enough as leaving the synchronized block allows reordering of onnext calls therefore the combinator uses the trick from serializedobserver to make sure the combination order is consistent with whe winning of the synchronization ""race"" [rxjava-pull-requests #990](https://netflixosscicloudbeescom/job/rxjava-pull-requests/990/) successthis pull request looks good ||"
1060.0,1083,1,0,0,0,0,0,1,0,operatordematerialize operator dematerializeissue #1060two notes:- since the dematerialize() is an instance method there is no correct type parametrization for the operator therefore i just used a raw version in the call- the original dematerialize could send out two oncompleted or an onerror followed by an oncompleted because the materialize() always adds an oncompleted after the raw events this affected operators due to unsafesubscribe this new version ensures this doesnt happen [rxjava-pull-requests #994](https://netflixosscicloudbeescom/job/rxjava-pull-requests/994/) successthis pull request looks good ||
1060.0,1084,1,0,0,0,0,0,1,0,operatordistinct operator distinctissue #1060i didnt port the variant with the custom key comparator because it has been decided to rely on `objectequals` and there were not exposed anyway [rxjava-pull-requests #995](https://netflixosscicloudbeescom/job/rxjava-pull-requests/995/) successthis pull request looks good ||
1060.0,1085,1,0,0,0,0,0,1,0,operatordistinctuntilchanged operator distinctuntilchangedissue #1060again i havent ported the custom comparator version [rxjava-pull-requests #996](https://netflixosscicloudbeescom/job/rxjava-pull-requests/996/) failurelooks like theres a problem with this pull request ||
1060.0,1095,1,0,0,0,0,0,1,0,"operatorgroupbyuntil operator groupbyuntilfor issue #1060while rewriting ive noticed a common pitfall with the observation of the duration: many other operators react to onnext or oncompleted but one should only ""expire"" once ill review my recent operators and post a separate pr if any [rxjava-pull-requests #1005](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1005/) failurelooks like theres a problem with this pull request ||"
1060.0,1096,1,0,0,0,0,0,1,0,operatorgroupjoin operator groupjoinfor issue #1060maybe this could be moved to the new joins [rxjava-pull-requests #1006](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1006/) failurelooks like theres a problem with this pull request || is this better associated with rxjava-joins? ||
1060.0,1103,1,0,0,0,0,0,1,0,operatorjoin operator joinissue #1060remark: now that the clientonnext is called outside the synchronization block joint results may appear in arbitrary order in case both left and right observables emit values concurrently i suppose the strict ordering is not really expected here but someone who uses this operator can tell (@duncani perhaps?) [rxjava-pull-requests #1014](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1014/) failurelooks like theres a problem with this pull request || rxoperatorsoperatorpivottesttestconcurrencyandserialization needs some fixing || > rxoperatorsoperatorpivottesttestconcurrencyandserialization needs some fixing yes it does ||
1060.0,1120,1,0,0,0,0,0,1,0,operatorsequenceequal operator sequenceequal#1060lightened the operator but note that notificationlite escaping an operator may cause undesired effects in other operators relying on notificationlite as well [rxjava-pull-requests #1032](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1032/) successthis pull request looks good ||
1060.0,1121,1,0,0,0,0,0,1,0,operatorskiptimed operator skiptimed#1060there was an unexpected dependency in `operationtaketimedtest` and is surely to cause conflict when `taketimed` is rewritten once all operators have been merged i suggest we create a primary `testexception` and rewrite tests to use it instead of all those custom exception classes everywhere [rxjava-pull-requests #1033](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1033/) failurelooks like theres a problem with this pull request ||
1060.0,1132,1,0,0,0,0,0,1,0,manual merge of several prs merging many prs that were conflictingheroic work by @akarnokd and @zsxwing on #1060 all unit tests are passing on my machine going to let this bake a while before a release other prs on still on their way
1152.0,1160,1,0,0,0,0,0,1,0,add `replay` and `multicast` variants to rxscala this pr has some breaking changes:- change `def multicast[r >: t](subject: rxlangscalasubject[r]): (() > subscription observable[r])` to `def multicast[r >: t](subject: rxlangscalasubject[r]): connectableobservable[r]`- change `def replay: (() > subscription observable[t])` to `def replay: connectableobservable[t]`- remove `observableapply(int)`so its better to merge it at the next major release#1152 #1153/cc @headinthebox @samuelgruetter [rxjava-pull-requests #1072](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1072/) successthis pull request looks good || id like someone with better scala skills that me to review this please || ill code review it later today but in principle these are simple fixes to bring the other variants of publish in sync with returning connectable observable || [rxjava-pull-requests #1081](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1081/) successthis pull request looks good || [rxjava-pull-requests #1087](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1087/) successthis pull request looks good || is this reviewed and ready to go? it is conflicting against master so can you please rebase? || this is also conflicting against #1178 i would like to rebase it after #1178 is merged to master || waiting until #1210 is merged || already merged || [rxjava-pull-requests #1129](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1129/) successthis pull request looks good || should this wait until were ready to do 019? || i think this one can be merged since #1188 has already broken the api @headinthebox @samuelgruetter do you mind it? || go for it ||
1153.0,1160,1,0,0,0,0,0,1,0,add `replay` and `multicast` variants to rxscala this pr has some breaking changes:- change `def multicast[r >: t](subject: rxlangscalasubject[r]): (() > subscription observable[r])` to `def multicast[r >: t](subject: rxlangscalasubject[r]): connectableobservable[r]`- change `def replay: (() > subscription observable[t])` to `def replay: connectableobservable[t]`- remove `observableapply(int)`so its better to merge it at the next major release#1152 #1153/cc @headinthebox @samuelgruetter [rxjava-pull-requests #1072](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1072/) successthis pull request looks good || id like someone with better scala skills that me to review this please || ill code review it later today but in principle these are simple fixes to bring the other variants of publish in sync with returning connectable observable || [rxjava-pull-requests #1081](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1081/) successthis pull request looks good || [rxjava-pull-requests #1087](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1087/) successthis pull request looks good || is this reviewed and ready to go? it is conflicting against master so can you please rebase? || this is also conflicting against #1178 i would like to rebase it after #1178 is merged to master || waiting until #1210 is merged || already merged || [rxjava-pull-requests #1129](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1129/) successthis pull request looks good || should this wait until were ready to do 019? || i think this one can be merged since #1188 has already broken the api @headinthebox @samuelgruetter do you mind it? || go for it ||
1181.0,1185,1,0,0,1,0,0,1,0,behavior subject time gap fix 2 based on discussions in #1181 ive unified the behavior among the subjectsbehaviorsubject doesnt seem to exhibit issue #658 and #1184a second pair of eyes would be great to confirm the correctness and check if the removal of the countdownlatch was the correct approach [rxjava-pull-requests #1095](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1095/) failurelooks like theres a problem with this pull request || wow this is quite the change :-) i need fresher eyes on this one so will come back to it thank you very much for tackling this! || this is non-trivial code so i may have missed something but this looks like excellent forward progress on what we had to add the functionality needed for `behaviorsubject` and sharing the logic across all of the `subject` implsvery nice work ||
1184.0,1185,1,0,0,1,0,0,1,0,behavior subject time gap fix 2 based on discussions in #1181 ive unified the behavior among the subjectsbehaviorsubject doesnt seem to exhibit issue #658 and #1184a second pair of eyes would be great to confirm the correctness and check if the removal of the countdownlatch was the correct approach [rxjava-pull-requests #1095](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1095/) failurelooks like theres a problem with this pull request || wow this is quite the change :-) i need fresher eyes on this one so will come back to it thank you very much for tackling this! || this is non-trivial code so i may have missed something but this looks like excellent forward progress on what we had to add the functionality needed for `behaviorsubject` and sharing the logic across all of the `subject` implsvery nice work ||
658.0,1185,1,0,0,1,0,0,1,0,behavior subject time gap fix 2 based on discussions in #1181 ive unified the behavior among the subjectsbehaviorsubject doesnt seem to exhibit issue #658 and #1184a second pair of eyes would be great to confirm the correctness and check if the removal of the countdownlatch was the correct approach [rxjava-pull-requests #1095](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1095/) failurelooks like theres a problem with this pull request || wow this is quite the change :-) i need fresher eyes on this one so will come back to it thank you very much for tackling this! || this is non-trivial code so i may have missed something but this looks like excellent forward progress on what we had to add the functionality needed for `behaviorsubject` and sharing the logic across all of the `subject` implsvery nice work ||
1193.0,1195,1,0,0,0,0,0,1,0,"swingscheduler: allow negative schedule fix for issue #1193 the new `scheduleperiodic` may calculate negative delay times if the next task was already due this change will allow negative timing on the swing scheduler indicating an immediate schedule [rxjava-pull-requests #1106](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1106/) failurelooks like theres a problem with this pull request || i suggest adding some comments in the `schedulerschedule` and `schedulescheduleperiodically` about negative timing eg ""negative delay time should be regarded as 0"" it would be helpful for anyone who wants to implement special `scheduler` || ive added extra comments || [rxjava-pull-requests #1109](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1109/) failurelooks like theres a problem with this pull request ||"
1204.0,1236,1,0,0,0,0,0,1,0,compositesubscription with atomic field updater this pr is aimed at #1204 to reduce unnecessary memory overhead in frequently used classes this change in `compositesubscription` saves about 24 bytes per instancein addition the field updaters may be faster by about 8-15% for small adds and removals ive changed the implementation of unsubscribe to use getandset which leverages platform intrinsics and is usually compiled to a single instruction: this makes unsubscribing a tiny bit faster and thus reducing latency in benchmarks that only pass on single element around [rxjava-pull-requests #1137](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1137/) successthis pull request looks good ||
1204.0,1237,0,0,0,0,0,0,1,0,safesubscriber memory reduction for #1204 this saves 24 bytes per instance [rxjava-pull-requests #1138](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1138/) successthis pull request looks good || thanks i think we probably should do this all over i havent merged my change to `compositesubscription` yet so that needs to be done as well || oh you already have a pr for `compositesubscription` as well :-) || @akarnokd @benjchristensen why was there a change from boolean to int? || there is no atomicbooleanfieldupdater and the nearest thing is an atomicintegerfieldupdater since classes are padded to 4-8 byte boundaries anyway moving from 1 byte boolean to 4 byte integer is no extra overhead || oh i just checked you are right that explains a lot but i have no clue why they didnt add that ||
126.0,1269,1,0,0,0,0,0,1,0,fix the bug that int overflow can bypass the range check fix the bug mentioned in #1266 [rxjava-pull-requests #1164](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1164/) failurelooks like theres a problem with this pull request || [rxjava-pull-requests #1165](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1165/) failurelooks like theres a problem with this pull request || [rxjava-pull-requests #1166](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1166/) successthis pull request looks good ||
1214.0,1271,1,0,0,0,0,0,1,0,operator retry with predicate operator retry with predicate + 1 overload for issue #1214the func1 version is simply named `retry` the func2 version is named `retryif` due to lack of ideas and because to avoid overload resolution issues i also had to open up the operatorretrytest classes a bit [rxjava-pull-requests #1169](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1169/) successthis pull request looks good || thanks for implementing this should we just keep one of those two instead of both so we dont have to deal with the naming/overload issue? || i dont know which one to keep? || probably the one that includes attempts? this is the advanced use case for retry so it should probably provide both attempts and error it just feels awkward to need to come up with a new name just so we can have one with `attempts` and one without@headinthebox do you have an opinion on this? || agree with @benjchristensen if you are using this one you (should) know what you are doing || [rxjava-pull-requests #1176](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1176/) successthis pull request looks good || thanks @akarnokd and @headinthebox for the review ||
1206.0,1272,1,0,0,1,0,1,1,0,executorscheduler to wrap an executor for issue #1219 (and #1206)this implementation should conform with the scheduler contract except it is not possible to avoid thread-hopping (dont worry the tasks execute serially but maybe not on the same physical thread)few open improvement possibilities:- usage of `mpsclinkedqueue` once available- a better performing subscription container for this kind of queue-drain task tracking instead of `compositesubscription`- ability to remove a `subscription` from a `compositesubscription` without it calling unsubscribe on the removed subscription á la `multipleassignmentsubscriptionset()` [rxjava-pull-requests #1170](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1170/) successthis pull request looks good || thanks @akarnokd for this looks good for a first cut the trade-offs (thread hopping) are expected and why we wont use this as a default for anything and agreed on possible improvements but those can come later ||
1219.0,1272,1,0,0,1,0,1,1,0,executorscheduler to wrap an executor for issue #1219 (and #1206)this implementation should conform with the scheduler contract except it is not possible to avoid thread-hopping (dont worry the tasks execute serially but maybe not on the same physical thread)few open improvement possibilities:- usage of `mpsclinkedqueue` once available- a better performing subscription container for this kind of queue-drain task tracking instead of `compositesubscription`- ability to remove a `subscription` from a `compositesubscription` without it calling unsubscribe on the removed subscription á la `multipleassignmentsubscriptionset()` [rxjava-pull-requests #1170](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1170/) successthis pull request looks good || thanks @akarnokd for this looks good for a first cut the trade-offs (thread hopping) are expected and why we wont use this as a default for anything and agreed on possible improvements but those can come later ||
1270.0,1286,1,0,0,0,0,0,1,0,rename some operator* classes to onsubscribe* as per #1270 see discussion in issue #1270 numerous classes in the `rxoperator` package are not implementations of `operator` but are actually implementations of `onsubscribe` the classes have been renamed in this pull requestexcuse me not squashing commits looked complicated after doing a pull from upstream in the middle [rxjava-pull-requests #1187](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1187/) successthis pull request looks good ||
1204.0,1287,1,0,0,0,0,0,1,0,replaysubject remove replaystate chm and related subjectobserver changes for issue #1204this change should help avoid chm garbage (although boxed integers will still fly around) in addition i moved the notificationlite around to make room for the index ive also removed the callback onadd in publishsubject because it was unnecessary [rxjava-pull-requests #1188](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1188/) successthis pull request looks good || awesome ill try this against the tests i was doing || this looks like it does improve performance and object allocation when using my hystrix tests i get this:new```run: 10 - 208720 ops/sec run: 11 - 209834 ops/sec run: 12 - 209217 ops/sec run: 13 - 208026 ops/sec run: 14 - 211303 ops/sec ```old```run: 10 - 153523 ops/sec run: 11 - 162289 ops/sec run: 12 - 162347 ops/sec run: 13 - 159153 ops/sec run: 14 - 160194 ops/sec ```new```run: 10 - 572909 ops/sec run: 11 - 568987 ops/sec run: 12 - 572521 ops/sec run: 13 - 571594 ops/sec run: 14 - 572979 ops/sec ```old```run: 10 - 487791 ops/sec run: 11 - 491292 ops/sec run: 12 - 480598 ops/sec run: 13 - 484517 ops/sec run: 14 - 489212 ops/sec ```old:![old](https://cloudgithubusercontentcom/assets/813492/3133353/f35b4b52-e818-11e3-9b56-1f0435bddb70png)new:![new](https://cloudgithubusercontentcom/assets/813492/3133355/f7332434-e818-11e3-9f6a-28c0594833c5png)now i need to go give hystrix some love too as there are some obvious things to go solve therethanks @akarnokd for getting to this so quickly ||
1344.0,1347,1,0,0,0,0,1,1,1,allow use of the returned subscription to cancel periodic scheduling the documentation for scheduleperiodically indicates that the returnedsubscription can be used to unsubscribe from the periodic action or tounschedule it if it has not been scheduled yet that was the case onlybefore the first action took place and it was then impossible tounsubscribe using the given subscription although unsubscribing theworker did workthis fixes #1344 [rxjava-pull-requests #1257](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1257/) successthis pull request looks good || this new version contains a fixed fix by @akarnokd || [rxjava-pull-requests #1258](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1258/) successthis pull request looks good || thank you ||
1365.0,1367,0,0,0,0,0,0,1,0,"fix the bug that flatmap swallows onerrornotimplementedexception fixed #1365not sure if any other place will swallow `onerrornotimplementedexception` or the fatal errors [rxjava-pull-requests #1292](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1292/) successthis pull request looks good || [rxjava-pull-requests #1293](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1293/) successthis pull request looks good || hi allim new here so i may be missing something but im afraid that this issue should not be closed just yetindeed it looks like there is still a problem if there is more than one flatmap in the chainhere is a unit test to reproduce the bug (i used the previous unit test that was added as part of this bugfix and simply added an additional flatmap stage) :``` @test(expected onerrornotimplementedexceptionclass) public void testsubscribewithoutonerror() { observablejust(""a"" ""b"") flatmap(s -> observablejust(s + ""1"" s + ""2"")) flatmap(s -> observableerror(new exception(""test""))) foreach(systemout::println) }```the output i get is nothing and no error eithershould i submit a new issue or can you reopen this one?thanks! || think the issue still exists there needs to be clear functionality by which exception can be cleanly trapped and rethrown if needed(user preference) to upper layersthanks ||"
130.0,1393,1,0,0,0,0,0,1,0,add cache(int capacity) to observable proposed patch for #1303 [rxjava-pull-requests #1335](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1335/) successthis pull request looks good ||
1420.0,1422,1,0,1,0,0,0,1,0,concurrency fixes for rxringbuffer & merge possible fix for #1420i was unable to exactly reproduce the issue but was able to create a possibly related one this fixes itit also simplifies the logic and code somewhat at a possible small performance cost for these:```rooperatormergeperfmerge1syncstreamofn 1000 thrpt 5 59407716 2073945 ops/srooperatormergeperfmerge1syncstreamofn 1000000 thrpt 5 66557 2693 ops/srooperatormergeperfmergensyncstreamsofn 1000 thrpt 5 59293 5046 ops/s```
1405.0,1431,1,0,0,0,0,1,1,0,"compositeexception fix for android fixes #1405- revert changes from f4ae92aa- remove duplicated causes in stack trace chain [rxjava-pull-requests #1385](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1385/) failurelooks like theres a problem with this pull request || this will take a while to review as those changes were done for good reason || maybe i should provide some explanation about what was wrong with the previous implementationheres how most of java programmers will rethrow an exception if not handled:``` observablecreate((subscriber subscriber) -> subscriberonerror(new runtimeexception(""ex1""))) observeon(androidschedulersmainthread()) subscribeon(schedulersio())subscribe( object -> { // } error -> { // handle some exceptions // rethrow unhandled throw new runtimeexception(""ex2"" error) } )```now we have `compositeexception` with two nested exceptions:- `ex1`- `ex2` which cause is `ex1`the previous implementation will create a loop in this situation:```onerrorfailedexception compositeexception ex1 ex2 ex1 ex2 ``` ive provided test for this scenario and additional method to remove throwables which are causes of another throwable it means `ex1` will not be attached as a cause of the `compositeexception` because it is a cause of `ex2` so it will be automatically attached with `ex2` and printed in the stack trace output ```onerrorfailedexception compositeexception ex2 ex1``` || /cc @mattrjacobs matt can you get involved here (now that youre back) since you have the most recent history and context in this code discussion at https://githubcom/netflix/rxjava/issues/1405 || given the new constraint that android does something unexpected (to me anyway) with the set of printstacktrace methods its probably preferable to modify the structure of compositeexception so that any arbitrary output of a compositeexception is correct relying on the implementation details of precisely how android does the printstacktrace doesnt protect us from any other edge cases so i generally think the sort of change proposed by @tomrozb is good - im validating what the output looks like in our prod env now thanks @tomrozb for the pr || im merging this now thanks for the clear explanation and fix with a test @tomrozb || thanks @mattrjacobs and @tomrozb ||"
1514.0,1559,1,0,0,1,0,0,1,0,more consistent hooks for scheduler plugins this is a rework of #1514 - deprecated rxjavadefaultschedulers and rxjavadefaultschedulersdefault (i think these names are confusing)- added rxjavaschedulershook- ability to override entire schedulers from scratch- ability to decorate action0 before submission to schedulerthe main change from #1514 is the decoration of action0 instead of runnable action0 is an improvement as all schedulers must handle these whereas not all schedulers handle runnables [rxjava-pull-requests #1473](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1473/) successthis pull request looks good || reviewed with @benjchristensen and merging ||
158.0,1602,1,0,0,0,0,0,1,0,make retrywhen the same with the scheduler as the retrywhen without the scheduler came up in #1580 [rxjava-pull-requests #1510](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1510/) successthis pull request looks good || [rxjava-pull-requests #1511](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1511/) successthis pull request looks good ||
1642.0,1705,0,0,0,0,0,1,1,0,issue #1642 fix null-emitting combinelatest @benjchristensen lgtm || thanks for fixing this stupid bug on my partit should have been:``` javabuffergetvalue(o)// orbufferaccept(o child)```your fix does the same thing || @benjchristensen just saw that this didnt make it into 0205 do i need to do something to make sure it gets into 0206? cant tell how you guys are managing the various release branches || this was merged into 1x and is in the 10 releases (it was in 100-rc4 https://githubcom/reactivex/rxjava/releases/tag/v100-rc4)if you want it also in the 020x releases go ahead and submit another pr against that branch1x is where most of the focus is as we work towards the 10 final release scheduled for november 18th || ah i tried switching us over to 100-rc4 but one of our dependencies uses the comnetflix packaging and android wont let us include both in our apk (dex complains about duplicate classes) https://githubcom/reactivex/rxjava/pull/1761 || > one of our dependencies uses the comnetflix packagingyes its going to be a painful one-time migration to get onto 10 once we hit 10 final ill encourage everyone to do so ||
1571.0,1742,1,0,0,0,0,1,1,1,emptyobserver and testobserver - remove `emptyobserver` as it was confusing compared to `observersempty()` (fixes #1741)- make `testobserver` not throw `onerrornotimplemented` if a delegate is not provided (fixes #1571)
1741.0,1742,1,0,0,0,0,1,1,1,emptyobserver and testobserver - remove `emptyobserver` as it was confusing compared to `observersempty()` (fixes #1741)- make `testobserver` not throw `onerrornotimplemented` if a delegate is not provided (fixes #1571)
1642.0,1761,0,0,0,0,0,1,1,0,issue #1642 fix null-emitting combinelatest same as https://githubcom/reactivex/rxjava/pull/1705 but for the 020\* folks
1682.0,1767,1,0,0,1,0,1,1,0,executorscheduler delivers uncaught exceptions instead of swallowing unhandled errors executorscheduler delivers themto the executing threads uncaughtexceptionhandlerthis addresses the same issue as reactivex/rxjava#1682 but forexecutorscheduler which does not used scheduledaction
1502.0,1777,1,0,0,1,0,1,1,0,excluding things from the javadoc for one of the sub issues in #1502exclude rxinternalexclude rxjavaerrorhandlerdefault by deleting it
1732.0,1784,1,0,0,0,0,0,1,0,publish with backpressure implementation of `publish` with backpressure: https://githubcom/reactivex/rxjava/issues/1732this moves away from using the `multicast` operator and `publishsubject` as per discussion in #1732 and #1779
1772.0,1802,1,0,0,1,0,1,1,1,add hasobservers method to subjects (#1772) as per https://githubcom/reactivex/rxjava/issues/1772serializedsubject now keeps track of the actual subjectbufferuntilsubscriber synchronizes on the state guard looks good thanks @simonbasle ||
1865.0,1866,1,0,0,1,0,0,1,0,"fix memory leak in bounded replaysubject due to retaining the node index indefinitely once the subscriber caught upfor issue #1865 this test failed both times:```rxinternaloperatorsoperatormergedelayerrortest > testerrorinparentobservabledelayed failed orgmockitoexceptionsverificationtoolittleactualinvocations: stringobserveronnext(""hello"") wanted 2 times: -> at rxinternaloperatorsoperatormergedelayerrortesttesterrorinparentobservabledelayed(operatormergedelayerrortestjava:516) but was 1 time: -> at rxobserverstestobserveronnext(testobserverjava:78) at rxinternaloperatorsoperatormergedelayerrortesttesterrorinparentobservabledelayed(operatormergedelayerrortestjava:516)```no idea why or if its related but id like to understand before merging this || i dont think mergedelayerror uses replaysubject i dont fully understand the operatormerge but it contains a lot of mutable variables and synchronized blocks and im not sure but i found some anomalies in:https://githubcom/reactivex/rxjava/blob/1x/src/main/java/rx/internal/operators/operatormergejava#l505it synchronizes on the mergeproducers this but reads the mergesubscribers `wip` field which generally is accessed through the mergesubscribers this same seems to be true for the `scalarvaluequeue` || ive tested things locally and its working for me || i opened an issue to track the issue you brought up regarding `merge`: https://githubcom/reactivex/rxjava/issues/1885 ||"
1881.0,1884,1,0,0,0,0,0,1,0,fix scan/reduce/collect factory ambiguity this puts the seed factory on `collect` and removes it from `scan` and `reduce` due to ambiguitysee https://githubcom/reactivex/rxjava/pull/1883 and https://githubcom/reactivex/rxjava/issues/1881the `collect` api was already very close so this fixes it to use a seed factory so the signature is now:``` javapublic final observable collect(func0 statefactory final action2 collector) {```i remove the factory overloads for `scan` and `reduce` due to the issue in #1881 related to generics type erasure and lambdas causing ambiguity and compilation failureswe may want to add at least a `scan` impl in the future with a seed factory but it will need a different name if we do such as `scanto` i dont want to do that now for 10 so well need to revisit that for 11 with more time to think about it this code is now possible:``` java observablerange(0 10)collect(() -> new arraylist () (list i) -> { listadd(i) })foreach(systemout::println)```this will no longer compile:``` java observablerange(0 10)scan(() -> new arraylist () (list i) -> { listadd(i) return list })foreach(systemout::println) ``` ||
1919.0,1922,1,0,0,0,0,0,1,0,"set removeoncancelpolicy on the threadpool if supported this should solve the task retention problem of unused timeout tasks mentioned in #1919i know java 7+ scheduledthreadpoolexecutor has the `setremoveoncancelpolicy` and i remember seeing it in android although i cant tell from which api versionin java 6 this cant be solved without rewriting the entire scheduler or using a backported executor @akarnokd cool thanks for whipping this up so quickly since rxjava supports java 6 we need to fix that too right? || i looked at the packages of jsr166_ but couldnt find one that ports this flag back to java 6 || @benjchristensen are there plans to ""fix"" this for java 6 too? since we technically support it or do we mark it as a limitation and people that are hit by this need to go to java 7? im asking because we have lots of users on java 6 and some of the requests have 75s timeouts || im open to a fix that works for java 6 if someone can suggest what to do and/or submit a pr i personally dont have the time to tackle this anytime soon but would accept the change if it solves the problem without breaking anything else (including performance) for java 7/8 || @benjchristensen okay thanks for the info ill tackle it if customers start to ""complain"" for now i also think its not as high priority - since technically jdk 6 is eol anyway :) || yes :-) the strongest reason actually that rxjava supports java 6 rather than 7 as the minimum is for android support if it becomes an issue for your customers and you want to tackle this ill happily review discuss and merge || youd need to backport the java 7 scheduledthreadpoolexecutor and a bunch of helper classes i looked for a backport on doug leas site but no luck || how about calling `scheduledthreadpoolexecutorremove(runnable task)` in `unsubscribe` for java 6? although its a o(n) action while its o(log n) in java 7+ its better than oom || that doesnt work on `submit()` tasks because they are wrapped maybe a better option is to have `purge()` be called periodically || > that doesnt work on submit() tasks because they are wrappedthe returned `scheduledfuture` is exactly the object in the workqueue ||"
1972.0,1973,1,0,0,0,0,1,1,0,fixed test issuing non-serialized messages to the subject should resolve the test failure of #1972 when the main part of the test succeded an oncompleted was sent out from the main thread which was not serialized in respect to the onnext(1) issued from the worker thread therefore two replay was attempted sometimes at first the caughtup was seen false the replay was entered but the next instruction cleared the index causing the illegalstateexception failed in https://travis-ciorg/reactivex/rxjava/builds/44421756```rxsubjectsreplaysubjectboundedconcurrencytest > testreplaysubjectemissionsubscriptionrace failed javalangnullpointerexception at rxsubjectsreplaysubject$boundedstatereplayobserverfromindex(replaysubjectjava:628) at rxsubjectsreplaysubject$boundedstatereplayobserver(replaysubjectjava:619) at rxsubjectsreplaysubjectcaughtup(replaysubjectjava:430) at rxsubjectsreplaysubjectoncompleted(replaysubjectjava:410) at rxsubjectsreplaysubjectboundedconcurrencytesttestreplaysubjectemissionsubscriptionrace(replaysubjectboundedconcurrencytestjava:399)``` || thanks! forgot about the other test class ||
1919.0,2465,1,0,0,0,0,1,1,0,scheduledexecutorservice: call purge periodically on jdk 6 to avoid cancelled task-retentionfirst debated in #1922 see also #1919we may want to discuss the naming of system parameters i chose these so rxjava 20 specific properties may be trivially separated:`ioreactivexrxjavaschedulerjdk6purge-frequency-millis`specifies the purge frequency in milliseconds default is 1000`ioreactivexrxjavaschedulerjdk6purge-force`forces the use of the purge (if set to true) even if the setremoveoncancelpolicy is supported the benefit is that removing cancelled tasks now runs on a different thread so the main pool thread doesnt waste time on them the drawback is the retention window can be still to largedo we have a wiki page where such parameters are listed? i did run the unit test by forcing a jdk 6 runtime and seems to work merging to allow progress on schedulers ||
1897.0,2470,1,0,0,1,0,0,1,0,subject state information methods & bounded replaysubject termination fixthis pr aims to support the requests in #2331 and #1897 by adding methods to the (final) subject classes that let developers access in-flight state in a snapshot fashion this may be considered safe api change because all subject classes were final already so adding extra methods wont break anyones code (and we will be careful with our observable in the future)- `notificationlite` is now extended with two missing value checks: isnull and isnext- each subject has `hascompleted` `hasthrowable` and `getthrowable` methods however i cant add them to `subject` because that would be an incompatible api change- where applicable `getvalue` and `getthrowable` return `null` instead of throwing exceptions so users are encouraged to call hasxxx methods beforehand- there was a chaining bug in the bounded replaysubject: because the terminal value was added after a potential pruning the node links could get broken and concurrent replays might not have seen the terminal value- since `replaysubject` can have multiple values ive added `size()` `hasanyvalue()` (isempty is taken) and `getvalues()` methods to make a snapshot of the current buffer contents whether or not the `replaysubject` has terminated (the usual tolist() would wait until the subject has terminated) - the unrelated `operatormergetesttestconcurrency` hangs for me for some reason without activity (either a buffer bug or a merge bug is in play there) ive added a timeout so it doesnt stop the other tests im merging this: changes are either internal or annotated with experimental on final classes ||
2331.0,2470,1,0,0,1,0,0,1,0,subject state information methods & bounded replaysubject termination fixthis pr aims to support the requests in #2331 and #1897 by adding methods to the (final) subject classes that let developers access in-flight state in a snapshot fashion this may be considered safe api change because all subject classes were final already so adding extra methods wont break anyones code (and we will be careful with our observable in the future)- `notificationlite` is now extended with two missing value checks: isnull and isnext- each subject has `hascompleted` `hasthrowable` and `getthrowable` methods however i cant add them to `subject` because that would be an incompatible api change- where applicable `getvalue` and `getthrowable` return `null` instead of throwing exceptions so users are encouraged to call hasxxx methods beforehand- there was a chaining bug in the bounded replaysubject: because the terminal value was added after a potential pruning the node links could get broken and concurrent replays might not have seen the terminal value- since `replaysubject` can have multiple values ive added `size()` `hasanyvalue()` (isempty is taken) and `getvalues()` methods to make a snapshot of the current buffer contents whether or not the `replaysubject` has terminated (the usual tolist() would wait until the subject has terminated) - the unrelated `operatormergetesttestconcurrency` hangs for me for some reason without activity (either a buffer bug or a merge bug is in play there) ive added a timeout so it doesnt stop the other tests im merging this: changes are either internal or annotated with experimental on final classes ||
1702.0,2471,1,0,0,0,0,0,1,0,fixes npes reported in reactivex#1702 by synchronizing queue also adds a unit test for regressionit appears there is a potential race condition if something adds to/removes from the pq while its _inside_ the poll operation which is where the exceptions in #1702 seem to have actually come from therefore the initial null check didnt really address the original problem the test here seems to reliably recreate those conditionsi considered using a priorityblockingqueue instead of synchronized but since the isempty and poll calls should not allow something to interleave between them and access the queue a synchronized block seemed wiser here almost good two things:- since we only use offer/poll you can use the unbounded priorityblockingqueue now- could you move `counter` and `counter_updater` into the `innercurrentthreadscheduler` class both non-static fields? || we are using atomicfieldupdaters to save on the instance cost of `atomicinteger`s could you change the counter to use `atomiclongfieldupdater`? || done on a related but side-note do you know if these field updaters are proguard-safe for obfuscation? they reflect on field name for sure it might be worth looking into the fix would probably be implementing the abstract setters and getters which would obviously be a bit more boilerplate and kinda less fun but might be worth it if it reduces custom proguard rules required to use rx || thanks for the changes looks good to me i dont know about proguard || looks like per the proguard manual it does indeed recognize fieldupdater declarations so this should be fine || wow i did not expect that how uncharacteristically useful of them! good to know for the future || http://proguardsourceforgenet/manual/introductionhtmlsee the reflection section (no anchor link) that lists the basic reflection methods it automatically detects ||
1649.0,2493,1,0,0,0,0,0,1,0,"operator takeuntil with predicate take values and check the condition after the value is emittedfor enhancement request #1649 thanks for adding this! not convinced on the name though the do prefix is used to represent side-effects everywhere else i think the prefix should still be `take`-something || the question then remains should it stop if predicate turns into false or should it stop if predicate turns into true? because classically `do { } while (true)` and `repeat until false` (pascal) || i like it how its currently implemented do until trueit fits the ""takeuntil"" term ""take until a value predicate""``` java systemoutprintln(""------------------------"") observablejust(1 2 3 4 5 6 7) dooneach(systemout::println) takeuntil(i -> i 3) foreach(systemout::println) systemoutprintln(""------------------------"") observablejust(1 2 3 4 5 6 7) dooneach(systemout::println) takewhile(i -> i < 3) foreach(systemout::println)```that code shows the difference with `takewhile` and it works well we emit 1 2 3 and then stop```------------------------[rxnotification@891cd479 onnext 1]1[rxnotification@891cd47a onnext 2]2[rxnotification@891cd47b onnext 3]3------------------------[rxnotification@891cd479 onnext 1]1[rxnotification@891cd47a onnext 2]2[rxnotification@891cd47b onnext 3]3[rxnotification@891cd47c onnext 4]``` ||"
1956.0,2548,1,0,1,0,0,1,1,1,subscriberrequest should throw exception if negative request made as per discussion in #1956 and #2545 making a call to `subscriberrequest(n)` with negative n should throw an `illegalargumentexception`includes unit test i think the iae should be mentioned in requests javadoc || javadoc added || great! ||
2545.0,2548,1,0,1,0,0,1,1,1,subscriberrequest should throw exception if negative request made as per discussion in #1956 and #2545 making a call to `subscriberrequest(n)` with negative n should throw an `illegalargumentexception`includes unit test i think the iae should be mentioned in requests javadoc || javadoc added || great! ||
2544.0,2550,1,0,1,0,0,1,1,1,subscriberonstart requests should be additive (and check for overflow) as per discussion in #2544 looks good thanks || that looks helpful thanks @davidmoten ||
2333.0,2553,1,0,0,0,0,0,1,0,rxringbuffer with synchronization changed rxringbuffer to use synchronized blocks for correctness we are relying here upon biased locking and lock-elision it gets pretty close to the baselinebenchmark:```benchmark (size) 1x | pr#2333 | this 1syncstreamofn 1 3779678748 | 3767936028 | 37751571951syncstreamofn 1000 21250675 | 18530542 | 207599001syncstreamofn 1000000 20406 | 17712 | 19768nasyncstreamsofn 1 115390116 | 115629480 | 113859532nasyncstreamsofn 1000 2579 | 2546 | 2435nsyncstreamsof1 1 3543551254 | 3602242709 | 3539162675nsyncstreamsof1 100 299166910 | 301703721 | 302642458nsyncstreamsof1 1000 28404751 | 28420833 | 28030881nsyncstreamsofn 1 4054571577 | 4003156953 | 4061124105nsyncstreamsofn 1000 24324 | 20601 | 23137twoasyncstreamsofn 1 85846727 | 85682983 | 86691331twoasyncstreamsofn 1000 1823137 | 1889458 | 1761977reamofnthatmergesin1 1 3724179351 | 3725068220 | 3715637985reamofnthatmergesin1 1000 19051928 | 19392595 | 19487059reamofnthatmergesin1 1000000 18265 | 18069 | 18102```changes (in respect of 1x):- using spscarrayqueue removed look-ahead and null check- using peek to check for emptyness in certain positions- using short-as-possible synchronization blocks here is my perf comparison building on what i did at https://githubcom/reactivex/rxjava/pull/2333#issuecomment-71096757:```1x 1x branch as of jan 22ndpr2333 pr #2333 after rebasing onto 1x (jan 22nd)pr2189 pr #2189 after rebasing onto 1x (jan 22nd)pr2553 pr #2553 on 1x as of jan 28benchmark (size) mode samples 1x pr2189 pr2333 pr2553rooperatormergeperfmerge1syncstreamofn 1 thrpt 5 4879535663 4773501735 4807008476 4701375614rooperatormergeperfmerge1syncstreamofn 1000 thrpt 5 43295567 37341214 34950819 41735196rooperatormergeperfmerge1syncstreamofn 1000000 thrpt 5 41255 40202 32236 36977rooperatormergeperfmergenasyncstreamsofn 1 thrpt 5 99885768 101321745 97689264 100134213rooperatormergeperfmergenasyncstreamsofn 1000 thrpt 5 4846 4715 4973 4552rooperatormergeperfmergensyncstreamsof1 1 thrpt 5 4684222432 4747380010 4751592996 4704340700rooperatormergeperfmergensyncstreamsof1 100 thrpt 5 456736726 468609567 467310110 451615231rooperatormergeperfmergensyncstreamsof1 1000 thrpt 5 40504652 41472463 41146594 41767150rooperatormergeperfmergensyncstreamsofn 1 thrpt 5 4993477475 5268523818 5414652857 5166606822rooperatormergeperfmergensyncstreamsofn 1000 thrpt 5 44460 42820 32926 40496rooperatormergeperfmergetwoasyncstreamsofn 1 thrpt 5 79546448 76853391 73846697 76358122rooperatormergeperfmergetwoasyncstreamsofn 1000 thrpt 5 3138932 3140582 2672720 2283587rooperatormergeperfonestreamofnthatmergesin1 1 thrpt 5 5248113569 5136570967 5225289115 4471499594rooperatormergeperfonestreamofnthatmergesin1 1000 thrpt 5 39001895 39254876 39235506 35812513rooperatormergeperfonestreamofnthatmergesin1 1000000 thrpt 5 35039 35282 33375 33375```the degradations of this are incremental and i think worth the correctnesscrazy to me that we cant find a non-blocking approach that performs better than the jvm doing lock-elisioni suggest we move forward with this after cleaning up the comments in the code that are no longer valid || > i suggest we move forward with this after cleaning up the comments in the code that are no longer validokay if you feel ready you can merge it at your will ill take care of #2541 ||
209.0,2585,1,0,0,0,0,0,1,0,operator: switchifempty changes to #2091 thanks @akarnokd for fixing up and merging! ||
1653.0,2622,1,0,0,0,0,0,1,0,changed observableempty() into a stateless constant observable empty was always stateless so creating a new instance all the time (especially through a `from(iterable)`) is wasteful besides `oncompleted` events dont have to be backpressuredshould enable identity based optimizations discussed in #1653
2626.0,2627,1,0,0,0,0,0,1,0,flatmap overloads with maximum concurrency parameter for issue #2626there is no point in adding maxconcurrent to flatmapiterable because each iterable is subscribed to sequentially and run to completion :+1: || > there is no point in adding maxconcurrent to flatmapiterable because each iterable is subscribed to sequentially and run to completioni was wrong with this statement depending on the request pattern reordering may still happen and the downstream may be still slower unboundedness of `flatmapiterable` may still cause excessive source iterable generation that fills in the tracking arrays inside `flatmap`having the `maxconcurrency` parameter is valuable and prevents buffer bloat ||
2600.0,2630,1,0,0,0,0,0,1,0,cast back observer to subscriber if passed to subscribe(observer) rebased #2600
2647.0,2648,1,0,1,0,0,0,1,0,takewhile: dont unsubscribe downstream fixes #2647 issue with takewhile
2604.0,2759,1,0,0,0,0,0,1,0,observableusing should use unsafesubscribe and enable eager disposal see #2604 where it was discovered that `observableusing` used `subscribe` instead of `unsafesubscribe` which provoked a race condition leading to an illegalargumentexception from the merge operatorthis pr uses `unsafesubscribe` and adds an overload for `using` to optionally dispose of resources eagerly (just before completion or error) the use case for this is a _synchronous_ observable where a downstream operation wants to reuse a resource (but because the observable is synchronous the resource cannot get disposed till the downstream completes)unit tests included thanks @akarnokd ive made the change and squashed commits || replaced tabs with spaces added @experimental annotation to new overload and fixed typo in javadoc squashed commits || this seems reasonable to me i dont use using so trust the conversation youve had to address the necessary functionality reading through the other pr this does seem necessary and i agree that unsafesubscribe is appropriate for this ||
2603.0,2762,1,0,0,0,0,0,1,0,optimized isunsubscribed check extracted isunsubscribed optimization from #2603```benchmark (size) mode samples 1x 2603 rscomputationschedulerperfobserveon 1 thrpt 5 104110926 104707286rscomputationschedulerperfobserveon 10 thrpt 5 100723402 105825148rscomputationschedulerperfobserveon 100 thrpt 5 24609763 65571461rscomputationschedulerperfobserveon 1000 thrpt 5 3212434 13020027rscomputationschedulerperfobserveon 10000 thrpt 5 955002 1555493 rscomputationschedulerperfobserveon 100000 thrpt 5 96628 160218 rscomputationschedulerperfobserveon 1000000 thrpt 5 9508 16559 rscomputationschedulerperfsubscribeon 1 thrpt 5 114212000 114485516 rscomputationschedulerperfsubscribeon 10 thrpt 5 112376809 112270024 rscomputationschedulerperfsubscribeon 100 thrpt 5 88433002 104240739 rscomputationschedulerperfsubscribeon 1000 thrpt 5 31503640 64446984 rscomputationschedulerperfsubscribeon 10000 thrpt 5 3932988 8200048rscomputationschedulerperfsubscribeon 100000 thrpt 5 437626 1439069rscomputationschedulerperfsubscribeon 1000000 thrpt 5 43104 146385``` nice improvement ||
2603.0,2767,1,0,0,0,0,0,1,0,optimized scalar observeon/subscribeon redone #2603run on i7 920 26ghz windows 7 x64 jdk 18u31```benchmark (size) this score error 1x score errorobserveon 1 160377408 3091205 140913081 7097415observeon 10 132990049 1477661 125288149 14304259observeon 100 43701203 2342570 43840921 944682observeon 1000 11603952 2377205 11400340 1400628observeon 2000 6769716 220476 6853283 71276observeon 3000 4753876 326497 4741108 120612observeon 4000 3616782 212285 3632433 433754observeon 10000 1544141 28796 1548504 61419observeon 100000 149573 14974 150924 8331observeon 1000000 14909 2079 13658 7702subscribeon 1 160639801 16463799 156911862 2463637subscribeon 10 148883172 6885684 151514397 9425348subscribeon 100 133756358 3329421 133327933 3479124subscribeon 1000 56411785 22525962 52902999 19948305subscribeon 2000 35471110 12240514 34272374 16515454subscribeon 3000 25868564 2755244 26291293 2435165subscribeon 4000 20453512 2996777 19598400 4643195subscribeon 10000 8817797 465195 5389428 272784subscribeon 100000 958665 22157 900036 320547subscribeon 1000000 91606 2462 91396 3407```note that since the tests create a lot of garbage some perf numbers have quite some error margin: some appear to be faster with this pr while others appear to be slower even if they are not affected by the changes am i reading it correctly that this should really only benefit this case? >```benchmark (size) this score error 1x score errorobserveon 1 160377408 3091205 140913081 7097415``` || yes it optimizes for the scalar observing of a value i assume this is a common enough case to warrant an optimized code path || this is exactly the case i need :) || code looks good all internal changes thanks @akarnokd ||
2772.0,2804,1,0,0,0,0,0,1,0,observeon throughput enhancements squashed commits of #2773---further optimizations to `observeon`- using spscarrayqueue directly in observeon instead of `ringbuffer` to avoid the synchronization block- split tracking structure to serial (subscriptionlist) and timed (compositesubscription) in `eventloopsscheduler` which improves the sequential scheduling performance because a completing tasks subscription will be most likely the first item in the underlying linkedlistbenchmark: (i7 920 window 7 x64 java 18u31 5x1s warmup 5x5s iteration)```benchmark (size) 1x 1x error this pr this errorobserveon 1 162326012 2458085 166536559 3154174observeon 10 132471205 1857434 142517407 3734424 ++observeon 100 43282527 2145910 112238179 2270103 ++observeon 1000 11779482 173370 25726564 309193 ++observeon 2000 6756211 89196 12123276 276470 ++observeon 3000 4736893 253796 9342673 263667 ++observeon 4000 3661874 51359 7346015 123049 ++observeon 10000 1519282 108503 1546547 21885observeon 100000 151193 2569 156160 1974observeon 1000000 15373 1310 15660 0153subscribeon 1 161290037 2867882 164952259 797408subscribeon 10 151842821 2448734 147906491 4373682subscribeon 100 136418065 1773558 136889052 2362203subscribeon 1000 58389066 4559030 59482225 1372692subscribeon 2000 34089152 9318205 36581203 1264100subscribeon 3000 26712331 1265442 26519320 1319293subscribeon 4000 20118326 2018439 20163395 839709subscribeon 10000 8914213 677164 9059934 200158subscribeon 100000 958038 43349 965663 60708subscribeon 1000000 91849 2148 92706 1202```notes:- at `size 1` the throughput varies in a +/- 3000 range on each run and since the changes dont touch the scalar optimization there is no real improvement there- at `size 10000` my system reached either the cache capacity or the os schedulers time resolution so there no improvement there on- at `size 100000` and `size 1000000` the throughput doubles if i introduce some extra delay (ie via sleep(1) or some extra work)- the benchmark generates a lot of garbage due to boxing: switching to a constant emitter increases the throughput `subscribeon(1000000)` from 91 to 136 since it conflicts with #2772 anyway this is pr is to let others verify the optimizations actually work on other oses because on my windows i sometimes get significant variance in the throughput during iterations increased iteration time may be required as well
2773.0,2804,1,0,0,0,0,0,1,0,observeon throughput enhancements squashed commits of #2773---further optimizations to `observeon`- using spscarrayqueue directly in observeon instead of `ringbuffer` to avoid the synchronization block- split tracking structure to serial (subscriptionlist) and timed (compositesubscription) in `eventloopsscheduler` which improves the sequential scheduling performance because a completing tasks subscription will be most likely the first item in the underlying linkedlistbenchmark: (i7 920 window 7 x64 java 18u31 5x1s warmup 5x5s iteration)```benchmark (size) 1x 1x error this pr this errorobserveon 1 162326012 2458085 166536559 3154174observeon 10 132471205 1857434 142517407 3734424 ++observeon 100 43282527 2145910 112238179 2270103 ++observeon 1000 11779482 173370 25726564 309193 ++observeon 2000 6756211 89196 12123276 276470 ++observeon 3000 4736893 253796 9342673 263667 ++observeon 4000 3661874 51359 7346015 123049 ++observeon 10000 1519282 108503 1546547 21885observeon 100000 151193 2569 156160 1974observeon 1000000 15373 1310 15660 0153subscribeon 1 161290037 2867882 164952259 797408subscribeon 10 151842821 2448734 147906491 4373682subscribeon 100 136418065 1773558 136889052 2362203subscribeon 1000 58389066 4559030 59482225 1372692subscribeon 2000 34089152 9318205 36581203 1264100subscribeon 3000 26712331 1265442 26519320 1319293subscribeon 4000 20118326 2018439 20163395 839709subscribeon 10000 8914213 677164 9059934 200158subscribeon 100000 958038 43349 965663 60708subscribeon 1000000 91849 2148 92706 1202```notes:- at `size 1` the throughput varies in a +/- 3000 range on each run and since the changes dont touch the scalar optimization there is no real improvement there- at `size 10000` my system reached either the cache capacity or the os schedulers time resolution so there no improvement there on- at `size 100000` and `size 1000000` the throughput doubles if i introduce some extra delay (ie via sleep(1) or some extra work)- the benchmark generates a lot of garbage due to boxing: switching to a constant emitter increases the throughput `subscribeon(1000000)` from 91 to 136 since it conflicts with #2772 anyway this is pr is to let others verify the optimizations actually work on other oses because on my windows i sometimes get significant variance in the throughput during iterations increased iteration time may be required as well
2458.0,2883,1,0,0,1,0,1,1,0,proposal: standardized subject state-peeking methods this pr modifies the `subject` class to host the union of the state-peeking methods of the various `subject` implementations and fixes the inconsistent behavior of `replaysubjectgetvalues(t[])`the changes enable the `serializedsubject` to relay such state-peeking method calls into the wrapped subject and allows future `subject` wrappers to do the same (#2458) seems to make sense the additions to `subject` all should be non-breaking || due to the experimental marking of these im being a little less stringent in discussing the addition to public apis but it seems to me that the precedent set on the behaviorsubject shows the value of these methods additionally subjects are the stateful side-effecting types and these methods seem to make sense for them ||
1483.0,2969,1,0,0,0,0,0,1,0,operator cache() now supports backpressure ive removed the controversial features and made the backing cachedobservable internalrelated issue #1483 does it really need to be returning a new type of observable? it seems the methods `isconnected()` `hasobservers()` and `cachedeventcount()` are only used by the unit tests || yes otherwise one would need ugly reflection magic to get inside the state of this observable || i checked out the branch and took a shot at making it an onsubscribe function againhttps://githubcom/abersnaze/rxjava/tree/operatorcacherewrite2 || cache had originally more functionality ie the ability to terminate it manually like a disconnect but was downwoted i forgot about the `tocached()` methods which are just relics and ill update this protherwise i dont really see why i shouldnt extend observable especially if one day there will be a real need to support disconnection of cache() || ive rebased it and im going to merge this if there has concern about it being implemented as a observable a pr can always be submitted with the suggested changes ||
2799.0,2970,1,0,0,0,0,0,1,0,deprecated onbackpressureblock see #2799 for reasons to deprecate
1880.0,2972,1,0,0,0,0,0,1,0,fixed window(time) to work properly with unsubscription added backpressure support to window(size skip)see #1880
2979.0,2983,1,0,0,0,0,0,1,0,fixed multiple calls to onstart started investigating multiple calls to onstart based on #2979 and found a bunch but since onstart can be overridden i might have missed cases in addition ive found a single place where a producer is set twice on a subscriber but again many other places may exist (i know that is easy to complain :wink:) this decorator strategy is not very memory friendly you have this annoying (gwt compatibility perspective) atomicxxxfieldupdater in a lot of places to reduce memory usage and you end up adding this decorators to only disable one method callwhat do you think? thanks to solve the problem anyway :smile: || yikes! theres a lot of stuffed up backpressure fixed here im hoping we can release soon ||
3046.0,3048,1,0,0,0,0,1,1,0,compositeexception extra npe protection `compositeexception` wont crash if it received null by some means a `null` collection or `null` collection item is replaced by a `nullpointerexception` instancesee also: #3046
3038.0,3049,1,0,0,0,0,0,1,0,single: add tosingle method to observable - closes reactivex/rxjava#3038- this method allows an observable which is guaranteed to return exactly one item to be converted to a single- note: the semantics of this function are very similar to that of single- ie errors are passed through more than one item results in an illegalargumentexception completion without emission results in a nosuchelementexception and exactly one item is passed through the onsuccess method of singlesubscriber would appreciate feedback since this is my first contribution to rxjava! :) || yes || looks good can you add the license headers to the files please? the block of code to add is shown here: https://githubcom/reactivex/rxjava/blob/1x/contributingmd || have done so || would you mind rebasing to a single commit? || also done :) || thank you @tilal6991 for the contribution and responsiveness on changes || glad to contributeim planning to look into more tricky issues soon so hopefully this is not the last youll see of me :) ||
3076.0,3081,1,0,0,0,0,0,1,0,revert of cache/replay #3076 i did revert commit of the pr that added back pressure support to the cache operator and ran a canary our production systems seem stable now even with the new merge thats good news not sure what time @akarnokd has for reviewing `cache` backpressure work if we cant fix this short term would be nice too see a fix for #3026 go in 1013 if backpressure doesnt make it quick summary is in 1012 `cache` emits nothing until source has completed || can you create an unit test based on the usage pattern? it would be also interesting to verify `replay()autoconnect()` since it ought to be functionally equivalent to `cache()` || i have no clue at the moment what the actual code path is causing the lockup itll take awhile for me to instrument code to narrow which usage pattern is causing the problem || i believe the issue were seeing comes from use of `cache()` in hystrix: https://githubcom/netflix/hystrix/blob/990394e98ba7472b96d90d7246e785d0966ade9a/hystrix-core/src/main/java/com/netflix/hystrix/abstractcommandjava#l481we use hystrix at very high volume and `cache()` will be used by a large percentage of those calls this explains why this impacted our canary so significantly || ive reverted both the cache and revert related commits the tests and the canary seem to do fine so far ||
3003.0,3118,1,0,1,0,0,0,1,0,implementing the synconsubscribe this is useful for creating an observable that reads from a data source in a synchronous manner this is a rewrite of the `abstractonsubscribe` experimental class based on the ideas in #3003 you cant delete `abstractonsubscribe` because it is part of the public api and even though marked as experimental such components can be deleted only at a major release such as 11 || experimental apis can be removed or change at any time as per the readme:> @experimental> > apis marked with the @experimental annotation at the class or method level will almost certainly change they can be modified in any way or even removed at any time you should not use or rely on them in any production code they are purely to allow broad testing and feedback || i would have expected to make such apis @deprecated for a few releases before completely removing it besides this pr just gives an alternative to another @experimental class and could live side-by-side then users could decide/vote which to keep at the next major release || @akarnokd you have a good point that the efficacy of both implementations should be compared however i do not think that we should expose multiple alternatives in the public api this ambiguous api leads to confusion and questions about the unexplained differences between one or the other implementation the pull request should not be the place for debate either (since this should be about issues with this implementation) this comparison and debate was what i was hoping to get out of opening issue #3003 would you like to open a separate issue for comparing the 2 implementations? || the latest commit adds work stealing to manage unsubscribe to avoid concurrent modification of `state` while running `onunsubscribe` concurrently with `next` (and a test to exercise) fixes issues with tabs/spaces and adds javadocs || the latest commit makes a few changes - added the `abstractonsubscribe` back into the code base the `@experimental` annotation states clearly that either of these implementations can be removed at any time so its not necessary for anything to be removed now it is up to the consumer when they chose to use a potentially unstable api - added jmh tests to compare performance against `onsubscribefromiterable` the performance is impacted in astounding ways by the additional complexity of a cleanup function this requires object initialization which the `onsubscribefromiterable` does not require - general optimizations removing a volatile and reorganizing the request loop || @stealthcode can you give us more detail on the jmh comparison? || sure sorry for leaving that out heres the jmh report output```$ /gradlew clean benchmarks -pjmh-f 1 -tu s -bm thrpt -wi 5 -i 5 -r 1 *synconsubscribeperf*``````benchmark (size) mode samples score score error unitsrosynconsubscribeperfbenchabstractonsubscribe 1 thrpt 5 10345304158 167899030 ops/srosynconsubscribeperfbenchabstractonsubscribe2 1 thrpt 5 10315525503 519004209 ops/srosynconsubscribeperfbenchabstractonsubscribe2 1000 thrpt 5 10080651937 1249022786 ops/srosynconsubscribeperfbenchabstractonsubscribe2 1000000 thrpt 5 9676927741 799435391 ops/srosynconsubscribeperfbenchfromiterable 1 thrpt 5 245301608512 25693364239 ops/srosynconsubscribeperfbenchfromiterable2 1 thrpt 5 261726979345 17122836564 ops/srosynconsubscribeperfbenchfromiterable2 1000 thrpt 5 256818323006 17992719065 ops/srosynconsubscribeperfbenchfromiterable2 1000000 thrpt 5 259483656124 12863102025 ops/srosynconsubscribeperfbenchsynconsubscribe 1 thrpt 5 12770780794 146195400 ops/srosynconsubscribeperfbenchsynconsubscribe2 1 thrpt 5 12306631098 2072808101 ops/srosynconsubscribeperfbenchsynconsubscribe2 1000 thrpt 5 12326658468 682619251 ops/srosynconsubscribeperfbenchsynconsubscribe2 1000000 thrpt 5 12519473508 365884932 ops/s```under flight recorder analysis both the aos and sos suffer from the cost of creating a `subscriptionlist` and allocating memory where as a the `onsubscribefromiterable` does not require adding an unsubscribe action so doesnt need to allocate i plan on testing some changes to get around this bottle neck will submit a pull request soon hopefully this upcoming change will be a private change and not have to wait until 2x || here are the updated benchmarks this paints a very different picture than last time the performance of the `synconsubscribe` is now ~25% slower than `onsubscribefromiterable` for small iterators and ~17% slower for large iterators the bottle neck seems to be in the `synconsubscribe$subscriptionproducerrequest(long)` method```# run complete total time: 00:02:32benchmark (size) mode samples score score error unitsrosynconsubscribeperfbenchabstractonsubscribe 1 thrpt 5 8057762938 350532503 ops/srosynconsubscribeperfbenchabstractonsubscribe2 1 thrpt 5 8150650148 174362683 ops/srosynconsubscribeperfbenchabstractonsubscribe2 1000 thrpt 5 41560383 737346 ops/srosynconsubscribeperfbenchabstractonsubscribe2 1000000 thrpt 5 41237 8422 ops/srosynconsubscribeperfbenchfromiterable 1 thrpt 5 19134647666 420991146 ops/srosynconsubscribeperfbenchfromiterable2 1 thrpt 5 18720840805 327775879 ops/srosynconsubscribeperfbenchfromiterable2 1000 thrpt 5 183561551 5244489 ops/srosynconsubscribeperfbenchfromiterable2 1000000 thrpt 5 184511 4020 ops/srosynconsubscribeperfbenchsynconsubscribe 1 thrpt 5 11358568468 298560809 ops/srosynconsubscribeperfbenchsynconsubscribe2 1 thrpt 5 11367669868 133428078 ops/srosynconsubscribeperfbenchsynconsubscribe2 1000 thrpt 5 132173869 2670427 ops/srosynconsubscribeperfbenchsynconsubscribe2 1000000 thrpt 5 130224 3425 ops/s``` || here is a version where the integer stream is freshly created:![image](https://cloudgithubusercontentcom/assets/1269832/9143825/e26dae3a-3d48-11e5-8576-2df7086b31cfpng)(i7 4770k windows 7 x64 java 8u51)abstractonsubscribe (aos) has the highest overhead because of resource checks on each emissionabstractproducer (ap from #2813) offers amortized resource check overhead due to the inner loop but this loop was not particularly optimized with fast-path and/or amortized request accountingfromiterable (fi) doesnt care about resources and has fast-pathsynconsubscribe (so) in this pr is close but 33% behind fi ive made [some optimizations](https://gistgithubcom/akarnokd/a2669817708827350663) to the fast-path and got a much better result for longer sources:```13969673045 263281521 ops/s 237194622 1475414 ops/s 226248 11892 ops/s```one must be careful around volatile reads because it forces the re-read of instance variables after them || nice im merging your gist this optimization makes the fast path on-par with fromiterable in the long tail (still however ~25% slower in the 1s - 10s range) || i spoke too soon in running the unit tests there are now problems with the diff applied ill try to incorporate what i can and test to make sure the changes are more performant || sorry i didnt run any test so my changes were only valid for the perf usage and not general [here is](https://gistgithubcom/akarnokd/dffd7500981968a845d3) a version which passes the tests and has the following performance characteristics:```benchmark (size) mode samples score score error unitsbenchsynconsubscribe2fresh 1 thrpt 5 18314010215 78882829 ops/sbenchsynconsubscribe2fresh 1000 thrpt 5 223973659 2605564 ops/sbenchsynconsubscribe2fresh 1000000 thrpt 5 228057 1400 ops/s```for size 1 i think the extra allocation of the facade subscriber makes it twice the overhead the onnext safeguard also costs ~15%:```benchmark (size) mode samples score score error unitsbenchsynconsubscribe2fresh 1 thrpt 5 18356265548 512130369 ops/sbenchsynconsubscribe2fresh 1000 thrpt 5 268613838 7801208 ops/sbenchsynconsubscribe2fresh 1000000 thrpt 5 274654 7522 ops/s```edit:if i change the api to observer and saving the facade allocation i get this:```benchmark (size) mode samples score score error unitsbenchsynconsubscribe2fresh 1 thrpt 5 19915549079 499085570 ops/sbenchsynconsubscribe2fresh 1000 thrpt 5 243045859 4557930 ops/sbenchsynconsubscribe2fresh 1000000 thrpt 5 201082 124888 ops/s```the 1m case becomes quite varying perhaps due to the huge amount of `integer` garbage or the change in what the jit inlines || @akarnokd your changes are pretty solid i cant argue with results here are the benchmarks for your changes alone```benchmark (size) mode samples score score error unitsrosynconsubscribeperfbenchfromiterable2 1 thrpt 5 17907742680 1458787396 ops/srosynconsubscribeperfbenchfromiterable2 1000 thrpt 5 181328434 3485931 ops/srosynconsubscribeperfbenchfromiterable2 1000000 thrpt 5 181733 9492 ops/srosynconsubscribeperfbenchsynconsubscribe2 1 thrpt 5 14414752664 572789234 ops/srosynconsubscribeperfbenchsynconsubscribe2 1000 thrpt 5 182578431 21732491 ops/srosynconsubscribeperfbenchsynconsubscribe2 1000000 thrpt 5 186404 6581 ops/s```i implemented a small api change to expose a setter on an unsubscribe `action1 ` with this change we can check if theres no unsubscribe (and avoid a `subscriptionlist` allocation) ```benchmark (size) mode samples score score error unitsrosynconsubscribeperfbenchfromiterable2 1 thrpt 5 17832090877 3436213149 ops/srosynconsubscribeperfbenchfromiterable2 1000 thrpt 5 180643547 10720476 ops/srosynconsubscribeperfbenchfromiterable2 1000000 thrpt 5 179589 20317 ops/srosynconsubscribeperfbenchsynconsubscribe2 1 thrpt 5 17809008594 478600206 ops/srosynconsubscribeperfbenchsynconsubscribe2 1000 thrpt 5 181643455 45353810 ops/srosynconsubscribeperfbenchsynconsubscribe2 1000000 thrpt 5 183044 7280 ops/s```with this change we are now faster than `onsubscribefromiterable` in the short and long cases (assuming we dont have to cleanup with unsubscribe) || > with this change we are now faster than onsubscribefromiterablesee #3137 :) || highlights of the recent changes includes:- removing the weird `onunsubscribe(action1)` method on `synconsubscribe`- added new tests and fixed generics issues (not enough `?`s)- added `blackholeconsumecpu()` to perf tests in order to force the micro benchmarks to artificially reduce volatile write contentionim now happy with this pull request and believe its ready to be merged || looks good to me now although i dont see how one could implement never() with it or a source that stops emitting but doesnt terminate || there is a test that implements never() behavior however it does not terminate where as the observablenever() instance would simply terminate without setting a producer || javadocs need some work here but i think thats the only thing remaining || this test times out:``` java @test(timeout 1000) public void testnever2() { onsubscribe os synconsubscribecreatestateless( new action1 >() { @override public void call(observer subscriber) { }}) observablecreate(os)subscribe() }``` || yes it does and i think that it should remain this way it should be documented in the contract of using the `synconsubscribe` that your next function will not terminate if you do not eventually call the `observeroncompleted()` or `observeronerror(e)` its similar to an `observablecreate` call with an `onsubscribe` that synchronously loops over each `n` for all `requeqst(n)` this would only terminate when - the consumer is done (request 0)- the producer declares that its done (via terminal event)- an error occurs or subscription is otherwise unsubscribed (take) || you could also extend the api and use some `observerex` that implements `observer` plus a `stop()` method then document that if you whish to not emit any further items but dont want to terminate the stream call stop() || i cannot see a valid use case of `observablenever()` aside from merging in with an asynchronous hot observable such as `observablecombinelatest(somefuncthatmayreturnnever(foo) hotobs)` it seems like a tool to force merging observables in ways that obviate the need to merge at all are there use cases that i am missing?that said i would rather not corrupt the api with a one-off concept of `stop()` without good reason its important that we get the api correct (even in `@experimental`) || javadoc is now updated || :+1: reviewed the code looks good ||
3119.0,3121,1,0,0,0,0,0,1,0,improve performance of newthreadworker disable search for setremoveoncancelpolicy() on android api < 21 resolves #3119this pr adds methods for detecting android api version and disables `newthreadworkertryenablecancelpolicy()` on android api < 21 which has significant performance cost on androidpr also improves performance of `newthreadworkertryenablecancelpolicy()` via caching reflection checked on jvm (java 8) android 412 (api 16) android 511 (api 22) || fixed all comments removed test with reflection added more javadoc and comments tests are now compilable on jdk 6 (didnt check but they should work fine) @akarnokd @jakewharton ptal || great thanks! ||
3128.0,3129,1,0,0,0,0,0,1,0,fix retry with predicate ignoring backpressure apparently we forgot about this operator the backpressure handling is a trivial case with `producerarbiter` ive also fixed some apparent code indentation errororiginally reported in #3128 with a test case which i didnt include due to its lengthy nature however i did run the test manually and both passed after the fix
3145.0,3147,1,0,0,0,0,0,1,0,"remove unnecessary static modifier ps @benjchristensen @akarnokd sorry for large amount of simple pull requests im doing full code review of rxjava sources http://artemzincom/blog/rxjava-code-review-part-1/ and ill create prs and issues during this reviewill try to group changes by themes so it will be easy to review them looks like this adventure is going to be part of #3145! if it were only me id accept cosmetic changes such as this but history tells me not to || @akarnokd why? sad that `javac` is not strict enough and allows such things we can add `checkstyle` with only java-lang rules and remove all these things from the code but last time i suggested to add `checkstyle` @benjchristensen was not very happy…i understand that rxjava is not ""my project"" and i cant just come and force you to use ""my codestyle"" (which is actually just standard java codestyle) so if you dont want to accept such changes — its okay ill stop doing such prs and will report only major issues || i like this pr too much im going to merge it ) || > i like this pr too much im going to merge it ):-) ||"
3022.0,3149,1,0,0,0,0,1,1,0,scheduler shutdown capability repost of #3022 we still need to decide on the reset vs shutdown distinction: https://githubcom/reactivex/rxjava/pull/3022#issuecomment-114591952what is your perspective? do you have a strong opinion one way or another? || with start/shutdown there is a clear intention to stop everybody with reset any running code could respawn the threads and the new threads will resume leaking i prefer start/shutdown || agree it will be great to have ability to stop schedulers and prevent new workers from scheduling for apps that run in servlets and other similar containers which can be stopped externally || im happy with the start/shutdown pair which seems to support my primary use cases:- resource release on webapp shutdown in container- resource release on completion of programs run by a framework that looked for unreleased threads (maven)- on ad-hoc basis ensuring schedulers are not running in the background on entry into a unit test (when running a suite)thanks @akarnokd! || the `start`/`shutdown` semantic looks good to me more explicit best enforcement of shutdown :cop: and good compatibility with items mentioned by @davidmoten (which are pretty much our use cases as well) :ok_hand: || ill following this thread to be notified when its merged thanks @akarnokd || @benjchristensen do you consider we have consensus on naming? after that itd be showtime :clapper: :joy: || :up: because so many customers from us run into this || @daschl :+1: || i would like a bit more context on what the goal is for the scheduler shutdown capability @davidmoten and any others please respond thanks > resource release on webapp shutdown in containerwhat resources exactly need to be freed? shutting down the schedulers would prevent new workers from being scheduled and would free up threads from the executor is this the desired behavior or is there some side effect that you are looking for?> resource release on completion of programs run by a framework that looked for unreleased threads (maven)could anyone name a framework thats impacted? is the concern that open threads keep the framework from properly terminating?> on ad-hoc basis ensuring schedulers are not running in the background on entry into a unit test (when running a suite)would the `testscheduler` solve this problem for you? this doesnt rely on singleton values and can be used to precisely test scheduling behavior || @stealthcode i can answer the question 2 i hope it help you could anyone name a framework thats impacted? is the concern that open threads keep the framework from properly terminating?- couchbase java sdkcb sdk are not able to finish some of they own threads because it is referring rxcomputationthreadpool threads who cant be finishedyou can see more details about how this issue are affecting this framework herehttps://forumscouchbasecom/t/the-v2-of-the-java-client-leaks-rxjava-threads-on-shutdown/3890/19 || @stealthcode i can give you the answer to your questions tooid like to use rxjava in the container (eg id like to use jersey rx client on tomcat) unfortunately it is impossible to shutdown _rxcomputationthreadpool-*_ threads and container has memory leaks that causes that rxjava is inapplicable for my purposes :( and in my case - regarding question 1 - yes shutting down all schedulers permanently is a desired behaviour and testscheduler is not a solution so im really looking forward to seeing this pr accepted and released! || @mjakubowski84 :+1: similar case here || @mjakubowski84 understood regarding the testscheduler - this is meant for use in tests and highly recommended when it comes to a container you would definitely want to use a real scheduler so what i hear is that there is no desire to resume the scheduler once it is shut down my concern is that by offering a `schedulerlifecyclestart()` method we are inviting non-deterministic behavior in the case that someone wants to use this to teardown and then resume (in integration tests for example) would it be acceptable to remove the `start()` method from the public interface and rename `shutdown()` to `teardown()` to more accurately describe the intent? || i dont have strong opinion between shutdown/teardown`teardown` makes the intent clearer but `shutdown` is more idiomatic (in the context of java executor)otherwise the code lgtm :+1: || another thing if we want to be more java idiomatic maybe hiding the `start()` is the right thing to doit will also have the benefit of avoiding bug by misusage of the library (calling `start()` after a `shutdown()`) || i can make `schedulersstart()` package private so the tests can use it but i the `scheduler` implementations have to keep their start public || please do i believe that would be better || done || @akarnokd @stevegury folks do you think its possible to get this into 1015? || @akarnokd thanks || i think this is fine :+1: || do you guys have a plan date to merge it? || @akarnokd i think its appropriate that you merge this pr since you are most familiar with this code if you think you are happy with it then feel free || oh sorry didnt recount the number of likes merging || where can i get the latest build with this fix? maven central is still at 1014 || @chiangh123 you can clone the project and build it from master good luck :) || `rxjava` uses bintray for binaries and also publishes snapshots in jfrogs oss artifactory so you can add the following repository to your `pomxml`:``` xml snapshots libs-snapshot http://ossjfrogorg/artifactory/libs-snapshot ```after that you should be able to depend on rxjava `1015-snapshot` ||
3050.0,3150,1,0,0,0,0,1,1,0,window operators now support backpressure in the inner observable repost of #3050 do we need to maintain both bufferuntilsubscriber v1 and v2 at the same time? || `bufferuntilsubscriber` does some black backpressure magic inside groupby which i wasnt able to figure out and the v2 doesnt pass unit tests with it || it seems like `bufferuntilsubscriber` is being used as a special case buffer for `operatorgroupby` while `bufferuntilsubscriberv2` is custom for the windowing operators if they cannot be reconciled to work for both cases then could you please move them into the operators as static nested classes?also since groupbys back pressure is being patched maybe itd be a good idea to revisit this pull request with those changes to try to combine the two `bufferuntilsubscriber`s || these are internal classes and can live in their own files the groupby in #3428 no longer uses it and once merged this `bufferuntilsubscriberv2` can be renamed or better yet promoted to a standard api `unicastsubject`i dont think we should be so eager to combine things such combinations end up in monstrous classes which are then sources of misunderstanding and complexity || `bufferuntilsubscriber` was a proposed as a solution to the time gap problem in group by so because `bufferuntilsubscriberv2` doesnt work to solve this problem for group by leads me to question its naming is it built to handle the same problem or a different problem? are you proposing to rename v2 to `unicastsubject`? || > i dont think we should be so eager to combine things such combinations end up in monstrous classes which are then sources of misunderstanding and complexityim proposing to hide away internal functionality from the public api || neither of these are public api since they reside in the internal package hiding them further away seems to be unnecessary in addition `bufferuntilsubscriberv2` is effectively turned into the official `unicastsubject` in 2xhistorically `bufferuntilsubscriber` started out to solve the time-gap problem for the non-backpressured `groupby` and `window` when the backpressure was introduced `groupby` had to support backpressure but `bufferuntilsubscriber` wasnt enhanced instead `bufferuntilsubscriber` is used as a middle man and the subscription process is hijacked to inject a producer that attempts to coordinate requests apparently this didnt cover all request pattern hence the original bug due to this very specific hijacking adding backpressure to `bufferuntilsubscriber` directly didnt work out as it conflicted with the request coordination in a way i couldnt resolve therefore i decided to have a separate class that does backpressure but doesnt have to be involved in request coordination for `window` (which i believe cant be established with a reasonable strategy) || all im asking for is a rename from v2 in 1x || maybe i missed it but whats the name youd like? || ive renamed the class to `unicastsubject` and combined the `state` with the `onsubscribebus` class || im going to sleep now (its midnight here) so if you only have concerns about naming location and visibility i suggest merging this pr then posting a separate pr with your changes (and merge it if you can get somebody else to like it in the meantime) || @akarnokd would you mind rebasing this? || done || :+1: ||
2464.0,3155,1,0,0,0,0,1,1,1,safesubscriber - report oncompleted unsubscribe error to rxjavaplugin discussed in #2464 when an observable emits `oncompleted` but `unsubscribe` in `safesubscriber` throws then the error should be reported to the `rxjavaplugin` error handler and if that fails a stack trace is written to `systemerr` there are a lot of repeated try catch blocks calling the rxjavaplugins error handler so ive made a `rxjavapluginutils` class it will also be called from the `using` fix which i will submit once this pr has been accepted || one of the tests fails || im going to ponder the issue of throwing after reporting to the error handler a bit || ive been looking for a bit of guidance about what to do when `unsubscribe` throws in `safesubscriber` _rx design guidelines_ doesnt really cover it _reactive-streams-jvm_ does touch upon it saying:> 315 calling subscriptioncancel must return normally the only legal way to signal failure to a subscriber is via the onerror methodi think given that the contract has been breached it is fair to throw an exception and i think a new wrapper `unsubscribefailureexception` would be appropriateid also like to address the case when `oncompleted` throws _reactive-streams-jvm_ has this to say:> 213 calling onsubscribe onnext onerror or oncomplete must return normally except when any provided parameter is null in which case it must throw a javalangnullpointerexception to the caller for all other situations the only legal way for a subscriber to signal failure is by cancelling its subscription in the case that this rule is violated any associated subscription to the subscriber must be considered as cancelled and the caller must raise this error condition in a fashion that is adequate for the runtime environmentso in the existing code if in `safesubscriber` an `onerror` call to the downstream subscriber throws then the rxjavaplugin error handler is called _and_ an `onerrorfailedexception` is thrown comments in the method say this is ok because the contract has been broken and this is probably consistent with the advice in 313:> and the caller must raise this error condition in a fashion that is adequate for the runtime environmentin the existing code if in `safesubscriber` an `oncompleted` call to the downstream subscriber throws then the consequent call to `_onerror` tries to signal `onerror` to the downstream subscriber im worried that calling `onerror` after calling `oncompleted` is a strong enough breach of the contract that the possible side effects could be worse than just a throw shouldnt we throw only (and notify the plugin error handler of course)? || ive submitted code that matches my thinking above it still fails because i havent amended the existing unit tests associated with throwing ill do that after another round of review if accepted || the failing test is a coverage test for a behavior no longer present i suggest removing it and rerunning the jacoco to see if all current code path is covered || @akarnokd yep thats right are you happy that a throwing `oncompleted()` call should not induce an `onerror()` call? if so ill clean up and update the pr || ive fixed the unit tests and added more so that `safesubscriber` gets 100% coverage || :+1: looks good to mesince this adds public api classes it requires further approval (otherwise it shouldnt affect programs other than those that badly fail therefore the merge policy would allow me to merge it) || lgtm it would be better if you can fix the indent :+1: for unsubscribefailureexception its a pity that we cannot change `onerrorfailedexception`s that should have been `unsubscribefailureexception` now since its a break change || thanks for review @akarnokd and @zsxwing ive fixed indent in test and squashed commits || great thanks! ||
3156.0,3169,1,0,1,0,0,0,1,0,merge can now operate in horizontally unbounded mode resolves #3156 note that since the default merge operation is unbounded this change could lead to an excessive memory usage when flatmapping fast sources note that the pre 1013 version did this albeit on a slighty slower paththe change also affects the scalar optimization as well pre 1013 implicitly limited the concurrency level to rxringbuffersize when scalars were received this version now fills the queue up to the concurrency levelfor 20 i suggest having a bounded behavior by default and require the developer to specify integermax_value to go for the unbounded behavior so he/she knows about the consequences ill have to allocate some time to review this later as it is somewhat detailed thank you for tackling this || > pre 1013 implicitly limited the concurrency level to rxringbuffersize when scalars were receivedthat was done by design since scalars behave as `onnext` and we can limit the number of `observable`s being merged if we have scalars queued up for deliverythe reason we cant limit the number of async `observable`s is because we dont know if they will emit or not and thus risk deadlock || :+1: || ill rebase this || rebased lets get this finally in || thanks ||
3252.0,3286,1,0,0,0,0,1,1,1,1x: implements blockingsingle adds blockingsingle (issue #3252) the blocking version of rxsingleblockingsingle has the following methods:- `from(single)` -- factory method for creating a `blockingsingle` from a `single`- `value()` -- returns the value emitted from the single- `tofuture()` -- returns a `javautilconcurrentfuture`couldnt actually think of any other useful operations to perform on `blockingsingle` - in comparison to `blockingobservable` theres not much to this class (at the moment) ~~hmmmgot a test failure that i cant reproduce locally:~~ (fixed by #3285)```rxobservablessynconsubscribetest > testsubscribeon failed javalangassertionerror: expected: but was: at orgjunitassertfail(assertjava:93) at orgjunitassertfailnotequals(assertjava:647) at orgjunitassertassertequals(assertjava:128) at orgjunitassertassertequals(assertjava:472) at orgjunitassertassertequals(assertjava:456) at rxobservablessynconsubscribetesttestsubscribeon(synconsubscribetestjava:734``` || this test failure should be resolved now || @hyleung is this ready to be reviewed/merged? || @abersnaze not quite yet there are a couple of things from @artem-zinnatullins pr (#3416) that i want to pull in (splitting out a separate `blockingutils` class to hold `awaitcomplete` for example) also im going to rebase it against head of 1x since its been about a month || @abersnaze the pr is ready for review btw ill keep the commits separate as i incorporate the feedback and squash it down at the end || maybe move `blockingsingle` from `rxobservables` to `rxsingles`? || @artem-zinnatullin re `rxsingles` - that would be a new package then? ~~dont have a particular option either way tbh - anybody else?~~ ah i see what youre getting atmoved to `rxsingles` which other operators are you thinking of adding to `single` btw? || lgtm just a few nits left :+1: || im ready to merge this as long as we can add the necessary `@experimental` annotations and rebase onto 1x || @stealthcode done! || :+1: || :+1:thanks for contributing ||
3157.0,3352,1,0,1,0,0,0,1,0,2x: perf checks for flatmap and merge ported the two perf tests to evaluate 2x throughput![image](https://cloudgithubusercontentcom/assets/1269832/9907226/67a454c8-5c8e-11e5-8644-c3196b2e58d8png)my primary suspect for the extra overhead are the atomics of queue-drain the 1x uses a synchronized-based emitter-loop which is elided by the jit compiler but atomics cant be elided as i mentioned before synchronized works better for light-to-none asynchronous use whereas atomics work better for asynchronous usealso quote from #3157> exceptions that do not require a :+1: would be:> > javadoc changes> unit test additions or refactoring> **perf test additions fixes or refactoring**> grammatical and presentation fixes to readme contributing and other such metadata files
3017.0,3357,1,0,0,0,0,0,1,0,"eager concatmap related discussion in #3017 thanks a lot for contributing this one @akarnokd ive had one look through and no problems jump out at me but i will review further this will be useful || thanks for the review @davidmoten usually i use one letter variables because i find it easier to parse the code and instead of long variable names i use newlines to separate logical blocks this way i dont have to type that many letters and i dont have to wait while eclipse returns with the content assist (which is blocking by the way and may take hundreds of milliseconds even on my i7 + ssd)i took the time and renamed variables as you asked for and added some more unit tests that check the code paths that being said i dont plan to do such renames in my contributions very often in the future and encourage anybody to post their prs with their proposed cleanups/renames || thanks for the feedback ive updated the method names to `concatmapeager` and `concateager` added the `@experimental` tags some javadoc and a missing test for a 2-parameter `concateager` overload || updated with a capacity fix for the `spsclinkedarrayqueue` || i reviewed in details in the code and i believe it is correctbut i wonder if subscribing to the sources in a ""unbounded mode"" is the right thing to doat the expense of complexifying the code i believe it could be possible to split the `request(n)` between the sources maybe requesting `1` to all the `m` sources expect the first one which we request `n - m + 1` and so onthe devil is in the details and i believe this would significantly complexify the code but i would like to know what you are thinking about this? || @stevegury this operator consumes source observables in order and doesnt make sense to split any request from downstream if the downstream requests n and the first is requested n / count that would hang the sequence because only the first is allowed to emit and it wont emit enough to trigger a new requestit is possible to use a bounded buffer per source so while they are not consumed they dont grow indefinitely however it means that each of them can produce only `rxringbuffersize` elements before stopping and thus the operator wouldnt be eager anymore || @akarnokd sorry i wasnt very clear but what i proposed was roughly what you described (replacing `rxringbuffersize` by `1`)my main concern here is the use of unbounded buffer which i think could be avoided || @davidmoten what do you think about the bounded buffering and the fact that such sources would act more like a delayed source? || id be happy to see bounded buffering (`rxringbuffersize` sounds a better default size than 1 to me and would be consistent with the request eagerness of other operators like `merge` for instance) could we add an overload to allow the specification of buffer size as well?if this is significant rework im content to see this unbounded version documented with its buffering characteristics merged and we can defer the bounding work to another pr || done || great thanks @akarnokd ! lightning quick as always || lgtm :+1: || the three of you seem happy with it so im merging it ||"
3381.0,3382,1,0,0,0,0,0,1,0,2x: fix spsclinkedarrayqueue leaves 1 slot null just before growing discovered while debugging #3381 confirmed with jctools in https://githubcom/jctools/jctools/pull/80 :+1: ||
3385.0,3417,1,0,0,0,0,1,1,1,add singledoonsuccess() closes #3385 :+1: || @artem-zinnatullin rebase please || @abersnaze rebased! ||
3439.0,3444,1,0,0,0,0,1,1,1,1x: completable class to support valueless event composition + tests this is a backport of #3439 looks good should we annotate `@experimental` on all the public methods and operators? || now the class annotation should indicate all methods are experimental if individual methods get promoted we can add direct annotations then || sounds good :+1:on sat dec 5 2015 01:38 david karnok notifications@githubcom wrote:> now the class annotation should indicate all methods are experimental if> individual methods get promoted we can add direct annotations then> > —> reply to this email directly or view it on github> https://githubcom/reactivex/rxjava/pull/3444#issuecomment-162167535 || since this adds to the api surface id like to get another like before merging || :+1: || awesome thanks! ||
3445.0,3447,1,0,0,0,0,0,1,0,1x: delaysubscription with a plain other observable requested in #3445this is an efficient implementation as it avoids allocating the lifter object doesnt require a function wrapper and doesnt use producer arbitration(bonus points to those who can recognize the similarities with #3446) any thoughts about this? || :+1: || :+1: ||
3446.0,3447,1,0,0,0,0,0,1,0,1x: delaysubscription with a plain other observable requested in #3445this is an efficient implementation as it avoids allocating the lifter object doesnt require a function wrapper and doesnt use producer arbitration(bonus points to those who can recognize the similarities with #3446) any thoughts about this? || :+1: || :+1: ||
2943.0,3467,1,0,0,0,0,1,1,0,"1x: compensation for significant clock drifts in scheduleperiodically there is a problem reported in #3461 and #2943 in which if the system clock drifts the periodic calculation inside schedulerworker gets off and either taking a longer time for the next invocation of the task or doing ""catching-up"" with all the lost invocationsthe solution checks the wall clock difference between the last run and the current run and if it went back or forward significantly it rebases the timer period and schedules the next execution relative to nowif the clock goes back the original code scheduled the next invocation way into the future this pr will schedule it after the periodif the clock goes forward the original code scheduled executions for all the missed time between the last run and the new time immediately yielding a bunch of 0 delays this pr will simply schedule the next invocation after the periodthe algorithm for both cases is the same: make sure the next invocation is scheduled relative to now and recalculate the start timestamp as if the whole sequence run under the new drifted clock all along the subsequent invocations will be scheduled at a fixed rate againive added the system parameter `rxschedulerdrift-tolerance` (unit: minutes default: 15 minutes) which is used to determine if the clock drifted too far between invocations of the periodic task time drift is pretty nasty we spent a lot of time on this in rxnet http://blogsmsdncom/b/rxteam/archive/2012/06/20/reactive-extensions-v2-0-release-candidate-available-nowaspx || ive updated the code with the suggestion of @stealthcode || :+1: lgtm || do you need additional changes? if not feel free to merge this pr || :+1: || yay! this was important issueso i did test (similar to #3530):``` javaobservable interval(5 10 seconds) subscribe(along -> loggerd(""interval: %d"" along))```and then changed system clock to +2 hours at runtime of the app**before fix**as expected computation scheduler gone crazy and fired about 700 events during one second **after fix**everything was just fine! no incorrect events no cpu consuming ---so i think #3461 and #3530 can be closed now!thanks @akarnokd! ||"
3461.0,3467,1,0,0,0,0,1,1,0,"1x: compensation for significant clock drifts in scheduleperiodically there is a problem reported in #3461 and #2943 in which if the system clock drifts the periodic calculation inside schedulerworker gets off and either taking a longer time for the next invocation of the task or doing ""catching-up"" with all the lost invocationsthe solution checks the wall clock difference between the last run and the current run and if it went back or forward significantly it rebases the timer period and schedules the next execution relative to nowif the clock goes back the original code scheduled the next invocation way into the future this pr will schedule it after the periodif the clock goes forward the original code scheduled executions for all the missed time between the last run and the new time immediately yielding a bunch of 0 delays this pr will simply schedule the next invocation after the periodthe algorithm for both cases is the same: make sure the next invocation is scheduled relative to now and recalculate the start timestamp as if the whole sequence run under the new drifted clock all along the subsequent invocations will be scheduled at a fixed rate againive added the system parameter `rxschedulerdrift-tolerance` (unit: minutes default: 15 minutes) which is used to determine if the clock drifted too far between invocations of the periodic task time drift is pretty nasty we spent a lot of time on this in rxnet http://blogsmsdncom/b/rxteam/archive/2012/06/20/reactive-extensions-v2-0-release-candidate-available-nowaspx || ive updated the code with the suggestion of @stealthcode || :+1: lgtm || do you need additional changes? if not feel free to merge this pr || :+1: || yay! this was important issueso i did test (similar to #3530):``` javaobservable interval(5 10 seconds) subscribe(along -> loggerd(""interval: %d"" along))```and then changed system clock to +2 hours at runtime of the app**before fix**as expected computation scheduler gone crazy and fired about 700 events during one second **after fix**everything was just fine! no incorrect events no cpu consuming ---so i think #3461 and #3530 can be closed now!thanks @akarnokd! ||"
3469.0,3470,0,0,0,0,0,1,1,0,1x: replay request coordination reduce overhead reported in #3469this change will make sure whenever a new subscriber arrives therequest coordination doesnt scan every other subscriber unnecessary(they will trigger a managerequests individually anyway)unfortunately i cant make the subscription registration constant (via a hashset) because that would slow down the dispatching loop (which is quite expensive to for-each over compared to a plain array)note also that this will likely conflict with #3454i get the following numbers with the program in #3469```subscribingsubscribed so far 10000 took 54ms to subscribe last 10000 at rate: 185185 per secsubscribed so far 20000 took 110ms to subscribe last 10000 at rate: 90909 per secsubscribed so far 30000 took 157ms to subscribe last 10000 at rate: 63694 per secsubscribed so far 40000 took 267ms to subscribe last 10000 at rate: 37453 per secsubscribed so far 50000 took 211ms to subscribe last 10000 at rate: 47393 per secsubscribed so far 60000 took 320ms to subscribe last 10000 at rate: 31250 per secsubscribed so far 70000 took 331ms to subscribe last 10000 at rate: 30211 per secsubscribed so far 80000 took 369ms to subscribe last 10000 at rate: 27100 per secsubscribed so far 90000 took 415ms to subscribe last 10000 at rate: 24096 per secsubscribed so far 100000 took 462ms to subscribe last 10000 at rate: 21645 per secsubscribed so far 110000 took 516ms to subscribe last 10000 at rate: 19379 per secsubscribed so far 120000 took 547ms to subscribe last 10000 at rate: 18281 per secsubscribed so far 130000 took 647ms to subscribe last 10000 at rate: 15455 per secsubscribed so far 140000 took 720ms to subscribe last 10000 at rate: 13888 per secsubscribed so far 150000 took 811ms to subscribe last 10000 at rate: 12330 per secsubscribed so far 160000 took 806ms to subscribe last 10000 at rate: 12406 per secsubscribed so far 170000 took 873ms to subscribe last 10000 at rate: 11454 per secsubscribed so far 180000 took 911ms to subscribe last 10000 at rate: 10976 per secsubscribed so far 190000 took 986ms to subscribe last 10000 at rate: 10141 per secsubscribed so far 200000 took 1003ms to subscribe last 10000 at rate: 9970 per secsubscribed so far 210000 took 1168ms to subscribe last 10000 at rate: 8561 per secsubscribed so far 220000 took 1213ms to subscribe last 10000 at rate: 8244 per secsubscribed so far 230000 took 1340ms to subscribe last 10000 at rate: 7462 per secsubscribed so far 240000 took 1314ms to subscribe last 10000 at rate: 7610 per secsubscribed so far 250000 took 1548ms to subscribe last 10000 at rate: 6459 per secsubscribed so far 260000 took 1372ms to subscribe last 10000 at rate: 7288 per secsubscribed so far 270000 took 1835ms to subscribe last 10000 at rate: 5449 per secsubscribed so far 280000 took 2087ms to subscribe last 10000 at rate: 4791 per secsubscribed so far 290000 took 1910ms to subscribe last 10000 at rate: 5235 per secsubscribed so far 300000 took 1966ms to subscribe last 10000 at rate: 5086 per secunsubscribingunsubscribed so far 10000 took 1910ms to unsubscribe last 10000 at rate: 5235 per secunsubscribed so far 20000 took 1782ms to unsubscribe last 10000 at rate: 5611 per secunsubscribed so far 30000 took 1730ms to unsubscribe last 10000 at rate: 5780 per secunsubscribed so far 40000 took 1593ms to unsubscribe last 10000 at rate: 6277 per secunsubscribed so far 50000 took 1514ms to unsubscribe last 10000 at rate: 6605 per secunsubscribed so far 60000 took 1468ms to unsubscribe last 10000 at rate: 6811 per secunsubscribed so far 70000 took 1188ms to unsubscribe last 10000 at rate: 8417 per secunsubscribed so far 80000 took 1234ms to unsubscribe last 10000 at rate: 8103 per secunsubscribed so far 90000 took 1271ms to unsubscribe last 10000 at rate: 7867 per secunsubscribed so far 100000 took 1358ms to unsubscribe last 10000 at rate: 7363 per secunsubscribed so far 110000 took 1103ms to unsubscribe last 10000 at rate: 9066 per secunsubscribed so far 120000 took 1100ms to unsubscribe last 10000 at rate: 9090 per secunsubscribed so far 130000 took 990ms to unsubscribe last 10000 at rate: 10101 per secunsubscribed so far 140000 took 953ms to unsubscribe last 10000 at rate: 10493 per secunsubscribed so far 150000 took 854ms to unsubscribe last 10000 at rate: 11709 per secunsubscribed so far 160000 took 789ms to unsubscribe last 10000 at rate: 12674 per secunsubscribed so far 170000 took 779ms to unsubscribe last 10000 at rate: 12836 per secunsubscribed so far 180000 took 624ms to unsubscribe last 10000 at rate: 16025 per secunsubscribed so far 190000 took 634ms to unsubscribe last 10000 at rate: 15772 per secunsubscribed so far 200000 took 514ms to unsubscribe last 10000 at rate: 19455 per secunsubscribed so far 210000 took 411ms to unsubscribe last 10000 at rate: 24330 per secunsubscribed so far 220000 took 373ms to unsubscribe last 10000 at rate: 26809 per secunsubscribed so far 230000 took 337ms to unsubscribe last 10000 at rate: 29673 per secunsubscribed so far 240000 took 286ms to unsubscribe last 10000 at rate: 34965 per secunsubscribed so far 250000 took 234ms to unsubscribe last 10000 at rate: 42735 per secunsubscribed so far 260000 took 222ms to unsubscribe last 10000 at rate: 45045 per secunsubscribed so far 270000 took 159ms to unsubscribe last 10000 at rate: 62893 per secunsubscribed so far 280000 took 96ms to unsubscribe last 10000 at rate: 104166 per secunsubscribed so far 290000 took 63ms to unsubscribe last 10000 at rate: 158730 per secunsubscribed so far 300000 took 31ms to unsubscribe last 10000 at rate: 322580 per sec``` ive updated the code to have o(1) subscription/unsubscription cost as well the program from #3469 now produces stunning results:```subscribingsubscribed so far 10000 took 32ms to subscribe last 10000 at rate: 312500 per secsubscribed so far 20000 took 12ms to subscribe last 10000 at rate: 833333 per secsubscribed so far 30000 took 14ms to subscribe last 10000 at rate: 714285 per secsubscribed so far 40000 took 6ms to subscribe last 10000 at rate: 1666666 per secsubscribed so far 50000 took 12ms to subscribe last 10000 at rate: 833333 per secsubscribed so far 60000 took 4ms to subscribe last 10000 at rate: 2500000 per secsubscribed so far 70000 took 5ms to subscribe last 10000 at rate: 2000000 per secsubscribed so far 80000 took 5ms to subscribe last 10000 at rate: 2000000 per secsubscribed so far 90000 took 4ms to subscribe last 10000 at rate: 2500000 per secsubscribed so far 100000 took 13ms to subscribe last 10000 at rate: 769230 per secsubscribed so far 110000 took 4ms to subscribe last 10000 at rate: 2500000 per secsubscribed so far 120000 took 5ms to subscribe last 10000 at rate: 2000000 per secsubscribed so far 130000 took 5ms to subscribe last 10000 at rate: 2000000 per secsubscribed so far 140000 took 4ms to subscribe last 10000 at rate: 2500000 per secsubscribed so far 150000 took 5ms to subscribe last 10000 at rate: 2000000 per secsubscribed so far 160000 took 6ms to subscribe last 10000 at rate: 1666666 per secsubscribed so far 170000 took 41ms to subscribe last 10000 at rate: 243902 per secsubscribed so far 180000 took 5ms to subscribe last 10000 at rate: 2000000 per secsubscribed so far 190000 took 5ms to subscribe last 10000 at rate: 2000000 per secsubscribed so far 200000 took 19ms to subscribe last 10000 at rate: 526315 per secsubscribed so far 210000 took 4ms to subscribe last 10000 at rate: 2500000 per secsubscribed so far 220000 took 3ms to subscribe last 10000 at rate: 3333333 per secsubscribed so far 230000 took 4ms to subscribe last 10000 at rate: 2500000 per secsubscribed so far 240000 took 4ms to subscribe last 10000 at rate: 2500000 per secsubscribed so far 250000 took 4ms to subscribe last 10000 at rate: 2500000 per secsubscribed so far 260000 took 4ms to subscribe last 10000 at rate: 2500000 per secsubscribed so far 270000 took 4ms to subscribe last 10000 at rate: 2500000 per secsubscribed so far 280000 took 4ms to subscribe last 10000 at rate: 2500000 per secsubscribed so far 290000 took 4ms to subscribe last 10000 at rate: 2500000 per secsubscribed so far 300000 took 4ms to subscribe last 10000 at rate: 2500000 per secunsubscribingunsubscribed so far 10000 took 13ms to unsubscribe last 10000 at rate: 769230 per secunsubscribed so far 20000 took 8ms to unsubscribe last 10000 at rate: 1250000 per secunsubscribed so far 30000 took 7ms to unsubscribe last 10000 at rate: 1428571 per secunsubscribed so far 40000 took 5ms to unsubscribe last 10000 at rate: 2000000 per secunsubscribed so far 50000 took 5ms to unsubscribe last 10000 at rate: 2000000 per secunsubscribed so far 60000 took 5ms to unsubscribe last 10000 at rate: 2000000 per secunsubscribed so far 70000 took 3ms to unsubscribe last 10000 at rate: 3333333 per secunsubscribed so far 80000 took 3ms to unsubscribe last 10000 at rate: 3333333 per secunsubscribed so far 90000 took 3ms to unsubscribe last 10000 at rate: 3333333 per secunsubscribed so far 100000 took 3ms to unsubscribe last 10000 at rate: 3333333 per secunsubscribed so far 110000 took 3ms to unsubscribe last 10000 at rate: 3333333 per secunsubscribed so far 120000 took 3ms to unsubscribe last 10000 at rate: 3333333 per secunsubscribed so far 130000 took 3ms to unsubscribe last 10000 at rate: 3333333 per secunsubscribed so far 140000 took 2ms to unsubscribe last 10000 at rate: 5000000 per secunsubscribed so far 150000 took 3ms to unsubscribe last 10000 at rate: 3333333 per secunsubscribed so far 160000 took 2ms to unsubscribe last 10000 at rate: 5000000 per secunsubscribed so far 170000 took 3ms to unsubscribe last 10000 at rate: 3333333 per secunsubscribed so far 180000 took 2ms to unsubscribe last 10000 at rate: 5000000 per secunsubscribed so far 190000 took 3ms to unsubscribe last 10000 at rate: 3333333 per secunsubscribed so far 200000 took 2ms to unsubscribe last 10000 at rate: 5000000 per secunsubscribed so far 210000 took 2ms to unsubscribe last 10000 at rate: 5000000 per secunsubscribed so far 220000 took 2ms to unsubscribe last 10000 at rate: 5000000 per secunsubscribed so far 230000 took 2ms to unsubscribe last 10000 at rate: 5000000 per secunsubscribed so far 240000 took 2ms to unsubscribe last 10000 at rate: 5000000 per secunsubscribed so far 250000 took 2ms to unsubscribe last 10000 at rate: 5000000 per secunsubscribed so far 260000 took 2ms to unsubscribe last 10000 at rate: 5000000 per secunsubscribed so far 270000 took 2ms to unsubscribe last 10000 at rate: 5000000 per secunsubscribed so far 280000 took 2ms to unsubscribe last 10000 at rate: 5000000 per secunsubscribed so far 290000 took 2ms to unsubscribe last 10000 at rate: 5000000 per secunsubscribed so far 300000 took 3ms to unsubscribe last 10000 at rate: 3333333 per sec```(the numbers could be actually higher but windows timer resolution is about 3ms at best) || ive updated the code to avoid the synchronized block on each replay attempt in case the cached version of the innerproducers is still the same as the sets version || i havent reviewed the changes in detail yet but i do notice that openhashset doesnt have any dedicated unit tests || ive added a unit test for `openhashset` || strangely the test doesnt crash with java 8 must be some difference between what type for-each extracts || @akarnokd needs rebase on latest `1x` || thanks working on it || rebased || i like this a lot and the results are really impressive code looks good to me cleaner than the previous implementation too 👍 || i finally find some time to review this one sorry for the delay👍 ||
3059.0,3512,0,0,0,0,0,0,1,0,1x: fix safesubscriber documentation regarding unsubscribe the documentation was wrong in two points: unsubscription doesnt call`oncompleted` and unsubscription doesnt directly prevent delivery of `onxxx` events since the implementation doesnt even check isunsubscribed: (it is the responsibility of the upstream to do that)related issue: #3059 :+1: || :+1: ||
2835.0,3513,1,0,0,1,0,1,1,0,1x: add shorter rxjavaplugin class lookup approach this adds a new pattern and lookup method that lets the developer specify the custom plugins with shorter system property keys android is quite restrictive and allows only 31 charactersthe new pattern splits the target simple class name and its implementation into two separate system properties:```rxjavaplugin1classsimpleclassnamerxjavaplugin1implpathtoimplclass```the index tag (`1`) can be any string of your chosing:```rxjavapluginmykeyclasssimpleclassnamerxjavapluginmykeyimplpathtoimplclass```but make sure they are paired otherwise nothing will happenif there are multiple `class` entries with the same `simpleclassname` one of them will be chosen (depending on the walk order in `javautilproperties`)related issue #2835 :+1: || updated: made strings local constants and using `length`˙instead of magic numbers plus if the default keying matches the properties is not traversed for an alternate specification || an alternative pattern could be this:```rxjavaplugin1simpleclassnameorgpackagenamingactualclass``` || i agree that if the plugin cannot be found we should crash the app || updated the code to crash if the plugin implementation is missing || thanks! ||
3523.0,3524,1,0,0,0,0,0,1,0,fix subscribe() javadoc fix for javadoc issue #3523 :+1: || :+1: || :+1: || thanks! ||
3411.0,3584,1,0,0,0,0,0,1,0,clarify behaviour of groupby in javadoc as discussed in #3411 some clarification of the behaviour of `groupby` looks necessary re its behaviour when the `groupedobservable` terminates early (for example has `first()` applied to it) see also #3581i also took the liberty of recommending `ignoreelements` instead of `take(0)` for the section in the javadoc that recommends how to ignore emissions because the `take(0)` approach would have more overhead (every emission from source would prompt the emission of a new `groupedobservable`) than the `ignoreelements` approachonce this is accepted ill look to submit a pr with `groupbyonce` (mentioned in #3411) corrected the documentation that said resubscription occurs when it is rather a new groupedobservable is emittted for a group || incorporated @akarnokd suggestion || :+1: || :+1: > i also took the liberty of recommending ignoreelements instead of take(0) for the section in the javadoc that recommends how to ignore emissions because the take(0) approach would have more overhead (every emission from source would prompt the emission of a new groupedobservable) than the ignoreelements approachby the way `ignoreelements` has a drawback: it keeps all group `observable`s in memory even some of them wont emit items ||
3581.0,3584,1,0,0,0,0,0,1,0,clarify behaviour of groupby in javadoc as discussed in #3411 some clarification of the behaviour of `groupby` looks necessary re its behaviour when the `groupedobservable` terminates early (for example has `first()` applied to it) see also #3581i also took the liberty of recommending `ignoreelements` instead of `take(0)` for the section in the javadoc that recommends how to ignore emissions because the `take(0)` approach would have more overhead (every emission from source would prompt the emission of a new `groupedobservable`) than the `ignoreelements` approachonce this is accepted ill look to submit a pr with `groupbyonce` (mentioned in #3411) corrected the documentation that said resubscription occurs when it is rather a new groupedobservable is emittted for a group || incorporated @akarnokd suggestion || :+1: || :+1: > i also took the liberty of recommending ignoreelements instead of take(0) for the section in the javadoc that recommends how to ignore emissions because the take(0) approach would have more overhead (every emission from source would prompt the emission of a new groupedobservable) than the ignoreelements approachby the way `ignoreelements` has a drawback: it keeps all group `observable`s in memory even some of them wont emit items ||
3496.0,3614,1,0,0,0,0,0,1,0,1x: just() now supports backpressure (+ related fixes/changes) updated `just()` to fully support backpressurethis is a repost of #3496 due to merge and rebase problems we were waiting to hear from @benjchristensen on this one i think any news? || +1 for correctness despite my hesitance due to perf impact ||
3652.0,3655,1,0,0,0,0,1,1,1,1x: add singleonerrorresumenext(single) part of #3652 will submit a pr for `onerrorresumenext(func1 )` later @akarnokd changed to `implements singleonsubscribe`! ptal || :+1: || @zsxwing ptal :) || :+1: || :+1: ||
3660.0,3661,1,0,0,0,0,0,1,0,1x: combinelatest now supports any number of sources this pr is a backport of the 2x `combinelatest` with `null` support and lets the programmer combine more than 128 sources at once note that 2x supports manual sizing of the prefetch buffer and allows delaying the exceptions to the last moment i kept these in case such features are required by 1x some daythe original had this 128 limit due to using a single and non-parametric rxringbuffer to store values from sources in addition the original algorithm divided downstream requests among the sources with some strange logic in order to keep them running and not overflow the bufferthis pr uses an unbounded-linked spsc queue which can now hold as many elements as there are sources times the default ring buffer size (this is not preallocated and grows/shrinks as necessary)the algorithm stores the current latest array and the source subscriber in the queue in pairs so when that particular row is emitted to downstream that source subscriber gets the request() replenishment call that generated the rowin addition ive added an iterator overload from #3660 as well thanks! || :+1: ||
3002.0,3682,1,0,0,0,0,0,1,0,"1x: fix observeon resource handling add delayerror capability this pr fixes the ""messing around"" reported in #3002 and adds an overload to `observeon` that allows delaying errors without the need for wrapping (see #3542 and maybe there are other reports)in addition this pr adds a proper override of the `isempty` method to simply compare the two indexes for emptiness directly instead of `size() 0` to avoid looping multi-reading and castingbenchmark comparison (i7 4790 windows 7 x64 java 8u66):![image](https://cloudgithubusercontentcom/assets/1269832/11442154/3f4f104a-9513-11e5-9b0c-00cef5a6bb10png)note that the benchmark is generally quite noisy yielding hectic results (ie firing up a thread with newthread may take quite some random microseconds) for example `observeonimmediate` shouldnt be affected by any of the changes yet the run-to-run variance is +/- 10% im fine with the results of the benchmark :+1: ||"
3542.0,3682,1,0,0,0,0,0,1,0,"1x: fix observeon resource handling add delayerror capability this pr fixes the ""messing around"" reported in #3002 and adds an overload to `observeon` that allows delaying errors without the need for wrapping (see #3542 and maybe there are other reports)in addition this pr adds a proper override of the `isempty` method to simply compare the two indexes for emptiness directly instead of `size() 0` to avoid looping multi-reading and castingbenchmark comparison (i7 4790 windows 7 x64 java 8u66):![image](https://cloudgithubusercontentcom/assets/1269832/11442154/3f4f104a-9513-11e5-9b0c-00cef5a6bb10png)note that the benchmark is generally quite noisy yielding hectic results (ie firing up a thread with newthread may take quite some random microseconds) for example `observeonimmediate` shouldnt be affected by any of the changes yet the run-to-run variance is +/- 10% im fine with the results of the benchmark :+1: ||"
3685.0,3689,1,0,0,0,0,0,1,0,1x: unified onerrorx and onexceptionresumenext and fixed backpressure the operators didnt honor backpressure when they switched over to the other observablethis pr also includes the fix #3685 there was a test failure in backpressureteststestmergeasync run before any of the changes of this pr and shouldnt have any effect overloaded servers? || :+1: ||
359.0,3696,1,0,0,1,0,1,1,1,1x: added single execution hooks resolves #3595 would you also apply these plugin methods in single?- onsubscribestart- onsubscribereturn- onsubscribeerror- onlift || below hooks are already called (i replaced previous calls of `rxjavaobservableexecutionhook` by `rxjavasingleexecutionhook` calls)- onsubscribereturn- onsubscribeerror- onlifthowever there is problem with `onsubscribestart` this hook should be called in `onsubscribe` and `unsafesubscribe` unfortunately in `single` `onsubscribe` and `unsafesubscribe` methods get `subscriber` type as parameter instead of `singlesubscriber` i will make a commit to cover it soon || there is something wrong a bunch of single test failed || :+1: || as far i see that failing test is not related with my changes is `rxschedulerscachedthreadschedulertest > testunsubscribeforscheduler` some kind of flaky test? || more tests would be appreciated but otherwise lgtm || could you squash the commits and rebase this pr? || :+1: (after you rebase/squash the commits) || :+1: ||
3700.0,3701,1,0,0,0,0,1,1,1,1x: add completabledooncompleted and deprecate completabledooncomplete closes #3700 wait what? i thought you wanted to add `completabledooncompleted()` i see no reason to change the established naming of `observabledooncompleted()` in fact for consistency id rather prefer adding `completabledooncompleted` || that makes sense the only reason i did it this way is because on the 2x branch both [observable](https://githubcom/reactivex/rxjava/blob/2x/src/main/java/io/reactivex/observablejava#l1714) and [completable](https://githubcom/reactivex/rxjava/blob/2x/src/main/java/io/reactivex/completablejava#l1230) use `dooncomplete()` || yes those follow the reactive-streams convention and completable started out as a 2x addition in the meantime ill fix that test failure || changed `completable` instead updated tests to match || :+1: || @zach-klippenstein thanks! just updated the title :+1: || :+1: ||
3708.0,3712,1,0,0,0,0,1,1,1,"add takeuntil support in single as discussed in #3708this adds `takeuntil(observable)` and `takeuntil(single)` support in `single` it was mostly just adapting the logic from the existing `operatortakeuntil` and adjusting it for accepting a `single` and sending a `cancelattionexception` in the event of a submission from `other` prior to a terminal event in the source `single`any feedback is appreciated it this is my first time contributing an implementation to this project particularly wondering if its worth keeping both overloads or if the user should just coerce their `other` to one type or ther other also particularly looking for feedback on what information to include in the `cancellationexception` just noticed my ide swapped the wildcard imports for explicit ones let me know if i should revert that || yes please || just style issues otherwise lgtm :+1: || cc @akarnokd @artem-zinnatullin for the tests most of them are adapted from `operatortakeuntiltest` it looks like these tests have two different styles (one with `testobservable` and the other with `subject`) i reused both of them here but would we maybe want to stick with one or the other? especially with single i think some now overlapalso if we stick with one style here should we update the style in `operatortakeuntiltest` as well to match? || im not too keen on how the tests are named or what test framework objects you useplease squash your commits || squashed || :+1: || @zsxwing @stevegury any input? need another collaborator reviewmain points im wondering about:- should we only support one overload? if we support more than one should it support all three (including `completable`?)- should `takeuntil` test styles formalized looks like there are two styles right now judging by `operatortakeuntiltest`: subject-based and `testobservable`-based || :+1: yes i think it makes sense to had an override for `completable`regarding test styles i dont think its a big deal the best thing to do slowly convert all the tests to the new convention (ideally in separated commits that dont change the behavior) || > sending a cancelattionexception in the event of a submission from other prior to a terminal event in the source singlethis behavior is really confusing why not be same as observable? am i missing anything? || @akarnokd and i discussed it in #3708 `single` currently emits a `nosuchelementexception` if the stream is terminated prior to any event emission by signaling a `cancellationexception` we can at least signal to the subscriber if the error was due to `takeuntil` unsubscribing it or normal missing emissions || @hzsweers thanks for clarifying however i would expect `singletakeuntil` returns something that contains 0 or 1 item how about returning observable instead? then the semantics of `singletakeuntil` is `onnext{0 1} (oncompleted | onerror)` which is consistent with `observabletakeuntil` (`onnext{0 n} (oncompleted | onerror)`) || the operators should stay in the same type as long as they can and there are operators that simply cant behave the same as their counterpart in other reactive types if one wishes the `observabletakeuntil` behavior one can use toobservable()takeuntil() and get that behavior || > the operators should stay in the same type as long as they can and there are operators that simply cant behave the same as their counterpart in other reactive types if one wishes the observabletakeuntil behavior one can use toobservable()takeuntil() and get that behaviorif so i vote for `nosuchelementexception` as `cancellationexception` seems counterintuitive to me `cancellationexception` looks some codes cancel single (eg i call `unsubscribe` in some place) but here the error is that `singletakeuntil` returns something that is not `single` hence i would expect `nosuchelementexception` || thats fair but is there something we could do to at least indicate whether the source was just unsubscribed or actually misbehaved? i was of the impression that `onerror` was primarily for serious unexpected errors whereas this seems like not unexpected or seriousconsider the followingwith `nosuchelementexception`:``` javapublishsubject source publishsubjectcreate()publishsubject until publishsubjectcreate()sourcetake(1)tosingle() takeuntil(untiltake(1)tosingle()) subscribe( new action1 () { @override public void call(integer integer) { systemoutprintln(""success"") } } new action1 () { @override public void call(throwable throwable) { systemoutprintln(""i dont know if it was due to unsubscribing or the source is misbehaving"") } })untilonnext(1)```vs with `cancellationexception```` javapublishsubject source publishsubjectcreate()publishsubject until publishsubjectcreate()sourcetake(1)tosingle() takeuntil(untiltake(1)tosingle()) subscribe( new action1 () { @override public void call(integer integer) { systemoutprintln(""success"") } } new action1 () { @override public void call(throwable throwable) { if (throwable instanceof cancellationexception) { systemoutprintln(""it was canceled"") } else { systemoutprintln(""source didnt emit"") } } })untilonnext(1)```the example i gave in the issue is probably the best example for me we use something similar to this for lifecycle binding in android when the lifecycle ends it might unsubscribe this in the middle for a normal error we might show a generic ""an error occurred"" message in the event that its just the lifecycle ending we dont want to react that way and rather likely just want to do nothing at all or clean up resources im fine with not using `cancellationexception` but i think it would be useful to add a means of being able to differentiate between unsubscription reasons i thought about just specifying a message but felt that @akarnokds `cancellationexception` suggestion made it more clear || ill add an overload for `completable` as well and remove the old test style in the new tests here for now @stevegury just to be clear the ""new"" style would be the `subject`-based approach right? || @hzsweers i actually typed ""its a big deal"" but i was willing to say ""its **not** a big deal"" (i corrected my previous comment) i prefer the subject based approach but i am not strongly opinionated about thati still :+1: on the current implementation || > thats fair but is there something we could do to at least indicate whether the source was just unsubscribed or actually misbehaved?my point here is if singletakeuntil() returns a single that emits nothing it should be `misbehaved` rather than `unsubscribed` || i think ""cancellationexception"" is the clearer reaction here remember the problems around the observablesingle() and how it is a source of problem to find out exactly who didnt signal? here you know that if takeuntil is tripped and not some upstream machinery ends up being empty || > i think ""cancellationexception"" is the clearer reaction here remember the problems around the observablesingle() and how it is a source of problem to find out exactly who didnt signal? here you know that if takeuntil is tripped and not some upstream machinery ends up being emptywhat if we want to add other operator that may return something doesnt signal? if it also emits `cancellationexception` then we still cannot find out exactly who didnt signal so why not use `nosuchelementexception` to indicate all cases that didnt signal? || what about a subclass of `nosuchelementexception`? a `cancelednosuchelementexception` so to speak wouldnt break the downstream apis but still allows for the subscriber to differentiate || > what about a subclass of nosuchelementexception? a cancelednosuchelementexception so to speak wouldnt break the downstream apis but still allows for the subscriber to differentiatemaybe a more general question should we add special exceptions for different operators or we just use a general exception to indicate the same error? || i think people should be aware of the implications of operators they use would `compositeexception` possibly be precedent for this? || > i think people should be aware of the implications of operators they use would compositeexception possibly be precedent for this?compositeexception is fine and clear it indicates there are multiple errors thrown all classes in rxexceptions are well defined and its very easy to connect them with the bad cases i can just read the exception name and tell what my codes violate but for `cancellationexception` its hard to connect it with `takeuntil` especially people use some library that calls `takeuntil` internally in addition imo if i see `cancellationexception` my first thought is `futurecancel` is called somewhereif we can define clearly that when should throw cancellationexception/cancelednosuchelementexception(or whatever you propose) when should throw nosuchelementexception i wont be against that for now the confusing thing for me is that if a single doesnt signal i may receive cancellationexception or nosuchelementexception || im fine with either i think we could be clear in the documentation and subclassing would still allow downstream subscribers to treat it as a `nosuchelementexception` @akarnokd @stevegury thoughts? || added `takeuntil(completable)` support and standardized tests updated with a separate commit for easier reviewing let me know if you want me to squash againping @akarnokd @stevegury || :+1: || :+1: ||"
3710.0,3714,1,0,0,0,0,0,1,0,1x: add maxconcurrent parameter to concatmapeager relevant issue #3710 will you update this pr? || yes on it ! || i submitted a commit with your proposed changes sorry for the delay feel free to give me more comments/changes also i can squash if needed || :+1:dont squash this time github has now a new feature for the merge button where it offers squashing id like to test if it really squashes everything and the main just gets 1 commit || nothing critical :+1: // @akarnokd squashing on github works and it works especially great when author of the pr just commits on top of previous commits because github now remembers what code youve checked and what not and you can continue reviewing from previous point (doesnt work for me when pr is always squashed) || i have updated the pr do pr commits trigger github notifications ? (should i comment after i do an update ? ) || unfortunately no notification || 👍 ||
3711.0,3722,1,0,0,0,0,0,1,0,add maxconcurrent parameter to flatmapiterable refs #3711 should these new overloaded functions be annotated with `@beta`? the failing test (`testnomorerequestsafterunsubscribe`) seems unrelated all tests pass locally || if you could add one unit test for each method that verifies maxconcurrent is honored that would be great || while writing the test i figured you might have been right when commenting on issue #2627 if i am not mistaken all the observables created with `operatormappairconvertselector` use the same scheduler (there is no way to subscribe them to different schedulers) and thus are run sequentially and until completion would adding a scheduler parameter make sense? || there is no scheduler involved here so no || :+1: as it is now || :+1: ||
372.0,3733,1,0,0,0,1,1,1,1,avoid swallowing errors in completable instead deliver them up to the threads uncaught exception handlerfixes reactivex/rxjava#3726 what happened to `completabletest`? || @akarnokd sorry ij formatted it will clean up and push again || :+1: || just a nit about `timeout` in tests otherwise :+1: || removed timeouts || :+1: ||
3740.0,3741,1,0,0,0,0,1,1,1,add doonsubscribe for single ref #3740i didnt write much unit tests for `doonsubscribe` because it internally uses `operatordoonsubscribe` which is well covered :+1: || :+1: || :+1: || thanks @aaronhe42! ||
3732.0,3752,1,0,0,0,0,1,1,1,1x: singleusing() this pr adds the factory method `using()` +1 overload to `single` as requested in #3732for convenience ive also added `singlesubscribe(observer)` :+1: || lgtm:+1: ||
3616.0,3756,1,0,0,0,0,0,1,0,1x: clarify join/groupjoin no ordering guarantees original issue: #3616 :+1: || :+1: || :+1: ||
3440.0,3766,1,0,0,0,0,1,1,1,1x: add singleonerrorresumenext(func) closes #3440 closes #3731 closes #3472 (whoa 3 issues at a time!) @akarnokd fixed your comments btw should i add `@experimental` to these operators? || yes and copy over the experimental and since tags into the javadoc || :+1: there is this new like option but do you get a notification for them? || noon mon mar 14 2016 8:10 pm david karnok notifications@githubcom wrote:> [image: :+1:] there is this new like option but do you get a notification> for them?> > —> you are receiving this because you are subscribed to this thread> > reply to this email directly or view it on github:> https://githubcom/reactivex/rxjava/pull/3766#issuecomment-196578174 || :+1: || :+1: ||
3472.0,3766,1,0,0,0,0,1,1,1,1x: add singleonerrorresumenext(func) closes #3440 closes #3731 closes #3472 (whoa 3 issues at a time!) @akarnokd fixed your comments btw should i add `@experimental` to these operators? || yes and copy over the experimental and since tags into the javadoc || :+1: there is this new like option but do you get a notification for them? || noon mon mar 14 2016 8:10 pm david karnok notifications@githubcom wrote:> [image: :+1:] there is this new like option but do you get a notification> for them?> > —> you are receiving this because you are subscribed to this thread> > reply to this email directly or view it on github:> https://githubcom/reactivex/rxjava/pull/3766#issuecomment-196578174 || :+1: || :+1: ||
3731.0,3766,1,0,0,0,0,1,1,1,1x: add singleonerrorresumenext(func) closes #3440 closes #3731 closes #3472 (whoa 3 issues at a time!) @akarnokd fixed your comments btw should i add `@experimental` to these operators? || yes and copy over the experimental and since tags into the javadoc || :+1: there is this new like option but do you get a notification for them? || noon mon mar 14 2016 8:10 pm david karnok notifications@githubcom wrote:> [image: :+1:] there is this new like option but do you get a notification> for them?> > —> you are receiving this because you are subscribed to this thread> > reply to this email directly or view it on github:> https://githubcom/reactivex/rxjava/pull/3766#issuecomment-196578174 || :+1: || :+1: ||
3751.0,3777,1,0,0,0,0,0,1,0,observeon: allow configurable buffer size the observeon operator is backed by a small queue of 128 slots that mayoverflow quickly on slow producers this could only be avoided byadding a backpressure operator before the observeon (not onlyinconvenient but also taking a perf hit as it forces hops between twoqueues)this patch allows modifying the default queue size on the observeonoperatorfixes: #3751signed-off-by: galo navarro anglorvaroa@gmailcom :+1: || :+1: though id leave old test for default buffer size and just add a new one || rebased fixed the javadoc link and a spelling mistake@artem-zinnatullin i reused this one to avoid redundancy as the code path is virtually the same and there are tests (the ones referenced in the @link) which use the default size let me know if you still prefer the 2 cases and ill fix that || yeah i understand just afraid that one may change linked tests and we wont cover overload // one day well setup code coverage i hope || agh thanks @akarnokd i didnt notice i changed computers so i was back on the 1st patch and lost the overload resubmitted based on the one with all overloads and added the extra test instead of rewriting it hopefully fine now || :+1: || ive seen some failures on the test locally and there is also a bug in the test (the loop should start at 2 not 1) i cant look into it right now but will take a look asap || :+1: || im merging this the changes are algorithmically solid so im not sure what failures you see locally || thanks @akarnokd the failure was no error notifications emitted at random sizes but i did notice travis didnt complain ping me if it surfaces ||
3775.0,3787,0,0,0,0,0,1,1,0,1x: fix groupby delaying group completion till all groups were emitted in 111 `groupby` was fixed to properly honor backpressure on the outer `observable` the change included a drain loop that emitted `oncompleted()` to the groups only when all `groupedobservable`s were drained from the main queue this delayed the groups completion unnecessarily causing the `concat` operator to hang in some source-consumer cases such as #3775this pr fixes the behavior by signalling `oncompleted()` to the groups the moment the main completes note however that concatenating groups is eventually prone to hangs due to the groups not completing until the source completes thus `concat` cant switch to the next source one should use `flatmap` or `concatmapeager` instead :+1: || :+1: ||
3784.0,3789,1,0,0,0,0,1,1,1,1x: prevent singlezip() of zero singles closes #3784 :+1: || :+1: ||
3161.0,3790,1,0,0,0,0,0,1,0,1x: expose singlelift() closes #3161 :+1: || :+1: ||
3749.0,3822,1,0,0,1,0,0,1,0,1x: make defensive copy of the properties in rxjavaplugins possible solution to #3749 :+1: ||
3724.0,3856,1,0,0,0,0,0,1,0,"provide factories for creating the default scheduler instances unlike other hooks the `rxjavaschedulershook` has no access to the real `scheduler` instances in order to do wrapping/delegation with these factory methods a hook can access what would otherwise be the instance used since there is often no other means of creating these specialized schedulersfor android this wrapping/delegation use-case is important for ui testing we have a means to tell the testing framework when the app is idle and to do that we need to hook into the schedulers to know when theyre empty this is easy to do currently but you cannot wrap the real instance and instead have to supply alternate implementations which might subtly alter the behavior under testthese three methods are referenced in #3724 and i think providing the defaults is useful as well as eventually adding overloads which take `threadfactory` instances for each please correct me if im wrong but looks like as soon as you access one of the new methods `static final schedulersinstance` will be instantiated which will make impossible to use `rxjavaschedulershook` as you described have you checked described use case? maybe add such tests as example if possible?> we have a means to tell the testing framework when the app is idle and to do that we need to hook into the schedulers to know when theyre emptyjust wanted to say for those who may find this pr later: empty/non-empty state of schedulers is not 100% source of truth for ui tests you may have some background or time related (periodic/etc) code that does not affect the ui directly and may even freeze tests || you are accessing the methods from the hook which was called from the static initializer of this class on first reference to `schedulersio()` or the like ill add a test || yup but there is still potential problem if somebody will try to create schedulers using these methods outside of the hook for example in `@beforeclass`/etc or probably even just for non-test needs -> may result in hours of trying to understand why hook is not overriding schedulers…maybe move these methods to `rxjavaschedulershook`? || that prevents package scoped methods from being used in the factory || > that prevents package scoped methods from being used in the factorywe can move schedulers to `internalschedulers` to ""defend"" from that (otherwise somebody can always use reflection to break package scope) and make constructors publicideal solution would be to return schedulers in `rxjavaschedulershook` by default instead of returning `null` like it does now so calling `supergetsomescheduler()` will give original instance that you can wrap/etc as you wish though well have to handle `null` as default too// sorry im very tired and want to sleep so i may come to wrong conclusions || the factories were moved to the hook || :+1: || :+1: now but let me ask again what about this:> ideal solution would be to return schedulers in `rxjavaschedulershook` by default instead of returning `null` like it does now so calling `supergetsomescheduler()` will give original instance that you can wrap/etc as you wish though well have to handle `null` as default toono need for new methods no need to fight with instantiation order and package scope visibility yes user wont be able to instantiate new scheduler of required type outside of the hook but its not possible at the moment so nobody loses nothing || 👍 ||"
3865.0,3866,1,0,0,0,0,1,1,1,1x: add singletocompletable() closes #3865 :+1: || 👍 || seems github doesnt add the pr description to the commit message automatically when squashing a pr i added it manually ||
3724.0,3879,1,0,0,0,0,1,1,0,expose scheduler factories which accept thread factories this allows hooks to create schedulers whose threads have different prioritiescloses #3724 👍 || thanks!on fri apr 29 2016 at 2:13 pm david karnok notifications@githubcomwrote:> merged #3879 https://githubcom/reactivex/rxjava/pull/3879> > —> you are receiving this because you authored the thread> reply to this email directly or view it on github> https://githubcom/reactivex/rxjava/pull/3879#event-646033852 ||
3881.0,3883,1,0,0,0,0,1,1,0,1x: fix multiple chained singledoafterterminate not calling actions resolves #3881the bug is caused by the impedance mismatch between `observable`s `subscriber` and `single`s `singlesubscriber` the original code called `onnext()` which immediately signalled an `onsuccess` but also caused an unsubscription preventing a delivery of `oncompleted()` in the inner singlethe fix keeps `onsuccess`/`onerror` rails intact throughout the chain 👍 ||
388.0,3886,1,0,0,0,0,1,1,0,throwiffatal() now throws oncompletedfailedexception otherwise if theres an error in oncompleted the exception isswallowed and unreportedfixes #3885 :+1: || 👍 ||
387.0,3907,1,0,0,0,0,0,1,0,1x: doonunsubscribe javadoc clarifications see #3877 👍 ||
3940.0,3941,1,0,0,0,0,1,1,1,1x: fix singleflatmap not composing subscription through see #3940 👍 || :+1: ||
3938.0,3942,1,0,0,1,0,0,1,0,1x: add completablesafesubscribe option + rxjavaplugins hook support add option to safely subscribe a `completablesubscriber` / regular `subscriber` and handle `onxxx` failuressee also: #3938naming and whether or not the safe wrapping should be the default is open to discussion in my opinion safe wrapping should be the default as its the default in `observable` and `single` at least the 3 should behave the same way when using them one should expect them to have a difference in their essential semantics and not in these kind of things || should the tests about error handling plugin in #3938 be here? or we leave it in that pr? || @bryant1410 your pr has a test failure:```rxpluginsrxjavapluginstest > testonerrorwhenusingcompletable failed javalangassertionerror: expected: but was: at orgjunitassertfail(assertjava:93) at orgjunitassertfailnotequals(assertjava:647) at orgjunitassertassertequals(assertjava:128) at orgjunitassertassertequals(assertjava:147) at rxpluginsrxjavapluginstesttestonerrorwhenusingcompletable(rxjavapluginstestjava:314)``` || fixed typo renamed methods || @akarnokd they fail on purpose because i made the test but didnt fix the problem (completable is not calling the error handling plugin) || the methods should be the other way around following `single` and `observable` there should be a single `unsafesubscribe` method which accepts a parameter of type `completablesubscriber` and `subscribe` should be present in the following ways: `subscribe()` `subscribe(action0)` `subscribe(action1 action0)` `subscribe(subscriber)` and `subscribe(completablesubscriber)` || the `subscribe()` methods wrap with `safecomletablesubscriber` similar to how observablesubscribe wraps with `safesubscriber` subscribe(subscriber) is there to allow conversion and cross-type apis to bypass the safety overhead || updated with plugin support || can you cherry-pick the [commit that adds tests for the error handling plugn in `completable` and `single`](https://githubcom/bryant1410/rxjava/commit/4cc57dcce8603496136d1e24173ce5ff36b7715b) from #3938? || sure || done || the comment `// todo plugin wrapping onsubscribe` in `completable#create` can be deleted as the constructor is already calling the hook now || removed comment changed to reuse methods added onstart call || please add the missing `@experimental` otherwise 👍 || added missing annotations || 👍 ||
3947.0,3948,1,0,0,0,0,1,1,1,add completableandthen(completable) deprecate endwith() see #3947 please update unit tests that use these deprecated methods || done || :+1: || 👍 but id either duplicate tests or make universal test functions and test both `endwith` and `andthen` to make sure that we dont break old behavior of public api || the question is also since completable is still `@experimental` we could if this is wanted go the hard way and remove the deprecated methods and make everyone force to use the standard (new) methods since there are already quite a few deprecated / duplicated methods || 👍 > but id either duplicate tests or make universal test functions and test both endwith and andthen to make sure that we dont break old behavior of public api@artem-zinnatullin im not against it but this is really minor as `andthen` just calls `endwith` im going to merge this feel free to add tests in a separate pr if you wish ||
3779.0,3966,1,0,0,0,0,0,1,0,1x: add multi-other withlatestfrom operators add `withlatestfrom` operator version that can take 2 to n other sources and combine them with the main sourcerelated: #3779 👍 ||
3964.0,3971,1,0,0,0,0,0,1,0,1x: request rebatch operator this is a follow-up on #3964 but with a separate operator on `observable` 👍 || @abersnaze @stealthcode you had some use cases for this any objections? || the reuse of the observeon is interesting but couldnt it be done without the allocation of a queue? || if the downstream request is unbounded and the downstream has caught up then the queue can be skipped in this case `observeon` cant be reused anymore and a custom drain logic has to be implementedotherwise the upstream emissions have to be stored temporarily for an underrequesting downstream || 👍 || i know that @abersnaze still had reservations about this i think that this should not be using `observeon` || my concern is this - if @abersnaze implemented the batching functionality then why wouldnt we use that? the queue in observeon scheduling creates a layer of indirection that seems unnecessary || remember this started out as a change to `observeon` to not ignore the `immediate` scheduler but people wanted this behavior exposed behind a proper name || thanks for reminding me of the context of this work it seems like we have 2 implementations for the same functionality i think @abersnaze and i agree that the 2 features of request batching and request valve type functionality could be composed however i think that using `observeon` for this functionality is not necessarily the best way to accomplish this || i personally would be okay with either implementation i think `observeon` is a nice choice because of the request management but would prefer it more if there wasnt a queue but realistically i think the choice is fine also its interesting to note that users are gravitating more and more to taking direct control over the `requester-producer` interactions || for example this pr does something similar but exactly n (could be modified to have optional 25%) and without a queue #3781 ||
3576.0,3974,1,0,0,0,0,0,1,0,1x: add terminal clarification to switchmap operators see #3576 👍 ||
3679.0,3977,1,0,0,0,0,1,1,0,1x: use the correct throwable to set the cause for compositeexception the cause of #3679 is we use a wrong throwable (its cause has been set) to set the cause and `initcause` will throw an exception hence the cause chain is not created correctly in this pr it searches the root cause (which doesnt have a cause) and use it to call `initcause` :+1: || 👍 ||
3124.0,3981,1,0,0,0,0,0,1,0,1x: document zip() eagerness see #3960 and #3124 👍 || 👍 ||
3960.0,3981,1,0,0,0,0,0,1,0,1x: document zip() eagerness see #3960 and #3124 👍 || 👍 ||
3985.0,3986,1,0,0,0,0,0,1,0,"add schedulersreset() for better testing resolves #3985this adds a `reset()` method to `schedulers` with the main benefit being improved testing support this does slightly tweak the internal api of `schedulers` to use a `getinstance()` approach to allow lazy init this way we dont have to replace the singleton instance during `reset()` and allow it to lazily re-evaluate upon next usage otherwise if you change your scheduler hook youd always have to make sure you set it before you call `schedulersreset()`will run perf tests overnight in case im not sure how much of a tradeoff moving to an internal `getinstance()` approach costs if anythingcc @zsxwing i think the failing test might be flaky it doesnt fail for me locally || :+1: || thanks! i dont suppose this could be squeezed into the `requires review` of #3970 could it? || that test doesnt fail for me locally im not really sure what do do about it any ideas? || ive extended the timeout in some tests in pr #3987 once it appears it was enough ill merge that and this pr should work || cool ill rebase after thats merged then 👍 || non need to rebase but to rerun the travis job did it for you || ah i pushed the rebase as you commented oh well ¯\_(ツ)_/¯ || cool looks like the timeout tweaks worked || code is ok so 👍 but> resetting the schedulers is dangerous> during application runtime and also bad code could invoke it in> the middle of an application life-cycle and really break applications> if not used cautiouslywhy were adding more and more apis to break things and allow people use bad practices? || its two and theyre largely targeted at testing i dont think having a reset is bad practice and like most code only breaks things if you make poor decisions with it i could just as easily add a bad scheduling hook or buggy global error handlerhaving to otherwise use di to inject schedulers everywhere gets tedious fast and inadvertantly discourages people from actually using the conventional static apis with this it can be wrapped up in a nice test rule and enforces a clean state before and after tests using the plugins api also allows you to control the schedulers used across modules and 3rd party libraries as wellfor me its a missing and much needed api i dont think requiring di everywhere you use a scheduler just to test is a scalable approach considering how ubiquitous they are could you imagine injecting say `timber` everywhere you wanted to use it?thats my speel for why i think this is useful || i wonder why people with such testing needs dont roll their own global ""myschedulers"" class which lets them easily switch scheduler types and use that like `observeon(myschedulersforcomputation())` of course this means you have to remember to use the `scheduler`-overloaded operators everywhere || i also just copied that doc from the other reset i dont know that its as dangerous though it just forces a re-init if its dangerous its because resetting rx plugins is dangerous since theyre not explicitly bound i wouldnt mind making the doc warning a little less severe? :p || 3rd party libraries dont use your apps global class :/ plus that case still requires you to hook in a delegate scheduler in tests early enough were adding a global scheduler of sorts for background work and still planning to have a reset on the schedulers || libraries should expose the option to customize the `scheduler` they run on do you know a library that doesnt allow such customization? || most actually they just use the built-in schedulerswhatever() or androidschedulersmainthread() i dont see how a wrapper with static methods solves this either you still need some mechanism of resetting the underlying scheduleris there any harm in allowing reset here to facilitate just having developers go through the standard api? || but heres a quick example off the top of my head: https://githubcom/mcharmas/android-reactivelocation || otherwise i think the whole plugin system in rxjava 1x is getting cumbersome in 2x i did a much simpler and direct approach for overriding stufffor example this is how the schedulers get initialized:https://githubcom/reactivex/rxjava/blob/2x/src/main/java/io/reactivex/schedulers/schedulersjava#l47this is where they are returned:https://githubcom/reactivex/rxjava/blob/2x/src/main/java/io/reactivex/schedulers/schedulersjava#l57changing what scheduler is returned from schedulers is easy viahttps://githubcom/reactivex/rxjava/blob/2x/src/main/java/io/reactivex/plugins/rxjavapluginsjava#l305by adding a function that can wrap or completely replace the scheduleri dont know if netflix wants 12 at all but if so id be glad to rewrite the plugin system || > but heres a quick example off the top of my head: https://githubcom/mcharmas/android-reactivelocationbut where does it use rxjava schedulers forcefully? || found one: [reversegeocodeobservablejava](https://githubcom/mcharmas/android-reactivelocation/blob/a82d0ebfc0ccd1acf9667ef82bd2beb2630d41da/android-reactive-location/src/main/java/pl/charmas/android/reactivelocation/observables/geocode/reversegeocodeobservablejava)they should have provided a way to customize that scheduler anyway || 100% agreed with david that should be the direction rxjava should go to:teach users how to do either di for schedulers or own myschedulers classwith resetting api and teach library developers to accept schedulers fromuserotherwise well stuck in a loop like this where were adding one api thataffects different parts of the library and then we need to add another apito ""fix"" problems of previous oneon fri 3 jun 2016 15:35 david karnok notifications@githubcom wrote:> libraries should expose the option to customize the scheduler they run> on do you know a library that doesnt allow such customization?> > —> you are receiving this because you commented> > reply to this email directly view it on github> https://githubcom/reactivex/rxjava/pull/3986#issuecomment-223567232> or mute the thread> https://githubcom/notifications/unsubscribe/aa7b3iwb3bpqqz2qwzwylstczg7flv4nks5qib-igajpzm4itocb> || not disagreeing that it would be preferable for libraries to expose a way but in practice ive seen that most do notthe 2x plugin approach looks nice though the lockdown bit seems like it imposed the same restrictions that 1x plugins have i dont know what the 12 plans are but between having something like this now and waiting for a 12 or 2x release id much rather have a necessary evil now with an eye toward the future i dont really subscribe to the slippery slope worry considering this is part of what the last one was supposed to help improveits not a matter of people not understanding di its that di is not a scalable solution for this its unnecessary tedium and boilerplate why even have the static api at all if its not going to be used? are you going to add di to rx util libraries?between getting all library developers to update waiting for 2x rewriting the plugin system or doing this in a safe way now and banking on 2x long term id rather have the last option it works for all cases now and has fairly minimal impact/safety concerns || well let me know what you guys want to do i feel like this is breaking down over the current plugins api which we all agree is not perfect the way i see it any ""`myplugins`"" approach would still face the same issue in that youd need to implement some way of internally delegating to me this is a reasonable short-term solution for right now considering 12 and 2x are far off and i think the framework should facilitate use of whatever patterns developers prefer rather than impose them would you be agreeable to doing this for now with the long term goal being to revamp the plugins api in the future?ive updated the doc as well since its actually not that dangerous and only causes behavioral changes if the plugin hook has changed (which _is_ already documented as such) || also @zsxwing seemed in favor of this change in the issue do you want to maybe chime in here? || while i do agree with artem/david that a better long term solution here would be to pass in scheduler objects where needed (setting things up for di where developers choose it - the scalability of di isnt the question here) rather than relying on static methods to get them this pr seems like the best way forward for how things currently work in rx there has been lots of discussion elsewhere about how replacing a scheduler for testing is very painful if you make use of the standard schedulers static methods to get your scheduler instances and the reset methods for the plugin hook only work halfway because of the current static caching behavior because the current reset-for-testing functionality is fundamentally broken i strongly recommend accepting this pr to fix it and take this discussion into account for the design of upcoming versions of plugins or developer usage recommendations || > because the current reset-for-testing functionality is fundamentally broken i strongly recommend accepting this pr to fix itagreed this pr is pretty useful for unit tests 👍 for merging this one || may sound crazy but what about marking `reset()` as `@deprecated` with explanation of better ways? || i think `@experimental` with a doc explaining that the api will be revamped in the future would make more sense i dont have strong feelings for or against `@deprecated` though and can switch to that if others want anything to help move this pr along :) || `@deprecated` will produce compile warning and will be visible in ide pretty sure most of the people who will use `schedulersreset()` will copy-paste from so or some blog post which will arrive as soon as we merge/release this and wont even know that its `@experimental`// im not blocking pr if that matters || fair point @akarnokd any thoughts? it seems like this has the requisite 👍s to move forward can add deprecated if you think its worthwhile || do we really expect people to accidentally use this and be surprised?deprecating the method sounds like it punishes those who want to use itid deprecate create() and others long before this methodon mon jun 6 2016 5:19 pm zac sweers notifications@githubcom wrote:> fair point @akarnokd https://githubcom/akarnokd any thoughts? it> seems like this has the requisite 👍s to move forward can add> deprecated if you think its worthwhile> > —> you are receiving this because you are subscribed to this thread> reply to this email directly view it on github> https://githubcom/reactivex/rxjava/pull/3986#issuecomment-224091875> or mute the thread> https://githubcom/notifications/unsubscribe/aaeeeahh6igqbi7kuzyagrnavxgcekqwks5qji7wgajpzm4itocb> || when you put it that way i think i agree || dont deprecate it || > do we really expect people to accidentally use this and be surprised?have seen/helped people asking how to solve problems after applying scheduler hooks for testing they didnt realize (mostly) how it can break things`create()` is local evil it doesnt break global state alternative solution would be to move apis like `create()` `reset()` and so on to `rxunsafe` like java rust and so on its there but use it at your own risk ||"
3993.0,3996,1,0,0,0,0,0,1,0,1x: fix reset() shutting down everything other than the schedulers the reset shut down all the main schedulers and the helper pools causing the failure in #3993 @hzsweers you were right with the need for the instance-shutdown method minor nit rest of the code looks good 👍 nice catch sorry for the inadvertent bug and glad it was a relatively simple fix || 👍 || 👍 ||
3721.0,4024,1,0,0,0,0,0,1,0,1x: update dooneach(observer) javadoc fixes the documentation problem reported in #3721 nice improvement :+1: ||
3007.0,4026,1,0,0,0,0,0,1,0,1x: expand and explain cache() in more detail this pr rephrases the `cache` documentation a bit and adds workaround for stopping and forgetting the cached valuesrelated: #3007 👍 this obviously isnt related to that but `testreplaysubjectconcurrentsubscriptions` failed in ci || thanks will look into it before merging this could be a bug due a pattern they share || nothing obvious so far the test passes for me locally when run 1000 times will investigate it further through #4028 ||
4001.0,4034,1,0,0,0,0,0,1,0,1x: distinctuntilchanged with direct value comparator - alternative alternative implementation to #4001 lgtm :+1: || thanks jake for the review! || 👍 ||
4035.0,4036,1,0,0,0,0,0,1,0,1x: added zip function with observable array as discussed in #4035 with @akarnokd thanks! almost forgot please also add a unit test that verifies this overload works with 0 1 or a couple of sources (you can add a unit test that for example loops from 0 to 31 generates an array with that many simple sources and checks if all source values actually zipped into the final value) || @akarnokd sorry for the delay i just added tests for 0 1 and multiple array sizes let me know if thats ok || :+1: || 👍 ||
4028.0,4051,1,0,0,1,0,1,1,0,1x: fix replaysubject anomaly around caughtup by removing that optimization adding the backpressure support to `replaysubject` exposed a race condition around the `caughtup` optimizationthe problem occurs when the source thread has caught up after `drain()` returned true but at the same time a concurrent `drain()` starts running (due to a subscribe() process finishing or requesting on top of the previous `longmax_value`) this concurrent drain may think the replay hasnt started yet (by finding `rpnode` null) or seeing that the buffer has more elements (that may get double emitted)the current solution is to remove this optimization until we come up with a correct optimizationrelated: #4028 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4051?srcpr) is **8049%**> merging [#4051](https://codecovio/gh/reactivex/rxjava/pull/4051?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **011%**``` diff@@ 1x #4051 diff @@ files 253 253 lines 16478 16469 -9 methods 0 0 messages 0 0 branches 2500 2491 -9 + hits 13244 13256 +12 + misses 2341 2331 -10 + partials 893 882 -11 ```> powered by [codecov](https://codecovio?srcpr) last updated by [535fb75788f3bd](https://codecovio/gh/reactivex/rxjava/compare/535fb75901bda3ba26edf5c79b0cbfef7a05580b788f3bd94a7756187ec32a870b6900d6c784454f) ||
4052.0,4053,1,0,0,1,0,0,1,0,2x: convert schedulersupport annotation to accept a string value closes #4052 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4053?srcpr) is **6958%**> merging [#4053](https://codecovio/gh/reactivex/rxjava/pull/4053?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **014%**``` diff@@ 2x #4053 diff @@ files 386 385 -1 lines 27579 27571 -8 methods 0 0 messages 0 0 branches 4476 4476 + hits 19151 19186 +35 + misses 6424 6381 -43 partials 2004 2004 ```> powered by [codecov](https://codecovio?srcpr) last updated by [113eeeb90dc0e6](https://codecovio/gh/reactivex/rxjava/compare/113eeeb2c3e732fce96945304b8a3e27cc3ea7cc90dc0e64f68c924870cc6bac9995405664b85c72) || i meant to include in the pr description that i removed the `single` value it was unused and the javadoc didnt make it clear as to what the exact usage would be anyway || no problem can be added later if necessary although `singlescheduler` is not (planned to be) a default for any operators right now ||
3959.0,4063,1,0,0,0,0,0,1,0,1x: scan & reduce give javadoc about unsharing the initialvalue replacement for #3959 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4063?srcpr) is **8052%**> merging [#4063](https://codecovio/gh/reactivex/rxjava/pull/4063?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will decrease coverage by **003%**``` diff@@ 1x #4063 diff @@ files 254 254 lines 16538 16538 methods 0 0 messages 0 0 branches 2510 2510 - hits 13323 13317 -6 - misses 2329 2334 +5 - partials 886 887 +1 ```> powered by [codecov](https://codecovio?srcpr) last updated by [54eeaca1374d68](https://codecovio/gh/reactivex/rxjava/compare/54eeaca04c8b36785971a9a573cb4c185ab0c9741374d68edd24b8d46d157637aa2843ae64ac714d) || merging this to not get in conflict with other prs targeting `observable` ||
4056.0,4069,1,0,0,1,0,1,1,1,remove second type parameter from subject and flowprocessor closes #4056 :+1: ||
4057.0,4070,1,0,0,0,0,1,1,1,2x: merge serialdisposable and multipleassignmentdisposable closes #4057 although doesnt address the name of the class ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4070?srcpr) is **6983%**> merging [#4070](https://codecovio/gh/reactivex/rxjava/pull/4070?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **002%**``` diff@@ 2x #4070 diff @@ files 384 383 -1 lines 27143 27133 -10 methods 0 0 messages 0 0 branches 4354 4354 - hits 18963 18948 -15 - misses 6255 6267 +12 + partials 1925 1918 -7 ```> powered by [codecov](https://codecovio?srcpr) last updated by [4925f6d607321d](https://codecovio/gh/reactivex/rxjava/compare/4925f6d601fc093c4f9031e2d7ce673c00af2512607321dc505bdfd9cfc7412074717e4aa2ecb8b6) || excellent :+1:> although doesnt address the name of the classno problem ||
4075.0,4102,1,0,0,1,0,1,1,1,"2x: expose isdisposed method on disposable this is a fairly ""dumb"" addition theres lots of room for follow-up improvement in the utilization of base helper classes and even removing some now-duplicated state managementcloses #4075 there are a bunch of compilation errors: https://travis-ciorg/reactivex/rxjava/builds/139948754#l315 || probably missing imports i have to edit those by hand in each file so thediffs dont go wildon fri jun 24 2016 at 2:59 am david karnok notifications@githubcomwrote:> there are a bunch of compilation errors:> https://travis-ciorg/reactivex/rxjava/builds/139948754#l315> > —> you are receiving this because you authored the thread> reply to this email directly view it on github> https://githubcom/reactivex/rxjava/pull/4102#issuecomment-228272271> or mute the thread> https://githubcom/notifications/unsubscribe/aaeeeulxqkqjhxurrfw6ao9w2klvogbdks5qo4bdgajpzm4i9er1> || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4102?srcpr) is **6985%**> merging [#4102](https://codecovio/gh/reactivex/rxjava/pull/4102?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **028%**``` diff@@ 2x #4102 diff @@ files 380 380 lines 26985 27087 +102 methods 0 0 messages 0 0 branches 4331 4356 +25 - hits 18928 18921 -7 - misses 6144 6252 +108 - partials 1913 1914 +1 ```> powered by [codecov](https://codecovio?srcpr) last updated by [7ffed1b9abd7a6](https://codecovio/gh/reactivex/rxjava/compare/7ffed1b36a184242830f58d66e683bc4664eb75e9abd7a6ac2f4b6105414696fdd86a5a6d8de72e5) || :+1: thanks ||"
405.0,4139,1,0,0,1,0,1,1,1,2x: fix flaky tests this pr should fix some test timing out otherwise sensitive to thread hiccups#4138#4109#4054 :+1: || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4139?srcpr) is **6920%**> merging [#4139](https://codecovio/gh/reactivex/rxjava/pull/4139?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **001%**``` diff@@ 2x #4139 diff @@ files 386 386 lines 27277 27277 methods 0 0 messages 0 0 branches 4410 4410 - hits 18879 18876 -3 misses 6508 6508 - partials 1890 1893 +3 ```> powered by [codecov](https://codecovio?srcpr) last updated by [13df09beb8242a](https://codecovio/gh/reactivex/rxjava/compare/13df09b14d97820d5becb6d9ceacfeff5091a8e3eb8242a44298bfafb62118b075f91f390431f6f9) ||
4109.0,4139,1,0,0,1,0,1,1,1,2x: fix flaky tests this pr should fix some test timing out otherwise sensitive to thread hiccups#4138#4109#4054 :+1: || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4139?srcpr) is **6920%**> merging [#4139](https://codecovio/gh/reactivex/rxjava/pull/4139?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **001%**``` diff@@ 2x #4139 diff @@ files 386 386 lines 27277 27277 methods 0 0 messages 0 0 branches 4410 4410 - hits 18879 18876 -3 misses 6508 6508 - partials 1890 1893 +3 ```> powered by [codecov](https://codecovio?srcpr) last updated by [13df09beb8242a](https://codecovio/gh/reactivex/rxjava/compare/13df09b14d97820d5becb6d9ceacfeff5091a8e3eb8242a44298bfafb62118b075f91f390431f6f9) ||
4138.0,4139,1,0,0,1,0,1,1,1,2x: fix flaky tests this pr should fix some test timing out otherwise sensitive to thread hiccups#4138#4109#4054 :+1: || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4139?srcpr) is **6920%**> merging [#4139](https://codecovio/gh/reactivex/rxjava/pull/4139?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **001%**``` diff@@ 2x #4139 diff @@ files 386 386 lines 27277 27277 methods 0 0 messages 0 0 branches 4410 4410 - hits 18879 18876 -3 misses 6508 6508 - partials 1890 1893 +3 ```> powered by [codecov](https://codecovio?srcpr) last updated by [13df09beb8242a](https://codecovio/gh/reactivex/rxjava/compare/13df09b14d97820d5becb6d9ceacfeff5091a8e3eb8242a44298bfafb62118b075f91f390431f6f9) ||
3851.0,4140,1,0,0,0,0,1,1,1,1x: change completablesubscribe(onerror oncomplete) to (oncomplete onerror) closes #3851 closes #4137 actually i can deprecate old one and add new one as overload it will have less impact on user code because only calls like `subscribe(actionsempty() actionsempty())` will be ambiguous to the compilerthoughts? || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4140?srcpr) is **8133%**> merging [#4140](https://codecovio/gh/reactivex/rxjava/pull/4140?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **004%**``` diff@@ 1x #4140 diff @@ files 257 257 lines 16811 16811 methods 0 0 messages 0 0 branches 2547 2547 + hits 13666 13673 +7 + misses 2243 2238 -5 + partials 902 900 -2 ```> powered by [codecov](https://codecovio?srcpr) last updated by [5c7475755723da](https://codecovio/gh/reactivex/rxjava/compare/5c747577e910b5eda657bc9f825914965fb2f1c455723da4b83365611d103a5e0971a198fcafbea1) || :+1: || dynamic languages have trouble with the two methods lets only have 1 method || 👍 ||
4137.0,4140,1,0,0,0,0,1,1,1,1x: change completablesubscribe(onerror oncomplete) to (oncomplete onerror) closes #3851 closes #4137 actually i can deprecate old one and add new one as overload it will have less impact on user code because only calls like `subscribe(actionsempty() actionsempty())` will be ambiguous to the compilerthoughts? || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4140?srcpr) is **8133%**> merging [#4140](https://codecovio/gh/reactivex/rxjava/pull/4140?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **004%**``` diff@@ 1x #4140 diff @@ files 257 257 lines 16811 16811 methods 0 0 messages 0 0 branches 2547 2547 + hits 13666 13673 +7 + misses 2243 2238 -5 + partials 902 900 -2 ```> powered by [codecov](https://codecovio?srcpr) last updated by [5c7475755723da](https://codecovio/gh/reactivex/rxjava/compare/5c747577e910b5eda657bc9f825914965fb2f1c455723da4b83365611d103a5e0971a198fcafbea1) || :+1: || dynamic languages have trouble with the two methods lets only have 1 method || 👍 ||
4115.0,4154,1,0,0,0,0,1,1,0,"ability to create custom schedulers with behavior based on composing operators based on #4115allows the use of operators for controlling the timing around when actions scheduled on workers are actually done this makes it possible to layer additional behavior on an existing `scheduler` the main parameter is a function that flattens an `observable ` into just one `completable` there must be a chain of operators connecting the returned value to the source observable otherwise any work scheduled on the scheduler will not be executedwhen `schedulercreateworker()` is invoked a `completable` is onnextd to the combinator to be flattened if the `completable` is not immediately subscribed to an calls to `workerschedule()` are buffered once the `completable` is subscribed to actions are then scheduled on the actual scheduler when the `worker` is unsubscribed the `completable` emits an oncomplete and triggers any behavior in the flattening operator the `observable ` and all `completable`s give to the flattening function never onerrorslowing down the rate to no more than than 1 a second``` java scheduler slowsched new schedulewhen(workers -> { // use concatenate to make each worker happen one at a time return completableconcat(workersmap(worker -> { // delay the starting of the next worker by 1 second return workerdelay(1 timeunitseconds) })) } schedulerscomputation())```limit the amount concurrency two at a time without creating a new fix size thread pool:``` java scheduler limitsched new schedulewhen(workers -> { // use merge max concurrent to two at a time return completablemerge(workers 2) } schedulerscomputation())``` this test changes its timing pattern when run on one of the merging-customization of this scheduler:``` java@testpublic void fasttasks() { final scheduler sched new schedulewhen(new func1 completable>() { @override public completable call(observable workers) { return completablemerge(workers 2) } } schedulerscomputation()) observablerange(1 4)flatmap(new func1 >() { @override public observable call(final integer v) { return observableinterval(500 timeunitmilliseconds sched) take(10)map(new func1 () { @override public string call(long u) { return v + "" refresh "" + u } }) } } ) timeinterval() toblocking() subscribe(new action1 >() { @override public void call(timeinterval v) { systemoutprintln(v) } })}```what i get is that for the first 5 seconds i get `1 refresh x` and `2 refresh x` in 500 ms intervals but after thet all the `3 refresh x` and `4 refresh x` gets printed instantly```timeinterval [intervalinmilliseconds515 value2 refresh 0]timeinterval [intervalinmilliseconds0 value1 refresh 0]timeinterval [intervalinmilliseconds500 value1 refresh 1]timeinterval [intervalinmilliseconds0 value2 refresh 1]timeinterval [intervalinmilliseconds500 value2 refresh 2]timeinterval [intervalinmilliseconds0 value1 refresh 2]timeinterval [intervalinmilliseconds500 value2 refresh 3]timeinterval [intervalinmilliseconds0 value1 refresh 3]timeinterval [intervalinmilliseconds485 value2 refresh 4]timeinterval [intervalinmilliseconds0 value1 refresh 4]timeinterval [intervalinmilliseconds516 value2 refresh 5]timeinterval [intervalinmilliseconds0 value1 refresh 5]timeinterval [intervalinmilliseconds486 value1 refresh 6]timeinterval [intervalinmilliseconds0 value2 refresh 6]timeinterval [intervalinmilliseconds500 value1 refresh 7]timeinterval [intervalinmilliseconds0 value2 refresh 7]timeinterval [intervalinmilliseconds499 value2 refresh 8]timeinterval [intervalinmilliseconds0 value1 refresh 8]timeinterval [intervalinmilliseconds500 value2 refresh 9]timeinterval [intervalinmilliseconds0 value1 refresh 9]timeinterval [intervalinmilliseconds516 value3 refresh 0]timeinterval [intervalinmilliseconds0 value4 refresh 0]timeinterval [intervalinmilliseconds0 value3 refresh 1]timeinterval [intervalinmilliseconds0 value4 refresh 1]timeinterval [intervalinmilliseconds0 value4 refresh 2]timeinterval [intervalinmilliseconds0 value4 refresh 3]timeinterval [intervalinmilliseconds0 value4 refresh 4]timeinterval [intervalinmilliseconds0 value4 refresh 5]timeinterval [intervalinmilliseconds0 value4 refresh 6]timeinterval [intervalinmilliseconds0 value4 refresh 7]timeinterval [intervalinmilliseconds0 value4 refresh 8]timeinterval [intervalinmilliseconds0 value3 refresh 2]timeinterval [intervalinmilliseconds0 value4 refresh 9]timeinterval [intervalinmilliseconds0 value3 refresh 3]timeinterval [intervalinmilliseconds0 value3 refresh 4]timeinterval [intervalinmilliseconds0 value3 refresh 5]timeinterval [intervalinmilliseconds0 value3 refresh 6]timeinterval [intervalinmilliseconds0 value3 refresh 7]timeinterval [intervalinmilliseconds0 value3 refresh 8]timeinterval [intervalinmilliseconds0 value3 refresh 9]```if i understand the purpose of this scheduler especially with the `merge(workers 2)` case you want to limit the number of concurrently running tasks however the implementation blocks out further workers from executing anything until a previous worker is released for example given a service that accepts 2 connections per client if i have to periodically execute 3 or more tasks against this service (via the `interval()` above) only the first two would execute periodically in addition the other 2 would slowly pile up tasks in the internal queue and if the associated sequence uses timeout this will make it timeouti think the solution is to use a fixed thread pool instead: it limits the number of concurrent tasks while allowing all workers to make progressmy second reservation is that since the `schedulewhen` is a self-contained class (unlike operators that need a method in `observable`) this can live in any external library (just like `androidschedulers`) || this isnt intended for long running observables your example is a pathological case rather than scheduling on the outer timer if flatmap and schedule on the inner observables it would not block and all three would be able to runthere are many was to misuse this but if used in a controlled setting of a service library it can be use to protect service from bursts of traffic the main point is to be able to reuse an existing scheduler with some additional behavior rather than having to create new thread pools to enforce rate limits || to address your concern ive changed the api from `ob -> comp` to `ob > -> comp` this is a more direct mapping of scheduler of workers of actions that give the user complete control how and when the actions are done in the example above the actions from all workers can be merged into one stream of actions and then the merge max (n) concurrent could be applied to the actions to better simulate running on a n threads || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4154?srcpr) is **8312%**> merging [#4154](https://codecovio/gh/reactivex/rxjava/pull/4154?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by ** powered by [codecov](https://codecovio?srcpr) last updated by [97c4e53f3777df](https://codecovio/gh/reactivex/rxjava/compare/97c4e537867efd4c9411c14bda0a40de76e83218f3777dfd04ba1817a2923648346caa1f09aa3f28?srcpr) || @akarnokd i think ive addressed all the concerns regrading this pr what can i do help get this experiment merged? || oh sorry was busy with something elseokay lets continue with the experiment :+1:/cc @zsxwing @artem-zinnatullin || does 👍 mean the pr is merged now? should we wait for a review from @zsxwing and/or @artem-zinnatullin? || lets wait for at least one of them || 👍 for this experiment api just one comment about `synchronized (actionqueue)` || very interesting api @abersnaze! few comments and im 👍 with it || i dont know how i would draw the marble diagram for this one || @abersnaze if all feedback is resolved feel free to merge this pr and if you want post any short description of this addition beyond the ref to this pr || thanks for the feed back || as far as im concerned the feedback cycle hadnt really finished on this im hoping that api changes etc are not out of scope if i raise an issue || my comment about the use of `subscribe()` in the constructor was not addressed should be `unsafesubscribe()` i think || @davidmoten if you have further concerns dont hesitate to open an issue or post a pr the file needs some javadoc tidying up anyway ||"
3850.0,4225,1,0,0,0,0,0,1,0,"1x: publishsubject fail-fast when backpressured this pr modifies the `publishsubject` to fail fast if the child subscriber cant keep up therefore instead of some other operator failing somewhere downstream the `missingbackpressureexception` now points to the `publishsubject` instead in addition there were complaints in #3850 that cross-unsubscription doesnt stop another subscriber from receiving events if it comes after the unsubscribe() call in the dispatch loop since `publishsubject` now tracks request - which is the main extra overhead - it is trivial to add the necessary eager check for the unsubscribed statebenchmark comparison (i7 4790 windows 7 x64 java 8u102)![image](https://cloudgithubusercontentcom/assets/1269832/17052414/a30acf84-4ffd-11e6-88ae-1fc5d28a6d12png)as expected this adds some overhead although most noticeably for the mid-range only short-lived publishing is now slightly faster eveninterestingly many benchmarks behave oddly in these 1000s range - we could be hitting some jit threshold while in other benchmarks the warmup iteration numbers keep increasing as jit does its work but here it starts out quite nicely then drops 25% and stays that way im on windows so jmh -perfasm doesnt workif this direction is accepted ill update `behaviorsubject` `timer()` and `interval()` do do the same tracking ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4225?srcpr) is 8412% (diff: 100%)> merging [#4225](https://codecovio/gh/reactivex/rxjava/pull/4225?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will decrease coverage by ** powered by [codecov](https://codecovio?srcpr) last update [479df31b094b0b](https://codecovio/gh/reactivex/rxjava/compare/479df3195f208888fe8cfc91c9ce8367c5b4cc07b094b0b3cf9e933b37d26fe37fd85e298b82ae02?srcpr) || 👍 // im afraid that this will break some amount of user code but this has to be done… || > // im afraid that this will break some amount of user code but this has to be done…to paraphrase godzilla (2014): _let them fail (early)!_ :) || 👍 || the recent changes to `replaysubject`after v115 broke my unit tests not sure if caused by this pr (#4225) #4023 or #3918 probably #3918 since it started after i upgraded to 116in my specific case i was reusing the same `testsubscriber` after unsubscribing and then subscribing again in this case im no longer getting events on the `testsubscriber` after resubscribing it this is roughly what im doing:``` javareplaysubject subject replaysubjectcreate()testsubscriber subscriber new testsubscriber()subscription subscription subjectsubscribe(subscriber)subscriptionunsubscribe()subjectonnext(""foo"")subjectoncompleted()subjectsubscribe(subscriber)// assertions below pass with v115 but fail with 116 and abovesubscriberassertcompleted()subscriberassertvalue(""foo"")```questions: 1 is this the expected behavior or a bug?2 if expected is there any way i can reuse the same subscriber again after it has been unsubscribed?thanks! || alright apparently using `testobserver` instead of `testsubscriber` fixes the problem although that one is deprecated looks like youre not supposed to reuse a `testsubscriber`?i ended up rolling my own `testobserver` that has the same convenience methods as `testsubscriber` like `assertnoerrors()` `assertcompleted()` etcit seems to me that `testobserver` should not be deprecated because it seems useful in such cases what do you think? || you are not supposed to reuse `subscriber` ever subscribe with a new `testsubscriber` and assert on that || my reading of this change is that its no longer possible to emit on a publishsubject that has no observers (yet) if so isnt that a rather large behaviour/api break - a lot more than just failing early?this change broke our tests but i dont see any discussion of this possibility above was it considered? i dont see anything in the javadocs that suggests that emitting on an unsubscribed subject is a problem || > my reading of this change is that its no longer possible to emit on a publishsubject that has no observers (yet)publishsubject considers each of the subscribed subscribers individually and sending an onerror if that particular subscriber is not ready to receive `onnext` events this doesnt prevent you from emitting `onnext` events when there is no subscriber as these events are simply dropped by publishsubject since day 1> this change broke our tests but i dont see any discussion of this possibility above was it considered? i dont see anything in the javadocs that suggests that emitting on an unsubscribed subject is a problemwithout seeing what your unit tests did its hard to say whats wrong with them || indeed my mistake sorry i got confused reading the diff and thought it was going straight from the outer onnext to the inner producer class onnext doh i guess something subscribed has missing backpressure somewhere its hard to tell from the error where the root cause is though as the exception is thrown by the publishsubject and it doesnt say much about which subscriber had problems || enable assembly tracking with `rxjavahooksenableassemblytracking()` around a unit test that fails and youll get more detailed exceptions about what failed (most likely) but first make sure you dont call `onnext` concurrently on the `publishsubject` ||"
4216.0,4226,1,0,0,0,0,1,1,1,1x: singleflatmapcompletable addresses #4216 happy to receive feedback on the implementation also should i take the documentation from `flatmapobservable` and adjust it? ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4226?srcpr) is 8419% (diff: 100%)> merging [#4226](https://codecovio/gh/reactivex/rxjava/pull/4226?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **006%**``` diff@@ 1x #4226 diff @@ files 265 266 +1 lines 17305 17335 +30 methods 0 0 messages 0 0 branches 2624 2625 +1 + hits 14559 14596 +37 + misses 1893 1887 -6 + partials 853 852 -1 ```> powered by [codecov](https://codecovio?srcpr) last update [479df313aad33f](https://codecovio/gh/reactivex/rxjava/compare/479df3195f208888fe8cfc91c9ce8367c5b4cc073aad33fffbee0e50f22d898a6b57dc4b6395b558?srcpr) || the unsubscription is not properly linked the possible exception thrown by the mapper is not handledsee [this](https://gistgithubcom/akarnokd/260ea8b121ec4071401808c1594f2230)> also should i take the documentation from flatmapobservable and adjust it?yes || updated the documentation i hope the wording is okay now also im pointing to https://rawgithubusercontentcom/wiki/reactivex/rxjava/images/rx-operators/singleflatmapcompletablepng which does not exist yet but @davidmgross already tracked it at https://githubcom/reactivex/reactivexgithubio/issues/289 i hope thats okaythanks for the `completableflatmapsingletocompletable` i knew something was missing i also created two more tests that cover some of the previously missing behaviour || :+1: || would it be possible to get this one into 118? || if @zsxwing or anyone from netflix approves it in time || 👍 ||
4242.0,4251,1,0,0,0,0,0,1,0,tomap - prevent multiple terminal events support backpressure as per discussion in #4242 if an operator maps an `onnext` emission to an `onerror` emission downstream then it needs be defensive about an `oncompleted` being sent from upstream even if upstream has been unsubscribedincludes three unit tests that failed on the original code the fix also has the side effect of enabling gc of `map` when the factory fails (`onerror` was called on the child not `this` so `map` was not set to null) i thought it supported backpressure could you rewrite it by using `deferredscalarsubscription`? || unrelated test failure:```rxschedulerscomputationschedulertests > testhandlederrorisnotdeliveredtothreadhandler failed javalangassertionerror: handler should not have received anything expected: but was: at orgjunitassertfail(assertjava:88) at orgjunitassertfailnotequals(assertjava:834) at orgjunitassertassertequals(assertjava:645) at rxschedulersschedulerteststesthandlederrorisnotdeliveredtothreadhandler(schedulertestsjava:102) at rxschedulerscomputationschedulerteststesthandlederrorisnotdeliveredtothreadhandler(computationschedulertestsjava:153)``` || > i thought it supported backpressure could you rewrite it by using deferredscalarsubscription?sure || what i might do is fix multiple terminal emissions in `onsubscribecollect` first and make necessary `done` changes to `deferredscalarsubscriber` in that pr ill follow that with the backpressure fix for `operatortomap` || @akarnokd in terms of releasing a value so can be gcd i thought to modify `deferredscalarsubscriber` in this method so that the field `thisvalue` is set to null just before the call to `aonnext()`:``` javaprotected final void complete(r value) { subscriber a actual for () { int s stateget() if (s no_request_has_value || s has_request_has_value || aisunsubscribed()) { return } if (s has_request_no_value) { r v value // merging [#4251](https://codecovio/gh/reactivex/rxjava/pull/4251?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **001%**``` diff@@ 1x #4251 diff @@ files 267 267 lines 17460 17460 methods 0 0 messages 0 0 branches 2660 2662 +2 + hits 14732 14735 +3 - misses 1865 1869 +4 + partials 863 856 -7 ```> powered by [codecov](https://codecovio?srcpr) last update [0577b4c37da430](https://codecovio/gh/reactivex/rxjava/compare/0577b4c49f744ae6a49505ffeb8937e6a0730f3b37da4301560988479160d2a40d3fbd46138d10f5?srcpr) || - rebased- rewrote to use `deferredscalarsubscribersafe`- use singleton of `defaultmapfactory`- moved to `onsubscribe` to save allocations- added backpressure test || :+1: || good idea ive updated the pr || :+1: ||
4152.0,4261,1,0,0,0,0,0,1,0,1x: concatdelayerror multiple arguments this pr adds multiple arguments to concatdelayerror operatorrelated to: #4152 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4261?srcpr) is 8437% (diff: 100%)> merging [#4261](https://codecovio/gh/reactivex/rxjava/pull/4261?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will decrease coverage by **002%**``` diff@@ 1x #4261 diff @@ files 267 267 lines 17460 17468 +8 methods 0 0 messages 0 0 branches 2662 2662 + hits 14735 14738 +3 - misses 1866 1875 +9 + partials 859 855 -4 ```> powered by [codecov](https://codecovio?srcpr) last update [969d94c0d0cd28](https://codecovio/gh/reactivex/rxjava/compare/969d94cdd382e6c08f6025413716fc89cc5632ae0d0cd281747fdb1851d97c6b9c7cff8fbcb5a28f?srcpr) || :+1: || /cc @artem-zinnatullin @stevegury @zsxwing ||
4260.0,4262,1,0,0,0,0,0,1,0,dooneach - reduce allocations report to rxjavahooks as discussed in #4260 - call `rxjavahooksonerror` for secondary errors- reduced allocations (`actionsubscriber` -> `actionobserver` `operator` -> `onsubscribe`)- added 5 unit tests ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4262?srcpr) is 8441% (diff: 100%)> merging [#4262](https://codecovio/gh/reactivex/rxjava/pull/4262?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **002%**``` diff@@ 1x #4262 diff @@ files 267 268 +1 lines 17460 17477 +17 methods 0 0 messages 0 0 branches 2662 2662 + hits 14735 14753 +18 misses 1866 1866 + partials 859 858 -1 ```> powered by [codecov](https://codecovio?srcpr) last update [969d94c771d859](https://codecovio/gh/reactivex/rxjava/compare/969d94cdd382e6c08f6025413716fc89cc5632ae771d859c701608a655c2b32e7fc4a0dc840a20e9?srcpr) || fixed actionsubscriber usage and removed empty test ta || :+1: ||
4280.0,4288,1,0,0,1,1,1,1,1,2x: move exceptions to public area + exceptionhelper related: #4280the `exceptionspropagate` and `exceptionsthrowiffatal` are too useful to be hidden in an internal package so this pr moves them into the public `ioreactivexexceptions` package the terminal atomics related to throwable containers lives in the `exceptionhelper` enum ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4288?srcpr) is 6944% (diff: 4266%)> merging [#4288](https://codecovio/gh/reactivex/rxjava/pull/4288?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **002%**``` diff@@ 2x #4288 diff @@ files 418 419 +1 lines 30752 30754 +2 methods 0 0 messages 0 0 branches 4935 4935 + hits 21348 21358 +10 + misses 7317 7311 -6 + partials 2087 2085 -2 ```> powered by [codecov](https://codecovio?srcpr) last update [2d36c7bb8f3884](https://codecovio/gh/reactivex/rxjava/compare/2d36c7b32d90b0d8e04a7e1b1a56ed09883df73ab8f38842a0351b49b15c7c009b47e62568c2faa4?srcpr) || lgtm :+1: ||
404.0,4297,1,0,1,1,0,1,1,1,2x: rename single base interface types for consistency addresses #4044 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4297?srcpr) is 6941% (diff: 4659%)> merging [#4297](https://codecovio/gh/reactivex/rxjava/pull/4297?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **007%**``` diff@@ 2x #4297 diff @@ files 420 420 lines 30765 30764 -1 methods 0 0 messages 0 0 branches 4937 4937 - hits 21379 21354 -25 - misses 7309 7319 +10 - partials 2077 2091 +14 ```> powered by [codecov](https://codecovio?srcpr) last update [7beda2afa2eef3](https://codecovio/gh/reactivex/rxjava/compare/7beda2a8fac656e468add42f7524a65dbed3c4dbfa2eef39749abd2f718184868ce7082ecfcc9282?srcpr) || lgtm :+1: || :+1: || @jakewharton if you want me to and you havent started yet id continue on that list and rename the other classes / interfaces as well || sure go for it!on sun aug 7 2016 at 1:55 pm niklas baudy notifications@githubcomwrote:> @jakewharton https://githubcom/jakewharton if you want me too and you> havent started yet id continue on that list and rename the other classes> / interfaces as well> > —> you are receiving this because you were mentioned> > reply to this email directly view it on github> https://githubcom/reactivex/rxjava/pull/4297#issuecomment-238097409> or mute the thread> https://githubcom/notifications/unsubscribe-auth/aaeeeddwatz2v56rvc8goyxdwibfti0cks5qdhwlgajpzm4jeeqo> ||
404.0,4299,1,0,0,1,0,1,1,1,2x: rename flowable base interface types for consistency addresses #4044 lgtm :+1: || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4299?srcpr) is 6944% (diff: 100%)> merging [#4299](https://codecovio/gh/reactivex/rxjava/pull/4299?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **003%**``` diff@@ 2x #4299 diff @@ files 420 420 lines 30764 30763 -1 methods 0 0 messages 0 0 branches 4937 4937 - hits 21375 21363 -12 - misses 7303 7318 +15 + partials 2086 2082 -4 ```> powered by [codecov](https://codecovio?srcpr) last update [ed9a2c4d5941bb](https://codecovio/gh/reactivex/rxjava/compare/ed9a2c4b9de311929f2d8d5e37c3e078cb85db07d5941bb6aa887727f4974e0b4fc5254ef3b9d984?srcpr) || :+1: ||
4044.0,4300,1,0,0,1,1,1,1,1,2x: rename observable base interface types for consistency addresses #4044 there are a large amount of compilation errors || rebased against 2x and re-did the last changes || looks good this time :+1: || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4300?srcpr) is 6942% (diff: 9800%)> merging [#4300](https://codecovio/gh/reactivex/rxjava/pull/4300?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by ** powered by [codecov](https://codecovio?srcpr) last update [e81d39959f3a25](https://codecovio/gh/reactivex/rxjava/compare/e81d399fe3cebd47cc4c4f8e8a3fa671eeac454f59f3a259b1d7340db085c1fd11ad6a7a39285f2c?srcpr) || :+1: ||
4044.0,4302,1,0,0,1,0,1,1,1,2x: rename completable base interface types for consistency addresses #4044 :+1: || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4302?srcpr) is 6937% (diff: 9375%)> merging [#4302](https://codecovio/gh/reactivex/rxjava/pull/4302?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **002%**``` diff@@ 2x #4302 diff @@ files 420 420 lines 30763 30762 -1 methods 0 0 messages 0 0 branches 4937 4937 - hits 21349 21341 -8 - misses 7326 7330 +4 - partials 2088 2091 +3 ```> powered by [codecov](https://codecovio?srcpr) last update [20373995521f99](https://codecovio/gh/reactivex/rxjava/compare/20373999c6ef718878e40769b27bb787f70c59385521f996085a6c73b7aa6d5d5e48e73624ed253c?srcpr) || :+1: ||
4306.0,4309,1,0,0,0,0,1,1,0,2x: remove unused exceptions in public api as wanted in #4306 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4309?srcpr) is 6945% (diff: 000%)> merging [#4309](https://codecovio/gh/reactivex/rxjava/pull/4309?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **006%**``` diff@@ 2x #4309 diff @@ files 426 422 -4 lines 30788 30768 -20 methods 0 0 messages 0 0 branches 4937 4927 -10 + hits 21365 21371 +6 + misses 7335 7324 -11 + partials 2088 2073 -15 ```> powered by [codecov](https://codecovio?srcpr) last update [fe2445d71f28a0](https://codecovio/gh/reactivex/rxjava/compare/fe2445d0009f000cb9173cd97a74c0455fed1fc171f28a0cec1ddf7e32b8493d6801c759c51d4208?srcpr) || /cc @jakewharton || :+1: if the test changes are acceptable for your setup || :+1: ||
4255.0,4317,1,0,1,1,1,1,1,1,"2x: rename create to unsafecreate add ""safe"" create methods this is a proposal to solve #4255 but for 2x and closes #4286 built around one goal: make the `create` methods actually usable by developers!currently the advice given to most developers using 1x is avoid `create` unless you are absolutely 100% sure you understand backpressure and cancellation and even then avoid it if possible this method is a trap that most new developers fall into _the method is named ""create"" after all so it must be how i create these things!_ i want to make that statement not only correct but advisable (at least when the still-convenient ""from"" methods are not suitable such as when wrapping callback-based apis)because `observable` `single` and `completable` are backpressure-free this amounts to just suppressing downstream notifications when disposed this doesnt seem too controversialthe most controversial part is that i have renamed `flowablefromasync` to `flowablecreate` thus making it the canonical way for users to create `flowable`s directly im much less opinionated on this change but it felt wrong to have an `flowableunsafecreate` with no associated `create` and `fromasync` is the ""safest"" version we have ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4317?srcpr) is 6931% (diff: 3238%)> merging [#4317](https://codecovio/gh/reactivex/rxjava/pull/4317?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **018%**``` diff@@ 2x #4317 diff @@ files 428 431 +3 lines 30784 30866 +82 methods 0 0 messages 0 0 branches 4929 4940 +11 hits 21395 21395 - misses 7315 7394 +79 - partials 2074 2077 +3 ```> powered by [codecov](https://codecovio?srcpr) last update [f8694361c051b8](https://codecovio/gh/reactivex/rxjava/compare/f8694361a7bbd9f40194024ee8d611d598c913b11c051b8c330e8368a6240ff3985237cc1960ad37?srcpr) || i think its also important to point out i replaced `consumer >` with `flowablesource ` for parity with other ""safe"" `create` method parameter types the unsafe variant still takes a raw `publisher ` however || :heart::heart::heart: || :+1: ||"
4286.0,4317,1,0,1,1,1,1,1,1,"2x: rename create to unsafecreate add ""safe"" create methods this is a proposal to solve #4255 but for 2x and closes #4286 built around one goal: make the `create` methods actually usable by developers!currently the advice given to most developers using 1x is avoid `create` unless you are absolutely 100% sure you understand backpressure and cancellation and even then avoid it if possible this method is a trap that most new developers fall into _the method is named ""create"" after all so it must be how i create these things!_ i want to make that statement not only correct but advisable (at least when the still-convenient ""from"" methods are not suitable such as when wrapping callback-based apis)because `observable` `single` and `completable` are backpressure-free this amounts to just suppressing downstream notifications when disposed this doesnt seem too controversialthe most controversial part is that i have renamed `flowablefromasync` to `flowablecreate` thus making it the canonical way for users to create `flowable`s directly im much less opinionated on this change but it felt wrong to have an `flowableunsafecreate` with no associated `create` and `fromasync` is the ""safest"" version we have ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4317?srcpr) is 6931% (diff: 3238%)> merging [#4317](https://codecovio/gh/reactivex/rxjava/pull/4317?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **018%**``` diff@@ 2x #4317 diff @@ files 428 431 +3 lines 30784 30866 +82 methods 0 0 messages 0 0 branches 4929 4940 +11 hits 21395 21395 - misses 7315 7394 +79 - partials 2074 2077 +3 ```> powered by [codecov](https://codecovio?srcpr) last update [f8694361c051b8](https://codecovio/gh/reactivex/rxjava/compare/f8694361a7bbd9f40194024ee8d611d598c913b11c051b8c330e8368a6240ff3985237cc1960ad37?srcpr) || i think its also important to point out i replaced `consumer >` with `flowablesource ` for parity with other ""safe"" `create` method parameter types the unsafe variant still takes a raw `publisher ` however || :heart::heart::heart: || :+1: ||"
4329.0,4330,1,0,0,0,0,1,1,0,added observableconcat(iterable) see #4329 i also adjusted the test as it was testing the wrong thing before ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4330?srcpr) is 8451% (diff: 100%)> merging [#4330](https://codecovio/gh/reactivex/rxjava/pull/4330?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **004%**``` diff@@ 1x #4330 diff @@ files 268 268 lines 17478 17479 +1 methods 0 0 messages 0 0 branches 2664 2664 + hits 14764 14773 +9 + misses 1853 1847 -6 + partials 861 859 -2 ```> powered by [codecov](https://codecovio?srcpr) last update [b3a0446404f4fd](https://codecovio/gh/reactivex/rxjava/compare/b3a044675c4d63278287a83576a6b6a0eb8be1ee404f4fd1dde17186d8c65b36ef9ec0c411fef56d?srcpr) || :+1: || 👍 || thanks! ||
4082.0,4337,1,0,0,0,0,0,1,0,2x: move disposableobserver to public area add some javadocs move `disposableobserver` to `ioreactivexobservers` + some documentationrelated: #4082 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4337?srcpr) is 6916% (diff: 100%)> merging [#4337](https://codecovio/gh/reactivex/rxjava/pull/4337?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **003%**``` diff@@ 2x #4337 diff @@ files 431 431 lines 30789 30789 methods 0 0 messages 0 0 branches 4940 4940 + hits 21283 21295 +12 + misses 7428 7409 -19 - partials 2078 2085 +7 ```> powered by [codecov](https://codecovio?srcpr) last update [125cf7330b1b4a](https://codecovio/gh/reactivex/rxjava/compare/125cf735be19e6410f95474ec18886d78385e3a530b1b4ae08e1949cc2e9a761e51f7145b4fbbe29?srcpr) || :+1:having these in the public api make it seem like `asyncobserver` becomes obsolete in the case where its not managing any additional resources should we rename it to `resourceobserver` (or something) and have it always manage resources? || sure will you do it? || yep! ||
4365.0,4370,1,0,0,1,0,1,1,1,"2x: remove try+optional introduce notification this pr removes the `try` and `optional` classes and (re)introduces `notification `there are several ways to implement it this pr uses the abstract class + private subclasses approach that saves on instance sizerelated discussion: #4365 > this pr uses the abstract class + private subclasses approach that saves on instance sizethis seems like it would prevent a lot of inlining of the simple ""is""ers and ""get""ers because the callsites become polymorphic instead of monomorphicwhen i check the object layout having two fields in a root object doesnt increase the size because of object padding```$ cat notificationjavafinal class notification { private static final object completed new object() private final t value private final throwable error notification(t value throwable error) { thisvalue value thiserror error }}$ javac notificationjava$ java -cp :/users/jw/downloads/jol-cli-05-fulljar orgopenjdkjolmain internals notificationobjc[95020]: class javalaunchhelper is implemented in both /library/java/javavirtualmachines/jdk180_92jdk/contents/home/bin/java and /library/java/javavirtualmachines/jdk180_92jdk/contents/home/jre/lib/libinstrumentdylib one of the two will be used which one is undefined# warning: unable to attach serviceability agent you can try again with escalated privileges two options: a) use -djoltrywithsudotrue to try with sudo b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope# running 64-bit hotspot vm# using compressed oop with 3-bit shift# using compressed klass with 3-bit shift# warning | compressed references base/shifts are guessed by the experiment!# warning | therefore computed addresses are just guesses and are not reliable# warning | make sure to attach serviceability agent to get the reliable addresses# objects are 8 bytes aligned# field sizes by type: 4 1 1 2 2 4 4 8 8 [bytes]# array element sizes: 4 1 1 2 2 4 4 8 8 [bytes]vm fails to invoke the default constructor falling back to class-only introspectionnotification object internals: offset size type description value 0 12 (object header) n/a 12 4 object notificationvalue n/a 16 4 throwable notificationerror n/a 20 4 (loss due to the next object alignment)instance size: 24 bytesspace losses: 0 bytes internal + 4 bytes external 4 bytes total``` || oops i wrote my comparison wrong (and left it out of the comment)youre right the individual classes are only 16 bytes (12 header + 4 field) that said 24 vs 16 isnt that big of a deal to gain guaranteed monomorphism || there are other ways of doing it ie single object field + private wrapper for throwables: 16 bytes per onnext and 32 bytes per onerror || true ill leave it up to you though:+1: || or getting at least bimorphic by having value null represent oncomplete || updated now we have the smaller size but an instanceof check for every isonnext() and getvalue calls || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4370?srcpr) is 6860% (diff: 7744%)> merging [#4370](https://codecovio/gh/reactivex/rxjava/pull/4370?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **010%**``` diff@@ 2x #4370 diff @@ files 446 443 -3 lines 32154 32081 -73 methods 0 0 messages 0 0 branches 5092 5073 -19 - hits 22026 22010 -16 + misses 8011 7975 -36 + partials 2117 2096 -21 ```> powered by [codecov](https://codecovio?srcpr) last update [ec4eb4fcc0a786](https://codecovio/gh/reactivex/rxjava/compare/ec4eb4f3bcd0a0c2d4e17571c8f4320ee864fd5ccc0a78632b8e5e1b0141441e75e12d7b906a93b5?srcpr) || looks good! ||"
4366.0,4371,1,0,1,1,1,1,1,1,2x: move blocking operators into the base classes this pr removes the `blockingflowable` and `blockingobservable` classes and moves the blocking operators into the respective reactive classes and names prefixed with `blocking`in addition many of the mentions of `flowable` has been replaced with `observable` in `observable`related: #4366 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4371?srcpr) is 6858% (diff: 4966%)> merging [#4371](https://codecovio/gh/reactivex/rxjava/pull/4371?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **003%**``` diff@@ 2x #4371 diff @@ files 443 449 +6 lines 32081 32123 +42 methods 0 0 messages 0 0 branches 5073 5080 +7 + hits 22015 22031 +16 - misses 7971 7996 +25 - partials 2095 2096 +1 ```> powered by [codecov](https://codecovio?srcpr) last update [a6bbf4658874f6](https://codecovio/gh/reactivex/rxjava/compare/a6bbf4630e9f3678ac56e96f9aa156f3d03ffc5658874f6d4cf044b1bfea05fea559df4a7efc4db8?srcpr) || lgtm 👍 ||
1353.0,4421,1,0,0,0,0,0,1,0,2x: fixes cleanups renames changes:- fix spelling mistakes- more consistent parameter naming scheme based on #1353 (but incomplete rc2)- fix bugs due to wrong variable naming- compact logic expressions- fix `completabledoafterterminate` not called the right time- `onerrorreturnvalue` renamed to `onerrorreturnitem`@davidmgross once this pr has been merged it would be great you submitted one that has `//todo` markers on those lines that need attention the naming scheme you suggested doesnt come intuitively to me so i may skip many of them without the markers ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4421?srcpr) is 6948% (diff: 7327%)> merging [#4421](https://codecovio/gh/reactivex/rxjava/pull/4421?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **003%**``` diff@@ 2x #4421 diff @@ files 454 454 lines 32372 32323 -49 methods 0 0 messages 0 0 branches 5214 5214 - hits 22482 22459 -23 + misses 7692 7662 -30 - partials 2198 2202 +4 ```> powered by [codecov](https://codecovio?srcpr) last update [35c8da6b05aa63](https://codecovio/gh/reactivex/rxjava/compare/35c8da6ca2f0c446d9e50d1c5507cc80e5ccb996b05aa630a9a8eda6007863512395b642cca98a62?srcpr) || :+1: ||
440.0,4422,1,0,0,0,0,1,1,0,2x: add subscribewith to get back the subscriber/observer fluently this pr adds the `subscribewith` methods to the base reactive types to mainly help with the 1x to 2x changeover as 2x `subscribe(subscriber)` return void instead of the resource/cancellation/unsubscription type `disposable` see the javadocs and the unit test for example userelated: #4400 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4422?srcpr) is 6956% (diff: 100%)> merging [#4422](https://codecovio/gh/reactivex/rxjava/pull/4422?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **004%**``` diff@@ 2x #4422 diff @@ files 454 454 lines 32323 32331 +8 methods 0 0 messages 0 0 branches 5214 5214 + hits 22470 22491 +21 + misses 7651 7640 -11 + partials 2202 2200 -2 ```> powered by [codecov](https://codecovio?srcpr) last update [7aa0b342f68644](https://codecovio/gh/reactivex/rxjava/compare/7aa0b347cea8aa0e395a7f9ec488d7006647a3292f686449a6173a80713fe418e95819237fd5b90b?srcpr) || :+1: ||
4420.0,4425,1,0,0,0,0,1,1,1,1x: remove completable prefix from nested interfaces move its subscription to top-level this is only the `completable` part of #4420 it does not make `completablesubscriber` an abstract class nor create `singleoperator` [compiler error](https://travis-ciorg/reactivex/rxjava/builds/155096130#l200) || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4425?srcpr) is 8423% (diff: 6804%)> merging [#4425](https://codecovio/gh/reactivex/rxjava/pull/4425?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will decrease coverage by **016%**``` diff@@ 1x #4425 diff @@ files 270 270 lines 17518 17548 +30 methods 0 0 messages 0 0 branches 2677 2677 - hits 14785 14781 -4 - misses 1877 1909 +32 - partials 856 858 +2 ```> powered by [codecov](https://codecovio?srcpr) last update [743f16455bf5e7](https://codecovio/gh/reactivex/rxjava/compare/743f164b1b2f20ed34ae97a48872a0c54837591155bf5e7a678b67d4d98880529055a78143e502b7?srcpr) || looks okay what about the `@deprecated` markers? || oh sure ill add them in real quick i wasnt sure on your stance on them but i think itll make migration easier || yes having deprecated markers is more forgiveable than lacking the entire type i dont know how extensively `completable` is in use by other libraries right now (beyond rxjavareactivestreams reactors converter retrofit`) || updated! || https://travis-ciorg/reactivex/rxjava/builds/155134046#l200 || compilation issue resolved || i know still waiting for a second approval || okay lets have this one can complain anytime later ||
4321.0,4436,1,0,0,0,0,0,1,0,"2x: maybe for lazy optional in #4321 i hit on the problem of needing a lazy object that could either be zero or one value in that issue the idea of switching the return value of `reduce(r func2 )` from `observable ` to `single ` because that operator can only ever produce an observable that emits exactly one value the problem was that `reduce(func2 )` could not be changed to `single ` because the source observable could be empty and therefore not produce one and only one valueto solve this problem i mentioned we could create a lazy type that represents either 1 or no value could fill the gap between `completable` and `single `this pr is for the introduction of the `maybe ` type you referenced java 8 types in your code || my problem with adding another base type is the increased maintece cost currently we have 3 + 4 types in the major versions and it is likely adding a new operator overload or making a fix has to be done for all of them im one-man armying rxjava for a considerable time now but i have my limits therefore my suggestion is that you have this `maybe` as a separate library that depends on rxjava 2 but rxjava 2 doesnt depend on it since rxjava 2 offers fluent conversion method(s) it should be only a small inconvenience to convert to `maybe`:``` javaflowable source flowablerange(1 10)maybe mb sourceto(maybereduceflowable((a b) -> a + b))mbfilter(v -> false)subscribe( systemout::println throwable::printstacktrace () -> systemoutprintln(""done""))mbtoflowable()subscribe( systemout::println throwable::printstacktrace () -> systemoutprintln(""done""))``` || as i mentioned my plans were to greatly increase the coupling between observable & flowable to single & maybe by having the various operators that return exactly 1 or sometimes 1 value to these two types || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4436?srcpr) is 7196% (diff: 007%)> merging [#4436](https://codecovio/gh/reactivex/rxjava/pull/4436?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **314%**``` diff@@ 2x #4436 diff @@ files 453 499 +46 lines 32399 33691 +1292 methods 0 0 messages 0 0 branches 5216 5299 +83 - hits 24336 24246 -90 - misses 6034 7431 +1397 + partials 2029 2014 -15 ```> powered by [codecov](https://codecovio?srcpr) last update [f97c50d118f21a](https://codecovio/gh/reactivex/rxjava/compare/f97c50dadcb40a0f6f41734087a1c52d9df55d08118f21adcabde87b393bb7155a148308ec20de78?srcpr) || im willing to accept `maybe` as the 5th reactive type but the class needs javadoc and unit tests that verify the most basic behavior of each operator in it/cc @artem-zinnatullin @jakewharton @zsxwing || how about you just contribute `maybe` with operators throwing `unsupportedoperationexception` and ill add optimized implementations and tests for them as i go? || also reactor has the [mono](https://githubcom/reactor/reactor-core/blob/master/src/main/java/reactor/core/publisher/monojava) type exactly for this purpose i suggest you try that first || im not strictly opposed because> my plans were to greatly increase the coupling between observable & flowable to single & maybe by having the various operators that return exactly 1 or sometimes 1 value to these two typesappeals to me but i dont have a really strong feeling without using it more || okay then lets merge this and see how it works out || please dont post prs targeting maybe - im working on cleaning it up a bit (plus a few other classes if i find something wrong) the code copied from an older commit of the other types ||"
4199.0,4442,1,0,0,1,0,1,1,1,1x: cleanup javadoc completablefromemitter - add javadoc to `asyncemitterbackpressuremode` (#4199)- deprecate `observablefromasync` add `observablefromemitter` instead (#4255)- add `completablefromemitter()` (#4356)- add missing placeholder `@since` tags- fix some generics error `rxjavahooks`- add race helper to `testutil`- fix javadoc warnings ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4442?srcpr) is 8419% (diff: 9750%)> merging [#4442](https://codecovio/gh/reactivex/rxjava/pull/4442?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will decrease coverage by **005%**``` diff@@ 1x #4442 diff @@ files 270 271 +1 lines 17563 17599 +36 methods 0 0 messages 0 0 branches 2680 2683 +3 + hits 14797 14817 +20 - misses 1909 1919 +10 - partials 857 863 +6 ```> powered by [codecov](https://codecovio?srcpr) last update [db3ff46fdba5ed](https://codecovio/gh/reactivex/rxjava/compare/db3ff46c7ad37cca4224f07d517f108357201220fdba5ed6e1fd8bcd3912394ae14fb9f6664a4c1c?srcpr) || :+1: ||
4255.0,4442,1,0,0,1,0,1,1,1,1x: cleanup javadoc completablefromemitter - add javadoc to `asyncemitterbackpressuremode` (#4199)- deprecate `observablefromasync` add `observablefromemitter` instead (#4255)- add `completablefromemitter()` (#4356)- add missing placeholder `@since` tags- fix some generics error `rxjavahooks`- add race helper to `testutil`- fix javadoc warnings ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4442?srcpr) is 8419% (diff: 9750%)> merging [#4442](https://codecovio/gh/reactivex/rxjava/pull/4442?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will decrease coverage by **005%**``` diff@@ 1x #4442 diff @@ files 270 271 +1 lines 17563 17599 +36 methods 0 0 messages 0 0 branches 2680 2683 +3 + hits 14797 14817 +20 - misses 1909 1919 +10 - partials 857 863 +6 ```> powered by [codecov](https://codecovio?srcpr) last update [db3ff46fdba5ed](https://codecovio/gh/reactivex/rxjava/compare/db3ff46c7ad37cca4224f07d517f108357201220fdba5ed6e1fd8bcd3912394ae14fb9f6664a4c1c?srcpr) || :+1: ||
4356.0,4442,1,0,0,1,0,1,1,1,1x: cleanup javadoc completablefromemitter - add javadoc to `asyncemitterbackpressuremode` (#4199)- deprecate `observablefromasync` add `observablefromemitter` instead (#4255)- add `completablefromemitter()` (#4356)- add missing placeholder `@since` tags- fix some generics error `rxjavahooks`- add race helper to `testutil`- fix javadoc warnings ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4442?srcpr) is 8419% (diff: 9750%)> merging [#4442](https://codecovio/gh/reactivex/rxjava/pull/4442?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will decrease coverage by **005%**``` diff@@ 1x #4442 diff @@ files 270 271 +1 lines 17563 17599 +36 methods 0 0 messages 0 0 branches 2680 2683 +3 + hits 14797 14817 +20 - misses 1909 1919 +10 - partials 857 863 +6 ```> powered by [codecov](https://codecovio?srcpr) last update [db3ff46fdba5ed](https://codecovio/gh/reactivex/rxjava/compare/db3ff46c7ad37cca4224f07d517f108357201220fdba5ed6e1fd8bcd3912394ae14fb9f6664a4c1c?srcpr) || :+1: ||
4456.0,4458,1,0,0,0,0,0,1,0,2x: rename observable and single #dooncancel to #doondispose #4456completable already used doondispose() however i renamed the arguments to match observable and single the diff for observable doesnt show but the offline-comparison only lists 30-40 lines changes did you run some whitespace cleanup? || @akarnokd whoops youre right sorry auto formatter seems to have changed some whitespaces ill revert that || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4458?srcpr) is 7594% (diff: 100%)> merging [#4458](https://codecovio/gh/reactivex/rxjava/pull/4458?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **003%**``` diff@@ 2x #4458 diff @@ files 485 485 lines 33042 33042 methods 0 0 messages 0 0 branches 5240 5240 + hits 25082 25093 +11 + misses 5915 5909 -6 + partials 2045 2040 -5 ```> powered by [codecov](https://codecovio?srcpr) last update [52dc05004a61cb](https://codecovio/gh/reactivex/rxjava/compare/52dc0500c9e7fea96d614d847f3a04eb1afd91dd04a61cba0851446919edd312d6c303f7da82f854?srcpr) || :+1: || this update is missing in release notes on github please remember to mention such changes in the future ||
4457.0,4460,1,0,0,0,0,1,1,1,1x: completable add dooneach first part of #4457 is it okay that i reused notification like that?also are there any java 6 generics missing? it would be nice if this project was set up to target java sdk 6 as my default seems to be java 8 and i dont get any errors shown in the ide okay but you have [generics problem](https://travis-ciorg/reactivex/rxjava/builds/156916384#l166) || alright its fixed now || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4460?srcpr) is 8423% (diff: 100%)> merging [#4460](https://codecovio/gh/reactivex/rxjava/pull/4460?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by ** powered by [codecov](https://codecovio?srcpr) last update [30da1aaeacbf59](https://codecovio/gh/reactivex/rxjava/compare/30da1aa1e38a5ead8965d1784ab8c6df8111d354eacbf59a11f6758239012c4edd0baa07a502b7fc?srcpr) || :+1: ||
4457.0,4461,1,0,0,0,0,0,1,0,1x: single add dooneach really not that happy with `onnotificationcall(notification createonnext(t))` do you guys have any other way of doing this? theres no way of creating a notification that has the `oncompleted` plus a value a new one could be introduced there though also the `dooneachsuccess` test feels clunkyalso why does single when using the `do` methods does the job by using an observable? and later converting it back to a single again is it due to the way single was implemented in 1x? with completable there is no converting of back and forth neededjavadoc will follow once we sorted out the few nits herefixes #4457 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4461?srcpr) is 8428% (diff: 100%)> merging [#4461](https://codecovio/gh/reactivex/rxjava/pull/4461?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **009%**``` diff@@ 1x #4461 diff @@ files 271 272 +1 lines 17607 17647 +40 methods 0 0 messages 0 0 branches 2684 2687 +3 + hits 14824 14874 +50 + misses 1923 1913 -10 partials 860 860 ```> powered by [codecov](https://codecovio?srcpr) last update [11343ae0ea399f](https://codecovio/gh/reactivex/rxjava/compare/11343ae031feb01d3d08ba5cd0e5f275ed798e680ea399fc6f8f3cab60a2baa3763882ac67d0fd77?srcpr) || ill continue this on monday and make all suggested changes || [exceptionstest#testonerrorexceptionisthrownfromsingledoonsuccess](https://githubcom/reactivex/rxjava/blob/11343ae031feb01d3d08ba5cd0e5f275ed798e68/src/test/java/rx/exceptions/exceptionstestjava#l288) fails although im not quite sure what the purpose of that test is also it seems a bit off to me can you give some insights there? || looks like removing the toobservabletosingle no longer wraps the subscriber into a safesubscriber and the test just crashes with a different exception || no exception is being thrown at all || can you single step the test? in the orginal dooneach it has throwiffatal an throworreport you missed btw || :+1: ||
4462.0,4466,1,0,0,0,0,0,1,0,1x: deprecate notificationcreateoncompleted fix #4462 it might just as well shine some light into which method should be used and explain why there are 2 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4466?srcpr) is 8426% (diff: 100%)> merging [#4466](https://codecovio/gh/reactivex/rxjava/pull/4466?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **007%**``` diff@@ 1x #4466 diff @@ files 271 271 lines 17607 17607 methods 0 0 messages 0 0 branches 2684 2684 + hits 14823 14836 +13 + misses 1920 1918 -2 + partials 864 853 -11 ```> powered by [codecov](https://codecovio?srcpr) last update [7593247561b5df](https://codecovio/gh/reactivex/rxjava/compare/75932471eda6c7c972a40b0560a65c75ffd8cbc2561b5df99d7a88947ecbe12dac0dee1e9f8b1d8b?srcpr) ||
4481.0,4488,1,0,0,0,0,0,1,0,2x: add new methods to maybe observable and single from 4481 this pr adds just the new methods from #4481 to allow a much cleaner change of return types later on :+1: || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4488?srcpr) is 7779% (diff: 816%)> merging [#4488](https://codecovio/gh/reactivex/rxjava/pull/4488?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **036%**``` diff@@ 2x #4488 diff @@ files 497 500 +3 lines 33772 33909 +137 methods 0 0 messages 0 0 branches 5303 5325 +22 - hits 26396 26378 -18 - misses 5409 5554 +145 - partials 1967 1977 +10 ```> powered by [codecov](https://codecovio?srcpr) last update [928e437344af8d](https://codecovio/gh/reactivex/rxjava/compare/928e4379f6ea2086b4418cc64c3382e204a04ae2344af8dfcb8498b6a590290199bbaf50476d966e?srcpr) || updated with corrections ||
4389.0,4503,1,0,0,0,0,0,1,0,2x: add system properties to adjust thread priorities of schedulers this pr adds the ability to specify the default thread priorities of `computation()` `io()` `newthread()` and `single()` schedulers via system properties ive added the property names to the `schedulers` javadocrelated: #4389 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4503?srcpr) is 7797% (diff: 100%)> merging [#4503](https://codecovio/gh/reactivex/rxjava/pull/4503?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **003%**``` diff@@ 2x #4503 diff @@ files 505 505 lines 34357 34367 +10 methods 0 0 messages 0 0 branches 5383 5383 - hits 26800 26797 -3 - misses 5559 5568 +9 - partials 1998 2002 +4 ```> powered by [codecov](https://codecovio?srcpr) last update [935ae3cc4031f7](https://codecovio/gh/reactivex/rxjava/compare/935ae3cc4caae373c83c6ae89550a55999f1231dc4031f78c6cfb0e24a05fdc42bdfc40e1a7db8bd?srcpr) || thanks! :+1: ||
4501.0,4504,1,0,0,0,0,0,1,0,2x: add disposable observer for maybe completable & single also any reason the dispoable is called `s`? is it still from the subscription time?fixes #4501 seems unrelated:```ioreactivexinternaloperatorsobservableobservablerefcounttest > testrepeat failed javalangassertionerror: error(s) present: [javalangillegalstateexception: onsubscribe not called in proper order] (latch 1 values 51 errors 1 completions 0) at ioreactivexobserverstestobserverfail(testobserverjava:363) at ioreactivexobserverstestobserverassertnoerrors(testobserverjava:411) at ioreactivexinternaloperatorsobservableobservablerefcounttesttestrepeat(observablerefcounttestjava:195) caused by: ioreactivexexceptionscompositeexception at ioreactivexobserverstestobserverfail(testobserverjava:364) 2 more caused by: ioreactivexexceptionscompositeexception$compositeexceptioncausalchain: chain of causes for compositeexception in order received > caused by: javalangillegalstateexception: onsubscribe not called in proper order``` || yep ill fix that next - started to become annoying to me too ||
4512.0,4513,1,0,0,0,0,1,1,1,2x: fix switchmap bad cancellation both `switchmap` implementations didnt properly cancel the current inner consumer (but instead cancelled the outer connection only)reported in #4512 :+1: || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4513?srcpr) is 7791% (diff: 100%)> merging [#4513](https://codecovio/gh/reactivex/rxjava/pull/4513?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by ** powered by [codecov](https://codecovio?srcpr) last update [939f1728b55f5d](https://codecovio/gh/reactivex/rxjava/compare/939f172b5fd39fdc83e353fa0b4626a8a61e3ee48b55f5dd1b05ebc7a7ea5a63d8f539978bf8de04?srcpr) ||
4514.0,4516,1,0,0,0,0,1,1,1,2x: fix singleusing add unit tests and coverage ive forgotten to create a branch so the first part of todays coverage work [landed in 2x direct](https://githubcom/reactivex/rxjava/commit/1145819b658983807e0cede5ba2c7d5ac1117baa)- removed unused methods from various classes- compacted `spscarrayqueue`- added null checks to `spsclinkedarrayqueueoffer()` and `mpsclinkedqueueoffer()`- fixed `resourceobserver` not calling `onstart`- added direct notificationlite-emission methods to `appendonlylinkedarraylist` updated `serializedobserver` and `serializedsubscriber` to use it directly instead of the former indirection- `testobserverisdisposed` now reports true if terminal events were received (#4514)- `resourcesubscriber` to use `subscriptionhelper`s deferred subscription/requesting management- added unit tests to cover `disposablexobserver`s- `serializedobserver` and `serializedsubscriber` now have proper unit tests eachthis current pr fixes `singleusing` not properly managing the resource and adds unit tests to verify the behavior along with a few extra coverage improvements :+1: || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4516?srcpr) is 7864% (diff: 9692%)> merging [#4516](https://codecovio/gh/reactivex/rxjava/pull/4516?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **036%**``` diff@@ 2x #4516 diff @@ files 507 507 lines 34371 34386 +15 methods 0 0 messages 0 0 branches 5391 5395 +4 + hits 26904 27042 +138 + misses 5480 5374 -106 + partials 1987 1970 -17 ```> powered by [codecov](https://codecovio?srcpr) last update [11458190ee4580](https://codecovio/gh/reactivex/rxjava/compare/1145819b658983807e0cede5ba2c7d5ac1117baa0ee4580c6235aadd210693bae3cd024add6295df?srcpr) ||
451.0,4518,1,0,0,0,0,1,1,0,2x: add missing resource observer for maybe completable & single and adjust some javadoc fixes #4517 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4518?srcpr) is 7860% (diff: 100%)> merging [#4518](https://codecovio/gh/reactivex/rxjava/pull/4518?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **007%**``` diff@@ 2x #4518 diff @@ files 507 510 +3 lines 34386 34424 +38 methods 0 0 messages 0 0 branches 5395 5401 +6 + hits 27003 27059 +56 + misses 5411 5401 -10 + partials 1972 1964 -8 ```> powered by [codecov](https://codecovio?srcpr) last update [4f878d5120d760](https://codecovio/gh/reactivex/rxjava/compare/4f878d56988d572257309dad1a1d0c9fe601f3d8120d760b71d46181a7ac36db11a934543f75f53e?srcpr) || it might be worth considering removing the protected `cancel()` methods as they are duplicates of `dispose` for `resourcesubscriber` i dont know because it works with `subscriptioncancel()` but also is a `disposable` so `dispose()` is there as well || so should i remove the `cancel()` method on all `resource*observer`? || @jakewharton your opinion on the removal? || im supportive of removing `cancel()` i much prefer when theres only one way to do something! || :+1: ||
4521.0,4522,1,0,0,0,0,1,1,1,observable/flowable/completable/singledelay should always call onerror on the provided scheduler fixes #4521 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4522?srcpr) is 7872% (diff: 100%)> merging [#4522](https://codecovio/gh/reactivex/rxjava/pull/4522?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **006%**``` diff@@ 2x #4522 diff @@ files 515 515 lines 34647 34643 -4 methods 0 0 messages 0 0 branches 5431 5431 + hits 27255 27273 +18 + misses 5417 5402 -15 + partials 1975 1968 -7 ```> powered by [codecov](https://codecovio?srcpr) last update [63c44514e874a3](https://codecovio/gh/reactivex/rxjava/compare/63c4451dec13ce83665323694883f9b933f779b14e874a3ce6abd265488222dd9d035e25208243d7?srcpr) || :+1: || great job applying the changes to all of the base types! ||
4524.0,4525,1,0,0,0,0,0,1,0,2x: fix generics t[] in zip & combinelatest fixes #4524test for combinelatest fill follow ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4525?srcpr) is 7871% (diff: 100%)> merging [#4525](https://codecovio/gh/reactivex/rxjava/pull/4525?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by ** powered by [codecov](https://codecovio?srcpr) last update [44c57054a972f2](https://codecovio/gh/reactivex/rxjava/compare/44c5705b45af3733d8180cd47cdc16146ad9dda24a972f2ad4ec11397d6eee147b44bb3e6ab050bb?srcpr) || this should be it now || single has exactly 1 and maybe at most 1 item so there is only 1 latest that can happen thus there is no difference between combinelatest and zip for these sources || :+1: || yup i immediately noticed it after i wrote my comment :d thats also why i deleted it ||
4577.0,4580,1,0,0,0,0,0,1,0,rename asyncemitter to emitter as per discussion in #4577 renaming `asyncemitter` to `emitter` via deprecationthere is a catch though `completableemitter` is correctly named now and depends on `asyncemitter` via the method:``` java void setcancellation(asyncemittercancellable c)```when can we break the api of that class? :+1: || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4580?srcpr) is 8457% (diff: 9390%)> merging [#4580](https://codecovio/gh/reactivex/rxjava/pull/4580?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **021%**``` diff@@ 1x #4580 diff @@ files 272 274 +2 lines 17571 17807 +236 methods 0 0 messages 0 0 branches 2683 2727 +44 + hits 14822 15060 +238 + misses 1884 1880 -4 - partials 865 867 +2 ```> powered by [codecov](https://codecovio?srcpr) last update [646be2d44bf8a8](https://codecovio/gh/reactivex/rxjava/compare/646be2d18df9cd1537d81d22b24084049faa358144bf8a802743a3bfe46a097fc60bd4b6c36a3e89?srcpr) || thanks for review @akarnokd i take it we have to wait for 13 to break the api of experimental `completableemitter`? || deleting experimental apis has to wait one patch version so 121 will have both and 122 can remove the asyncemitter || ok ill patch again once 121 is outon thu 22 sep 2016 21:25 david karnok notifications@githubcom wrote:> deleting experimental apis has to wait one patch version so 121 will> have both and 122 can remove the asyncemitter> > —> you are receiving this because you authored the thread> reply to this email directly view it on github> https://githubcom/reactivex/rxjava/pull/4580#issuecomment-248876158> or mute the thread> https://githubcom/notifications/unsubscribe-auth/aata67zur0rwdcgqvuo3_lrakxmjql9yks5qsmwmgajpzm4kdwhj> || /cc @jakewharton @artem-zinnatullin || make the cancelable interfaces extend each other as wellon thu sep 22 2016 6:33 pm dave moten notifications@githubcom wrote:> ## _@davidmoten_ commented on this pull request> > in src/main/java/rx/asyncemitterjava> https://githubcom/reactivex/rxjava/pull/4580:> > > */> > @experimental> > +@deprecated> > public interface asyncemitter extends observer {> > cannot extend emitter because of two versions of cancellable would break> existing asyncemitter use> > —> you are receiving this because you were mentioned> > reply to this email directly view it on github> https://githubcom/reactivex/rxjava/pull/4580 or mute the thread> https://githubcom/notifications/unsubscribe-auth/aaeeetq3yk4zrtnoqttagmrnbm6eib0-ks5qswjpgajpzm4kdwhj> || > make the cancelable interfaces extend each other as wellgood idea thanks || um i dont think its worth it juggling with inheritance of these interfaces straight after next release im just going to delete the deprecated stuff || ive added a `@deprecated` annotation to `completableemitter` let me know if you guys still want the interface inheritance business || forgot to move `cancellable` to `rxfunctions` thats done now || thanks for working this out! ||
4572.0,4585,1,0,0,1,0,1,1,0,"2x: evaluate schedule initialization via callable this implements the solution proposed in #4572 - to initialize the schedulers via a callable rather than directly via a value ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4585?srcpr) is 7817% (diff: 8888%)> merging [#4585](https://codecovio/gh/reactivex/rxjava/pull/4585?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **008%**``` diff@@ 2x #4585 diff @@ files 552 552 lines 36184 36297 +113 methods 0 0 messages 0 0 branches 5584 5602 +18 + hits 28255 28375 +120 + misses 5917 5912 -5 + partials 2012 2010 -2 ```> powered by [codecov](https://codecovio?srcpr) last update [24448b4a273507](https://codecovio/gh/reactivex/rxjava/compare/24448b47ed27b6ab951cf1ef573da900f8a46853a273507bc8d66c671b878b496f491f5e29f4c8b1?srcpr) || @akarnokd correct me if im wrong but in order to avoid the evaluation of the default scheduler instance when it is being overridden i still need to change the `oninit[single|io|new|computation]handler` signatures to be `function scheduler>` as per -``` static volatile function scheduler> oninitsinglehandler```otherwise the invocation of `initsinglescheduler` will cause the evaluation of the default value to pass it as a parameter to the overriding/transforming function: `oninitsinglehandler` || yes you still need `callable` as the indirection but the inner class will be evaluated only if `call` is actually invoked || ive added the remaining lazy initializationive also fairly aggressively enforced non-null in the associated functions for example:``` javapublic static scheduler initioscheduler(callable defaultscheduler) { objecthelperrequirenonnull(defaultscheduler ""scheduler callable cant be null"") callable scheduler> f oninitiohandler if (f null) { return callrequirenonnull(defaultscheduler) } return applyrequirenonnull(f defaultscheduler)}```however to me this seems slightly out of place / over the top is that enforcement necessary or should the resultant null scheduler be left unasserted and left to the eventual nullpointerexception when the scheduler is used? either way im happy to keep or remove that based upon review feedback || aggressive input validation is never over the top if you defer checkingthen the stacktrace tells you nothing about what actually caused the brokenstateon sun sep 25 2016 7:09 am peter tackage notifications@githubcomwrote:> ive added the remaining lazy initialization> > ive also fairly aggressively enforced non-null in the associated> functions for example:> > public static scheduler initioscheduler(callable defaultscheduler) {> objecthelperrequirenonnull(defaultscheduler ""scheduler callable cant be null"")> callable scheduler> f oninitiohandler> if (f null) {> return callrequirenonnull(defaultscheduler)> }> return applyrequirenonnull(f defaultscheduler)> }> > however to me this seems slightly out of place / over the top is that> enforcement necessary or should the resultant null scheduler be left> unasserted and left to the eventual nullpointerexception when the scheduler> is used? either way im happy to keep or remove that based upon review> feedback> > —> you are receiving this because you commented> > reply to this email directly view it on github> https://githubcom/reactivex/rxjava/pull/4585#issuecomment-249415736> or mute the thread> https://githubcom/notifications/unsubscribe-auth/aaeeeyulqrvk4zp6d5xx5vsnijqiam4xks5qtlzbgajpzm4kebru> || @akarnokd all done as far as i am concerned do i need to anything else for this to be merged? || i was waiting for you to settle with the implementation thanks for the contribution ||"
4498.0,4586,1,0,0,0,0,1,1,1,2x: add error assertion with predicate to testsubscriber and testobserver added support for error assertions with to testsubscriber requested in #4498 to support custom error evaluation removes the need to implement equals and hashcode in exceptions could you do it for testobserver as well? || sure i will update the pr || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4586?srcpr) is 7812% (diff: 100%)> merging [#4586](https://codecovio/gh/reactivex/rxjava/pull/4586?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **003%**``` diff@@ 2x #4586 diff @@ files 552 552 lines 36184 36220 +36 methods 0 0 messages 0 0 branches 5584 5594 +10 + hits 28255 28296 +41 + misses 5917 5913 -4 + partials 2012 2011 -1 ```> powered by [codecov](https://codecovio?srcpr) last update [24448b40fef45f](https://codecovio/gh/reactivex/rxjava/compare/24448b47ed27b6ab951cf1ef573da900f8a468530fef45fd7e90a711e204a47219b9f98a898106b9?srcpr) ||
4628.0,4629,1,0,0,0,0,1,1,1,2x: add completablefromrunnable() addresses #4628> theres `maybefromrunnable` but `completable` is missing this method ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4629?srcpr) is 7813% (diff: 8823%)> merging [#4629](https://codecovio/gh/reactivex/rxjava/pull/4629?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **001%**``` diff@@ 2x #4629 diff @@ files 557 558 +1 lines 36278 36295 +17 methods 0 0 messages 0 0 branches 5563 5565 +2 + hits 28341 28359 +18 + misses 5926 5916 -10 - partials 2011 2020 +9 ```> powered by [codecov](https://codecovio?srcpr) last update [64f335c10f2410](https://codecovio/gh/reactivex/rxjava/compare/64f335c466b621fc0cba18f068773655eb10909e10f2410269ef10d216e27417fe3dc01b6306178d?srcpr) || thanks! || thanks! ||
4634.0,4636,1,1,0,1,1,1,1,1,update mockito to 210-rc2 equivalent of #4634 but now for the 2x branch the test `ioreactivexmaybemaybetest > onterminatedetach` seems to be failing claiming there is a memory leak i sadly have no experience with this test to fix it || that test is a bit flaky (maybe the new mockito increased the base memory usage?) ill fix that test and rerun this one || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4636?srcpr) is 7780% (diff: 100%)> merging [#4636](https://codecovio/gh/reactivex/rxjava/pull/4636?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will not change coverage``` diff@@ 2x #4636 diff @@ files 562 562 lines 36713 36713 methods 0 0 messages 0 0 branches 5635 5635 hits 28565 28565 misses 6103 6103 partials 2045 2045 ```> powered by [codecov](https://codecovio?srcpr) last update [57ac0ff5a03bee](https://codecovio/gh/reactivex/rxjava/compare/57ac0ff67dc06388e256ae0031e0ca4855ef61485a03beea4a1ecc77ff296209e835dbf0b0aa7c6a?srcpr) || thanks a lot and enjoy :smile: ! || fyi mockito 210 has been released which is equivalent to 210-rc2 once again thanks a lot for using mockito :smile: ||
4332.0,4641,0,0,0,0,0,0,1,0,1x: safesubscriber not to call rxjavahooks before delivering the original error before the introduction of `rxjavahooks` the `safesubscriber_onerror` called the original error handler with the exception it received which was by default an empty handler the default `rxjavahooksonerror` behavior however is to signal errors to the uncaught exception handler of the caller thread which leads to unnecessary logging or app crashes even though the error itself is to be handled properlythis pr restores the `safesubscriber_onerror` to skip the `rxjavahooks` and call the original handler directy so old tracking code should still get all safe error while newer hooking doesnt get calledrelated: #4332 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4641?srcpr) is 8456% (diff: 100%)> merging [#4641](https://codecovio/gh/reactivex/rxjava/pull/4641?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **008%**``` diff@@ 1x #4641 diff @@ files 274 274 lines 17766 17766 methods 0 0 messages 0 0 branches 2727 2727 + hits 15009 15024 +15 + misses 1889 1878 -11 + partials 868 864 -4 ```> powered by [codecov](https://codecovio?srcpr) last update [2b47efed66196a](https://codecovio/gh/reactivex/rxjava/compare/2b47efee292099ea7f27a606a421e22aca76dc2ed66196a56215813e3e1a786ee1f703215725631f?srcpr) || /cc @dlew || lgtm thanks for doing this ||
464.0,4645,1,0,0,1,0,1,1,0,2x signal npe observableamb flowableamb this pr addresses #4640 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4645?srcpr) is 7782% (diff: 6538%)> merging [#4645](https://codecovio/gh/reactivex/rxjava/pull/4645?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by ** powered by [codecov](https://codecovio?srcpr) last update [d08266b27c29f8](https://codecovio/gh/reactivex/rxjava/compare/d08266bb95e8cddbb9ba5cf39afbe08e16525d1a27c29f8ff3917b5310cd3d52c1464a77951a3722?srcpr) ||
4633.0,4647,1,0,0,1,0,1,1,1,2x: merge ambarray and ambiterable into amb for single maybe and completable types this pr addresses #4633- merge singleambarray and singleambiterable operators into singleamb- merge maybeambarray and maybeambiterable operators into maybeamb- merge completableambarray and completableambiterable operators into completableamb ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4647?srcpr) is 7787% (diff: 8536%)> merging [#4647](https://codecovio/gh/reactivex/rxjava/pull/4647?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by ** powered by [codecov](https://codecovio?srcpr) last update [ce21ecfeae4339](https://codecovio/gh/reactivex/rxjava/compare/ce21ecf823021555e3fedf83797bf51ebe8bb90deae433993d39b1b07165fdd6a04bf093766f11a3?srcpr) ||
4650.0,4651,1,0,0,1,0,1,1,0,switch maybe and single to use their transformers in compose() resolves #4650 whoops forgot to update the tests will update in a sec || intellij user i presume? || indeed does (i presume 😉) eclipse do something to protect against this? || eclipse has an error view which doesnt obscure the project structure plus when one shows the breadcrumbs they get error icons indicating theres still something wrong (also the project tree gets error icons) so it is much harder to miss these kinds of errors || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4651?srcpr) is 7787% (diff: 100%)> merging [#4651](https://codecovio/gh/reactivex/rxjava/pull/4651?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **004%**``` diff@@ 2x #4651 diff @@ files 559 559 lines 36654 36654 methods 0 0 messages 0 0 branches 5625 5625 - hits 28560 28543 -17 - misses 6065 6078 +13 - partials 2029 2033 +4 ```> powered by [codecov](https://codecovio?srcpr) last update [9047a3cfccdfca](https://codecovio/gh/reactivex/rxjava/compare/9047a3ca85f7cc5d2816c168e0de9a714a8eb55ffccdfcaad62cd5c2cb49a6c651995c5bd85524d3?srcpr) || interesting ill have to check that out! ||
4653.0,4654,1,0,0,0,0,0,1,0,upcast concurrenthashmap to map to avoid compatibility issue resovles #4653see http://stackoverflowcom/a/32955708/61158 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4654?srcpr) is 7786% (diff: 100%)> merging [#4654](https://codecovio/gh/reactivex/rxjava/pull/4654?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **009%**``` diff@@ 2x #4654 diff @@ files 559 559 lines 36654 36654 methods 0 0 messages 0 0 branches 5625 5625 - hits 28577 28542 -35 - misses 6050 6075 +25 - partials 2027 2037 +10 ```> powered by [codecov](https://codecovio?srcpr) last update [5ad1c04a6a6fd6](https://codecovio/gh/reactivex/rxjava/compare/5ad1c046da45a69817b643eb0c6602ddab1b112ca6a6fd62cedfa6d532d36738379545e7d00d721c?srcpr) ||
4680.0,4681,1,0,0,0,0,1,1,0,2x: fix flowable + single elementat and elementatorerror operators on empty sources this will fix #4680- elementatorerror(1) on an empty source just leaves the new single hanging without signalling onerror()- elementat(1) on an empty source just leaves the maybe hanging without signalling oncomplete()- i also noticed that elementat() with a default value on an empty source did not work either ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4681?srcpr) is 8215% (diff: 000%)> merging [#4681](https://codecovio/gh/reactivex/rxjava/pull/4681?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **017%**``` diff@@ 2x #4681 diff @@ files 565 565 lines 37426 37426 methods 0 0 messages 0 0 branches 5746 5746 + hits 30682 30749 +67 + misses 4666 4608 -58 + partials 2078 2069 -9 ```> powered by [codecov](https://codecovio?srcpr) last update [27e8dad5e3ce8e](https://codecovio/gh/reactivex/rxjava/compare/27e8dade8bcb29cf4a6a4cc3aee296533c259cad5e3ce8e86d85d5e89c1f16fcd193e7f9fb6f75cb?srcpr) || you may have to check the build and restart it a few times if it fails with `jacocotestreport` ||
4684.0,4686,1,0,0,0,0,1,1,0,2: fix flatmapx over-cancellation in case of an inner error a non-delayed error set the cancellation flag and thus any subsequent drain would just quit instead of delivering the error(and while im at it ill try to figure out a way to not get killed by oomkiller)reported in #4684 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4686?srcpr) is 8204% (diff: 100%)> no coverage report found for **2x** at 5209ba3> > powered by [codecov](https://codecovio?srcpr) last update [5209ba3b6490ea](https://codecovio/gh/reactivex/rxjava/compare/5209ba343df1cba3cbd75dabaa4af4eb268b3af4b6490ea6533bcbe470d23da4899c521830699e73?srcpr) ||
4683.0,4687,1,0,0,0,0,1,1,1,2x: add observablerangelong & flowablerangelong will fix #4683- adds observablerangelong()- adds flowablerangelong()both implementations are copied same for the unit testswhat should we do about the range overflow check? we could use bigdecimal to check that ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4687?srcpr) is 8189% (diff: 5408%)> merging [#4687](https://codecovio/gh/reactivex/rxjava/pull/4687?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **024%**``` diff@@ 2x #4687 diff @@ files 565 567 +2 lines 37440 37599 +159 methods 0 0 messages 0 0 branches 5746 5786 +40 + hits 30753 30791 +38 - misses 4612 4715 +103 - partials 2075 2093 +18 ```> powered by [codecov](https://codecovio?srcpr) last update [497f35f8dc710d](https://codecovio/gh/reactivex/rxjava/compare/497f35f64c89b85bbd17a5f4d50a4eb56e5454248dc710d2f001610414669de36ce1f3ac96d5647c?srcpr) ||
4688.0,4690,1,0,0,0,0,1,1,1,2x: basetestconsumer add assertvalueat(index predicate ) fixes #4688- adds assertvalueat(index predicate) to basetestconsumer ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4690?srcpr) is 8282% (diff: 100%)> merging [#4690](https://codecovio/gh/reactivex/rxjava/pull/4690?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by ** powered by [codecov](https://codecovio?srcpr) last update [7e89c1f9c5a724](https://codecovio/gh/reactivex/rxjava/compare/7e89c1f1a8cde6b461f9a36869b1027961be01a79c5a7249fe0a966ab2154e943ca87bf8b391e616?srcpr) ||
4709.0,4710,1,0,0,1,0,1,1,0,2x: remove checked exceptions from transformer interfaces these functions are for transforming the stream shape not doing work any operation that would throw a checked exception should happen inside the stream not when shaping itcloses #4709 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4710?srcpr) is 8714% (diff: 100%)> merging [#4710](https://codecovio/gh/reactivex/rxjava/pull/4710?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **004%**``` diff@@ 2x #4710 diff @@ files 568 568 lines 37061 37046 -15 methods 0 0 messages 0 0 branches 5648 5648 - hits 32312 32283 -29 - misses 3050 3062 +12 - partials 1699 1701 +2 ```> powered by [codecov](https://codecovio?srcpr) last update [637978cb95c0d4](https://codecovio/gh/reactivex/rxjava/compare/637978c66ad9d461fbee298f23d95bb73dbd0a5fb95c0d4b84849008fc7b070acdd0edf0dd20d29e?srcpr) ||
4715.0,4716,1,0,0,0,0,1,1,1,1x: fix subscribe(action1 [ action1]) to report isunsubscribed the lambda version didnt report `isunsubscribed()` as before because of the removal of the `safesubscriber` wrapping this pr makes sure it reports consistently againrepored in: #4715note that there is no `unsafesubscribe(singlesubscriber)` so a regular `subscribe(singlesubscriber)` by default wont report `isunsubscribed() true` unless the implementation of `onsuccess` and `onerror` - controlled by the user - doesnt call `unsubscribe` on itself ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4716?srcpr) is 8409% (diff: 100%)> merging [#4716](https://codecovio/gh/reactivex/rxjava/pull/4716?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by ** powered by [codecov](https://codecovio?srcpr) last update [1ac5834bdbd69f](https://codecovio/gh/reactivex/rxjava/compare/1ac583435308aa354a2f82101cb4815313f2cfd8bdbd69f6ce7e63d2e43e0fb360d321080b5adf2e?srcpr) || hi everyoneseems like `subscribe(singlesubscriber)` overload has the same problem because `singlejust(1)subscribe(new singlesubscriber (){})isunsubscribed()` returns `false`i checked version 122-snapshot in 120 it returns `true` as expected || @marwinxxii single has no notion of `safesinglesubscriber` and the internals got changed to improve performance therefore you are responsible calling `unsubscribe` in your implementation of `onsuccess` and `oncompleted` || sorry i missed this part in pr descriptionmay be this should be added to singlesubscriber documentation (or may be `singlesubscribe(singlesubscriber)`? || pr welcome to change the docs || done - #4769 ||
4727.0,4729,1,0,0,0,0,1,1,0,merge flowableemitterbackpressuremode into backpressurestrategy this is the implementation of #4727 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4729?srcpr) is 8991% (diff: 8222%)> merging [#4729](https://codecovio/gh/reactivex/rxjava/pull/4729?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **002%**``` diff@@ 2x #4729 diff @@ files 571 571 lines 37241 37276 +35 methods 0 0 messages 0 0 branches 5671 5678 +7 + hits 33494 33518 +24 - misses 2253 2263 +10 - partials 1494 1495 +1 ```> powered by [codecov](https://codecovio?srcpr) last update [f8b6fbd05d21cb](https://codecovio/gh/reactivex/rxjava/compare/f8b6fbd22db73160284ba43e3a3ead2b979a91a905d21cbad0314e0e4e7b1a3a2ecfea185589b2e1?srcpr) || i have implemented the changes from the code commentsill keep in mind to rely on code coverage in the futureshould i reply to the review comments directly ? || no need in this case looks good to me ||
4743.0,4747,1,0,0,1,0,1,1,1,2x: distinctuntilchanged to store the selected key instead of the value fix `distinctuntilchanged` to store the selected key instead of the input valuereported in #4743 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4747?srcpr) is 9379% (diff: 9558%)> no coverage report found for **2x** at 98d0b7f> > powered by [codecov](https://codecovio?srcpr) last update [98d0b7f0a7db2a](https://codecovio/gh/reactivex/rxjava/compare/98d0b7f2ec63544890d029282dc2ff3f611b987a0a7db2abb0b67a2d37068e59ac4552b4cdc981da?srcpr) ||
4620.0,4751,1,1,0,1,1,1,1,1,2x: fix flowableconcatmapeager hang due to bad request management `flowableconcatmapeager`s drain loop when encountering a finished inner jumped back to the beginning of the loop but disregarded the potentially changed request amount and just stopped emitting the fix is to use the typical request management approach of reading the current request at the beginning of the loop and then committing the emission amount before trying to leave the looprelated: #4620in addition `testhelperasserterror` has been changed to attach the whole unexpected exception to the `assertionerror` ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4751?srcpr) is 9374% (diff: 7391%)> merging [#4751](https://codecovio/gh/reactivex/rxjava/pull/4751?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **004%**``` diff@@ 2x #4751 diff @@ files 570 570 lines 37067 37073 +6 methods 0 0 messages 0 0 branches 5648 5651 +3 - hits 34764 34754 -10 - misses 1171 1183 +12 - partials 1132 1136 +4 ```> powered by [codecov](https://codecovio?srcpr) last update [777b4c136a7c6f](https://codecovio/gh/reactivex/rxjava/compare/777b4c1a9fec37ed15e56b4da5348f29cd5fcdf936a7c6f6b37e2f7c13958278cc659404f3d46c18?srcpr) ||
4702.0,4757,1,0,0,0,0,0,1,0,1x: add cache() to single #4702uses the same test as the observable one ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4757?srcpr) is 8407% (diff: 100%)> merging [#4757](https://codecovio/gh/reactivex/rxjava/pull/4757?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **023%**``` diff@@ 1x #4757 diff @@ files 286 286 lines 17751 17752 +1 methods 0 0 messages 0 0 branches 2701 2701 + hits 14882 14925 +43 + misses 1996 1957 -39 + partials 873 870 -3 ```> powered by [codecov](https://codecovio?srcpr) last update [5e3f6c469b5b16](https://codecovio/gh/reactivex/rxjava/compare/5e3f6c4141f0e2b10765270d0faf83de014ec80469b5b16598f33f9357a8636116bd079e87bd243d?srcpr) || sorry im late to the party here this seems to be rxjava1x only is this going to reach 2x ? || its in 2 || uupps right ! thanks ! ||
4643.0,4767,1,0,0,0,0,1,1,0,2x: rename backpressurestrategynone to missing as discussed in #4643 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4767?srcpr) is 9570% (diff: 100%)> merging [#4767](https://codecovio/gh/reactivex/rxjava/pull/4767?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by ** powered by [codecov](https://codecovio?srcpr) last update [83ba4b950575e2](https://codecovio/gh/reactivex/rxjava/compare/83ba4b9bc885f7ae6e82ef7f2c86826e05203e8550575e2207517ca2ab7453ae120c78f69b0cf925?srcpr) || yay! ||
4782.0,4783,1,0,0,0,0,1,1,1,2x: fix observablerepeatwhen & retrywhen not disposing the inner the `observer` that is subscribing to the `observable` returned by the handler function was not properly linked to the disposing of the end observer this pr fixes it by making that `observer` do async `disposable` management and make sure the end `observer` receives a disposable list with both the main and the handler `disposable`sthe `flowable` versions worked properly but added unit tests to them regardlessreported in #4782 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4783?srcpr) is 9572% (diff: 9166%)> merging [#4783](https://codecovio/gh/reactivex/rxjava/pull/4783?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **014%**``` diff@@ 2x #4783 diff @@ files 570 570 lines 36713 36717 +4 methods 0 0 messages 0 0 branches 5555 5554 -1 - hits 35200 35149 -51 - misses 617 646 +29 - partials 896 922 +26 ```> powered by [codecov](https://codecovio?srcpr) last update [3300d1902aa31c](https://codecovio/gh/reactivex/rxjava/compare/3300d19ea0c168a210bf7816503d7805ac93dc4902aa31c228267f4099c78641f19b2514c1b0a85b?srcpr) ||
4809.0,4810,1,0,0,0,0,0,1,0,subtle change in completables documentation for retrywhen small change as discussed in #4809 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4810?srcpr) is 9557% (diff: 100%)> merging [#4810](https://codecovio/gh/reactivex/rxjava/pull/4810?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **014%**``` diff@@ 2x #4810 diff @@ files 570 570 lines 36717 36717 methods 0 0 messages 0 0 branches 5554 5554 - hits 35148 35094 -54 - misses 645 670 +25 - partials 924 953 +29 ```> powered by [codecov](https://codecovio?srcpr) last update [106d004f8506aa](https://codecovio/gh/reactivex/rxjava/compare/106d00485a41b7cdd29ee0065c8e026a46729235f8506aaf7d0cb273b6f8e3d6d907521889d995e9?srcpr) ||
482.0,4828,1,0,0,0,0,0,1,0,changing inner classes to package-private to fix issue in #4826 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4828?srcpr) is 8410% (diff: 100%)> merging [#4828](https://codecovio/gh/reactivex/rxjava/pull/4828?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will decrease coverage by **001%**``` diff@@ 1x #4828 diff @@ files 287 287 lines 17835 17835 methods 0 0 messages 0 0 branches 2702 2702 - hits 15004 15001 -3 - misses 1965 1966 +1 - partials 866 868 +2 ```> powered by [codecov](https://codecovio?srcpr) last update [1f6c68cabd63c9](https://codecovio/gh/reactivex/rxjava/compare/1f6c68c469359ec08842d3b540387682357325f1abd63c93d50d05e5ede0f02265b04cccec323f09?srcpr) ||
482.0,4830,1,0,0,0,0,1,1,1,1x: completabledoafterterminate to run after onerror as well doafterterminate was intended to call the callback after either oncompleted or onerror but somehow missed that behavior in 1xrelated: #4822 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4830?srcpr) is 8413% (diff: 7142%)> merging [#4830](https://codecovio/gh/reactivex/rxjava/pull/4830?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will decrease coverage by ** powered by [codecov](https://codecovio?srcpr) last update [bebdec6eb8f4fe](https://codecovio/gh/reactivex/rxjava/compare/bebdec6a52955ea478a992cebbd527364cb5b6a4eb8f4feccc00e797c21edfe3e33bc056e55a1e3f?srcpr) ||
485.0,4858,1,0,0,0,0,1,1,0,2x: add maybeflatmapsingleelement returning maybe this pr adds the `maybeflatmapsingleelement()` operator that returns a `maybe` and completes if the source completes unlike `flatmapsingle` where the returned `single` signals `nosuchelementexception`related #4857 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4858?srcpr) is 9578% (diff: 100%)> merging [#4858](https://codecovio/gh/reactivex/rxjava/pull/4858?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **006%**``` diff@@ 2x #4858 diff @@ files 580 581 +1 lines 37174 37214 +40 methods 0 0 messages 0 0 branches 5600 5601 +1 + hits 35632 35646 +14 - misses 639 649 +10 - partials 903 919 +16 ```> powered by [codecov](https://codecovio?srcpr) last update [557aca3a94a307](https://codecovio/gh/reactivex/rxjava/compare/557aca3bed17d85df5bdee384d4d4adba03ea64ca94a307ab11339b09cb2e69a00a874dea532635f?srcpr) ||
4872.0,4873,1,0,0,0,0,1,1,1,2x: testobserver shouldnt clear the upstream disposable on terminated `testobserver` replaced the upstreams `disposable` with the disposed-sentinel when it got a terminal event (unlike `testsubscriber`) and there seems to be a need for triggering `dispose` in some upstream even after that this pr changes this behavior and also updates unit tests that expect `isdisposed()` true without actually calling `dispose()`related #4872 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4873?srcpr) is 9575% (diff: 100%)> merging [#4873](https://codecovio/gh/reactivex/rxjava/pull/4873?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **003%**```diff@@ 2x #4873 diff @@ files 581 581 lines 37214 37212 -2 methods 0 0 messages 0 0 branches 5601 5601 + hits 35624 35634 +10 + misses 656 650 -6 + partials 934 928 -6 ```> powered by [codecov](https://codecovio?srcpr) last update [37bde8cd7e8e4f](https://codecovio/gh/reactivex/rxjava/compare/37bde8c87a9bb0daf34a9037ebc3541fc7a17ce3d7e8e4ff63a6d581b3b1fb459a8a88123e9b875a?srcpr) ||
4878.0,4881,0,0,0,1,0,1,1,0,add checkreturnvalue annotation first draft on thisso far i have only annotated `subscribewith()` and `test()` methodsi checked this against error prone and their [check](http://errorproneinfo/bugpattern/checkreturnvalue) is able of picking up the rxjava annotationhow do you feel if i extend `basetypeannotations` to test for `@checkreturnvalue` too?related #4878 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4881?srcpr) is 9574% (diff: 100%)> merging [#4881](https://codecovio/gh/reactivex/rxjava/pull/4881?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **004%**```diff@@ 2x #4881 diff @@ files 581 581 lines 37212 37212 methods 0 0 messages 0 0 branches 5601 5601 - hits 35643 35628 -15 - misses 647 654 +7 - partials 922 930 +8 ```> powered by [codecov](https://codecovio?srcpr) last update [442c6ce94571e5](https://codecovio/gh/reactivex/rxjava/compare/442c6cefd4b2c7663a2781c41a1653a24996b94894571e5e30180ebcf337e01540d2b5f5f0c639c7?srcpr) || i quickly checked findbugs and it does not seem like they pick up our annotation since they have their [own](http://findbugssourceforgenet/api/edu/umd/cs/findbugs/annotations/checkreturnvaluehtml) || would you manually ignore methods like `disposable subscribe()`? || @vanniktech see https://githubcom/findbugsproject/findbugs/blob/264ae7baf890d2b347d91805c90057062b5dcb1e/findbugs/src/java/edu/umd/cs/findbugs/detect/buildcheckreturnotationdatabasejava#l120 || @artem-zinnatullin weird somehow findbugs didnt pick it up though could be a configuration error on my sideid argue that not annotating `diposable subscribe()` is fine however i feel like `disposable subscribe(consumer )` and the others should be annotated i personally almost never use subscribewith and prefer the variations with lambdaswere on the same point that static factory methods and operators such as flatmap first() last() etc should be annotated right? if so id apply those and then we can see which might need an annotation too || @akarnokd added the `@checkreturnvalue` annotation to all public api methods of `flowable` `maybe` `single` `observable` and `completable` except for private methods void methods and the `disposable subscribe()` method is that okay now? || yes/cc @jakewharton ||
488.0,4884,1,0,0,0,0,1,1,1,1x: enable testscheduler with osecond periodic scheduling the default periodic scheduling code accessed the current worker time as milliseconds which prevents running microsecond and osecond scale unit tests with testscheduler as its internal osecond resolution time is always converted losing precisionthis pr introduces the internal `scheduleperiodichelper` class moves the default scheduling code into a static method and defines a `nowosupplier` interface that is now implemented by testschedulerworker to return the current o time the default `workerscheduleperiodically` delegates to this static method and given a `null` `noosupplier` the `workernow()` is converted to oseconds as usualrelated: #4883 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4884?srcpr) is 8421% (diff: 9310%)> merging [#4884](https://codecovio/gh/reactivex/rxjava/pull/4884?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will decrease coverage by **004%**```diff@@ 1x #4884 diff @@ files 287 288 +1 lines 17803 17808 +5 methods 0 0 messages 0 0 branches 2696 2698 +2 - hits 15000 14997 -3 - misses 1952 1960 +8 partials 851 851 ```> powered by [codecov](https://codecovio?srcpr) last update [8fff67d0c98869](https://codecovio/gh/reactivex/rxjava/compare/8fff67d91f4d4740c0b1fa55ba238249242f2bb20c988692ece3830d2ff8ee152604b2612be601f8?srcpr) ||
490.0,4911,1,0,0,0,0,1,1,1,2x: fix & update observablerepeatwhen and retrywhen (again) this pr fixes the `observablerepeatwhen` not completing properly if the handler completes in addition the `observableredo` has been split to `observableretrywhen` and `observablerepeatwhen` just like their `flowable` counterpart and are now they use a less convoluted algorithmrelated: #4909 i dont know why the travis-ci/push still shows up || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4911?srcpr) is 9564% (diff: 9843%)> merging [#4911](https://codecovio/gh/reactivex/rxjava/pull/4911?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **003%**```diff@@ 2x #4911 diff @@ files 586 586 lines 37410 37446 +36 methods 0 0 messages 0 0 branches 5628 5625 -3 + hits 35791 35814 +23 - misses 671 695 +24 + partials 948 937 -11 ```> powered by [codecov](https://codecovio?srcpr) last update [5b6d1f8c7b4ccb](https://codecovio/gh/reactivex/rxjava/compare/5b6d1f8c8e9e4adc3fe31388811aa4876a5afba2c7b4ccb947a9ccf5380a789d312a156b6b2ac8b7?srcpr) ||
4920.0,4921,1,0,0,0,0,0,1,0,2x: fix testsubscriber/observer message texts fix the wrong messages in `testsubscriber` and `testobserver`related: #4920 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4921?srcpr) is 9555% (diff: 100%)> merging [#4921](https://codecovio/gh/reactivex/rxjava/pull/4921?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **004%**```diff@@ 2x #4921 diff @@ files 586 586 lines 37446 37446 methods 0 0 messages 0 0 branches 5625 5625 - hits 35799 35781 -18 - misses 698 710 +12 - partials 949 955 +6 ```> powered by [codecov](https://codecovio?srcpr) last update [2332df23fe97c2](https://codecovio/gh/reactivex/rxjava/compare/2332df245545fae31c996f65c5aa1c50799d3be13fe97c2a8d5795acd1da2a187a8b009eb0231a1c?srcpr) ||
4923.0,4924,1,0,0,0,0,0,1,0,2x: change completable to completablesource changing `completable` to `completablesource` also found one other wrong spot that i fixed within this prfixes #4923 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4924?srcpr) is 9558% (diff: 100%)> merging [#4924](https://codecovio/gh/reactivex/rxjava/pull/4924?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **008%**```diff@@ 2x #4924 diff @@ files 586 586 lines 37446 37446 methods 0 0 messages 0 0 branches 5625 5625 - hits 35823 35792 -31 - misses 683 698 +15 - partials 940 956 +16 ```> powered by [codecov](https://codecovio?srcpr) last update [18752564489b35](https://codecovio/gh/reactivex/rxjava/compare/1875256f3c6a64f56c75585d8f1d00a8d506c68d4489b350fd272633a855c8cc3441166f232e5307?srcpr) ||
4926.0,4927,1,0,0,0,0,1,1,1,2x: fix timer() ise due to bad resource mgmt both `observabletimer()` and `flowabletimer()` could report `illegalstateexception` because if the delayed task completed before the tasks `disposable` was set the `setonce` found a non-null non-terminal reference already setrelated: #4926 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4927?srcpr) is 9555% (diff: 100%)> merging [#4927](https://codecovio/gh/reactivex/rxjava/pull/4927?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **013%**```diff@@ 2x #4927 diff @@ files 586 586 lines 37446 37452 +6 methods 0 0 messages 0 0 branches 5625 5627 +2 - hits 35829 35786 -43 - misses 674 712 +38 - partials 943 954 +11 ```> powered by [codecov](https://codecovio?srcpr) last update [7d4793268a0d8a](https://codecovio/gh/reactivex/rxjava/compare/7d479322d8f5649a8a21f8ba13b4ff6b6657168a68a0d8ae7219cf7080a45e97de04b3b5e597117e?srcpr) ||
493.0,4932,1,0,0,0,0,1,1,0,2x: add safeguards to generate() `flowablegenerate()` and `observablegenerate()` lacked the safeguards that were present in 1x this adds those and adds extra state cleanuprelated: #4931 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4932?srcpr) is 9560% (diff: 9545%)> merging [#4932](https://codecovio/gh/reactivex/rxjava/pull/4932?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by ** powered by [codecov](https://codecovio?srcpr) last update [a902d4aeda6ed8](https://codecovio/gh/reactivex/rxjava/compare/a902d4aac034f8585b727e4fc43c53fe20a4db36eda6ed8a4b3a35b7459ab23fbd60d046b5260d7a?srcpr) ||
4902.0,4943,1,0,0,0,0,1,1,0,2x: fix publish(function) not replenishing its queue i was working on converting the [monte carlo pi benchmark](http://swaveio/usage/show-off/monte-carlo-pihtml) to rxjava 2 and it turned out i forgot to replenish the internal queue of `publish(function)` in case the upstream was not sync-fuseablethis pr fixes the replenishment problem for non-fused and async-fused sources by requesting after 75% consumptionin addition if an inner subscriber cancelled while it was at request 0 the other inner subscribers might not have resumed drainingive also fixed two unit tests with wrong timeout unit of measure that randomly failed the tests on a slow machine or travis (#4902) ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4943?srcpr) is 9550% (diff: 100%)> merging [#4943](https://codecovio/gh/reactivex/rxjava/pull/4943?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **011%**```diff@@ 2x #4943 diff @@ files 587 587 lines 37540 37549 +9 methods 0 0 messages 0 0 branches 5652 5655 +3 - hits 35896 35863 -33 - misses 694 723 +29 - partials 950 963 +13 ```> powered by [codecov](https://codecovio?srcpr) last update [4851637f5f753c](https://codecovio/gh/reactivex/rxjava/compare/48516372b9770a0f442bea06f7f93b3d27d6ed32f5f753c0e7a31d333f89a7b979c2c46c5a3d34c9?srcpr) ||
4944.0,4945,1,0,0,0,1,1,1,1,2x: fix timeout with fallback not cancelling the main source this pr fixes the lack of dispose/cancel call towards the upstream in the timed+fallback `timeout` operator versionin addition the selector version received similar unit tests to ensure they work properly (they did)related: #4944 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4945?srcpr) is 9557% (diff: 100%)> merging [#4945](https://codecovio/gh/reactivex/rxjava/pull/4945?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **003%**```diff@@ 2x #4945 diff @@ files 587 587 lines 37549 37551 +2 methods 0 0 messages 0 0 branches 5655 5655 - hits 35904 35891 -13 - misses 692 702 +10 - partials 953 958 +5 ```> powered by [codecov](https://codecovio?srcpr) last update [a9f1f4f983b6b0](https://codecovio/gh/reactivex/rxjava/compare/a9f1f4f151cecf3fcfc59fcf085fc9cac9223d08983b6b0cd8f671a181dbcd54d6cd68dd2981bb6c?srcpr) ||
495.0,4955,1,0,0,0,0,1,1,1,"2x: add sample() overload that can emit the very last buffered item the `sample()` operator in 1x has been changed to always emit the very last buffered item before completion for [113](https://githubcom/reactivex/rxjava/releases/tag/v113): [discussion](https://githubcom/reactivex/rxjava/issues/3657) [pr](https://githubcom/reactivex/rxjava/pull/3757)this change has been forgotten in 2x (because 2x `sample()` was implemented several months earlier) but unlike 1x i dont want to break existing use cases hence the introduction of 6 overloads (3 for each base type) that lets one define the ""tail"" behaviornote that the associated marble diagrams are inconsistent with the operators implemented we need a new diagram where the timed-sample also emits the last value:![image](https://cloudgithubusercontentcom/assets/1269832/21642878/891ca42a-d285-11e6-876a-e613de2443dbpng)and one new diagram where the sampler-sample doesnt emit the last value:![image](https://cloudgithubusercontentcom/assets/1269832/21642917/b4dc257c-d285-11e6-8f25-707043957f26png)the default sampler-sample should use this and the `emitlast true` version can use the current diagram(i dont have a mac thus cant run omnigraffle)related: #4952 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4955?srcpr) is 9557% (diff: 9854%)> merging [#4955](https://codecovio/gh/reactivex/rxjava/pull/4955?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **015%**```diff@@ 2x #4955 diff @@ files 587 587 lines 37551 37669 +118 methods 0 0 messages 0 0 branches 5655 5675 +20 + hits 35950 36003 +53 - misses 676 704 +28 - partials 925 962 +37 ```> powered by [codecov](https://codecovio?srcpr) last update [19fac959c7f28d](https://codecovio/gh/reactivex/rxjava/compare/19fac95ca82bf40e9837280f5d33e0bfdc81db399c7f28de2dd9e1450699ebf5fa981db1d63481d6?srcpr) ||"
4956.0,4957,1,0,0,0,0,1,1,0,2x: fix lambdaobserver calling dispose when terminating this pr changes the `lambdaobserver` to not dispose the upstream when it receives a terminal event the `lambdasubscriber` has been previoulsy updated but apparently not syncedreported in #4956this pr fixes 2 unit test methods of `flowableignoreelements()` as they were not actually testing the operator (discovered when the `observableignoreelements()` initially failed after the patch to `lambdaobserver`) ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4957?srcpr) is 9568% (diff: 100%)> merging [#4957](https://codecovio/gh/reactivex/rxjava/pull/4957?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **005%**```diff@@ 2x #4957 diff @@ files 587 587 lines 37551 37551 methods 0 0 messages 0 0 branches 5655 5655 - hits 35950 35929 -21 - misses 676 685 +9 - partials 925 937 +12 ```> powered by [codecov](https://codecovio?srcpr) last update [19fac95f7287ce](https://codecovio/gh/reactivex/rxjava/compare/19fac95ca82bf40e9837280f5d33e0bfdc81db39f7287cee196325943db19bb2eabb3dd43aeda1a8?srcpr) ||
4961.0,4962,1,0,0,0,0,1,1,0,2x: fix singletakeuntil() other triggering twice this pr fixes the double termination of `singletakeuntil(publisher)` when the `other` fires an item and then completes while ignoring the cancellation in between trying to signal a `cancellationexception` again which is routed to the `rxjavapluginsonerror` and crashing on androidin addition the `maybetakeuntil()` received a unit test verifying this doesnt also happen to itrelated: #4961 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4962?srcpr) is 9560% (diff: 100%)> merging [#4962](https://codecovio/gh/reactivex/rxjava/pull/4962?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by ** powered by [codecov](https://codecovio?srcpr) last update [71330c07818169](https://codecovio/gh/reactivex/rxjava/compare/71330c06186d72548a3443e8b22ef52d995d0e64781816999ae4a1caaed286db04d95c2536184d18?srcpr) ||
4950.0,4972,1,0,0,0,0,1,1,0,improve compose() generics resolves #4950i tested and built with the added tests on java 6 7 and 8 not sure if you want to keep them in before merging since theyre not really functional in nature just there to make sure they compile side-note: gets even better on java 8 which removes the need for a type argument at all in those examples! || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4972?srcpr) is 9563% (diff: 100%)> merging [#4972](https://codecovio/gh/reactivex/rxjava/pull/4972?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **010%**```diff@@ 2x #4972 diff @@ files 591 591 lines 37959 37959 methods 0 0 messages 0 0 branches 5756 5756 + hits 36264 36302 +38 + misses 721 698 -23 + partials 974 959 -15 ```> powered by [codecov](https://codecovio?srcpr) last update [d173b6da7b01f3](https://codecovio/gh/reactivex/rxjava/compare/d173b6d4f8713907f7a38e00da65c30abfb4a7e2a7b01f3939d872c5349c82e50c3ea4f4351ea6d8?srcpr) || thanks! ||
4981.0,4982,1,0,0,1,0,1,1,0,2x: fix observableconcatmapeager bad logic for immediate scalars the operator `observableconcatmapeager` had a bad optimization targeting scalar and callable sources and emitted their values immediately even if it wasnt that particular sources turn for itthe `flowable` is not affected added unit tests for bothreported in #4981 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4982?srcpr) is 9565% (diff: 100%)> merging [#4982](https://codecovio/gh/reactivex/rxjava/pull/4982?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **010%**```diff@@ 2x #4982 diff @@ files 592 592 lines 37977 37968 -9 methods 0 0 messages 0 0 branches 5754 5752 -2 + hits 36287 36320 +33 + misses 720 700 -20 + partials 970 948 -22 ```> powered by [codecov](https://codecovio?srcpr) last update [0a254a864cf7cb](https://codecovio/gh/reactivex/rxjava/compare/0a254a83e5bf2e3d8b2540b34718ed0c9d71b4ce64cf7cb6bf2e8ff15e71a3f7e4a818dd290a00ed?srcpr) ||
4414.0,4987,1,0,0,1,0,1,1,1,"2x: make obscombinelatest consistent with flowable + doc cornercase this pr fixes `observablecombinelatest` to be consistent with `flowablecombinelatest` by not subscribing to additional input sources if the operator reached a terminal state due to a valueless source (that completes or errors) in addition such early termination didnt properly cancel the other sources when `delayerrors true`ive also extended the documentation on the overloads to warn about empty sources that will terminate the operator even with `combinelatestdelayerror` and thus subscription side-effects may not happenthere is a related issue #4414 where the operator should fully consume each input source no matter what and terminate when all terminate im still considering what would be the best way to introduce thisreported in #4986 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4987?srcpr) is 9562% (diff: 100%)> merging [#4987](https://codecovio/gh/reactivex/rxjava/pull/4987?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by ** powered by [codecov](https://codecovio?srcpr) last update [57178274ea2a05](https://codecovio/gh/reactivex/rxjava/compare/57178273acc7a4673d7f0247f295e5288657291a4ea2a0597d0dec7426a5b86aa0679067d423cd24?srcpr) || yaon jan 12 2017 9:25 pm ""david karnok"" wrote:> merged #4987 >> —> you are receiving this because you are subscribed to this thread> reply to this email directly view it on github> or mute> the thread> > > ||"
498.0,4987,1,0,0,1,0,1,1,1,"2x: make obscombinelatest consistent with flowable + doc cornercase this pr fixes `observablecombinelatest` to be consistent with `flowablecombinelatest` by not subscribing to additional input sources if the operator reached a terminal state due to a valueless source (that completes or errors) in addition such early termination didnt properly cancel the other sources when `delayerrors true`ive also extended the documentation on the overloads to warn about empty sources that will terminate the operator even with `combinelatestdelayerror` and thus subscription side-effects may not happenthere is a related issue #4414 where the operator should fully consume each input source no matter what and terminate when all terminate im still considering what would be the best way to introduce thisreported in #4986 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4987?srcpr) is 9562% (diff: 100%)> merging [#4987](https://codecovio/gh/reactivex/rxjava/pull/4987?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by ** powered by [codecov](https://codecovio?srcpr) last update [57178274ea2a05](https://codecovio/gh/reactivex/rxjava/compare/57178273acc7a4673d7f0247f295e5288657291a4ea2a0597d0dec7426a5b86aa0679067d423cd24?srcpr) || yaon jan 12 2017 9:25 pm ""david karnok"" wrote:> merged #4987 >> —> you are receiving this because you are subscribed to this thread> reply to this email directly view it on github> or mute> the thread> > > ||"
4993.0,5002,1,0,1,1,0,1,1,1,2x: add scheduler creation factories resolves #4993this is a pretty vanilla copy from rxjava 1s implementation note that i had to tune newthread scheduler to not be a singleton to support thiswe had talked about borrowing from project reactors apis for different overloads let me know if you think we should add more fine-grained controls through these one other thing im worried about - is `schedulers` the best place for this? rxjava 1 had them in its `rxjavahooks` class my concern is that having these alongside the normal `io()`/`computation()`/etc factories will make them look overly inviting for use and accidental abuse || > one other thing im worried about - is schedulers the best place for this? rxjava 1 had them in its rxjavahooks class my concern is that having these alongside the normal io()/computation()/etc factories will make them look overly inviting for use and accidental abuseanother problem is that people will try to override the scheduler-init with these method calls for `rxjavaplugins` but referencing `schedulers` will init the default schedulers regardlessindeed `rxjavaplugins` sounds like a better place for the methods but keep only the `threadfactory` variants || heading to bed right now but will update the pr in the morning with requested changes also let me know if theres anywhere i should put tests as i wasnt sure what the right place would be || > indeed rxjavaplugins sounds like a better place for the methods but keep only the threadfactory variantssounds good to me will do that in my updates tomorrow || yes tests that verify the custom thread factory actually worked by checking a custom thread name for each case || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/5002?srcpr) is 9546% (diff: 7948%)> merging [#5002](https://codecovio/gh/reactivex/rxjava/pull/5002?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **002%**```diff@@ 2x #5002 diff @@ files 592 592 lines 37989 38009 +20 methods 0 0 messages 0 0 branches 5772 5772 + hits 36257 36284 +27 + misses 764 761 -3 + partials 968 964 -4 ```> powered by [codecov](https://codecovio?srcpr) last update [9c34eb12ae2414](https://codecovio/gh/reactivex/rxjava/compare/9c34eb12a22359c9dc3bbaf07a3410e7523050c52ae2414282fb3c2af70388b357913a90c93514b7?srcpr) || > indeed rxjavaplugins sounds like a better place for the methods8b4d461> but keep only the threadfactory variants8009333also tweaked the naming a bit `newnewthread` was a little weird (went with `create`) and added `scheduler` suffix since were not in the `schedulers` class anymore> yes tests that verify the custom thread factory actually worked by checking a custom thread name for each casei tried setting this up matching some of the cdl-based approaches in the plugin tests but want able to get it working (just hangs) pushed what i had in a1029b4 any insight? || heading on vacation for a couple weeks but let me know what you think of getting the tests to work i should have some time here and there to update the pr || ive already told you: use the runnable in the factory method on the thread constructor || > use the runnable in the factory method on the thread constructorarent i just testing the test threadfactory implementations then and not that the schedulers are hooked up properly to power the scheduler? || https://docsoraclecom/javase/8/docs/api/java/lang/threadhtmlhttps://githubcom/reactivex/rxjava/blob/2x/src/main/java/io/reactivex/internal/schedulers/rxthreadfactoryjava#l66 || whats the problem with the tests? they seem to be verifying that the supplied factory was used || oh you didnt pass the supplied `runnable` when calling `new thread()` inside the factory || > oh you didnt pass the supplied runnable when calling new thread() inside the factoryah! this is what i was missing thanks for pointing that out ive updated tests (which should now all be passing) and also made them a bit more robust (full integration with schedulers) to simulate a more real world use case || failing test looks like a flake || wait no its not reprod locally will fix || fixed i think i added manual shutdowns of schedulers after theyre done only io had this lifecycle issue over tests but i did the shutdown in all to be safe || ok this time it seems actually flaky as the same commit passed in a different travis job against my fork - https://travis-ciorg/hzsweers/rxjava/builds/195074173 || thanks! ||
5004.0,5005,1,0,0,1,0,1,1,1,2x: executorschedulerscheduledirect to report isdisposed on complete this pr makes the `disposable` returned by the `executorschedulerscheduledirect()` report `isdisposed` `true` if the task has actually finished which should now be consistent with the `worker` behavior of other schedulersreported in #5004 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/5005?srcpr) is 9561% (diff: 7931%)> merging [#5005](https://codecovio/gh/reactivex/rxjava/pull/5005?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **017%**```diff@@ 2x #5005 diff @@ files 592 592 lines 37989 38011 +22 methods 0 0 messages 0 0 branches 5772 5777 +5 + hits 36257 36346 +89 + misses 764 720 -44 + partials 968 945 -23 ```> powered by [codecov](https://codecovio?srcpr) last update [9c34eb1dd0c96d](https://codecovio/gh/reactivex/rxjava/compare/9c34eb12a22359c9dc3bbaf07a3410e7523050c5dd0c96d4b49cb86bb54242aa3fc1e85e76f792c0?srcpr) ||
495.0,5007,1,0,0,0,0,0,1,0,1x: update sample(time) diagram to indicate emission of last this pr updates the 1x `sample(time)` diagram to indicate the last value is emitted when the sequence completes it is the same (style) as for 2x:default scheduler:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/sampleemitlast1xpng)custom scheduler:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/samplesemitlast1xpng)related: #4952 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/5007?srcpr) is 8421% (diff: 100%)> merging [#5007](https://codecovio/gh/reactivex/rxjava/pull/5007?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **001%**```diff@@ 1x #5007 diff @@ files 288 288 lines 17806 17806 methods 0 0 messages 0 0 branches 2698 2698 + hits 14992 14995 +3 + misses 1961 1957 -4 - partials 853 854 +1 ```> powered by [codecov](https://codecovio?srcpr) last update [9f025630a353d3](https://codecovio/gh/reactivex/rxjava/compare/9f025638a2fb8e2579a1af5490ef2f608f81414d0a353d33b7cceb3c8f077b5439fc8130caa03839?srcpr) ||
5024.0,5027,1,0,0,1,0,1,1,0,2x: dedicated singlezip implementation no dispose on all-success this adds a dedicated implementation for zipping `single`s (adapted from `maybezipx`)routing the original `zip` through `flowable` added the usually unwanted behavior of cancelling the sources if one of them reports a completion after a row has been consumed from all (when converted to `flowable` `singleobserveronsuccess` becomes `subscriberonnext` + `oncomplete`) since there is only `onsuccess` and `onerror` in `single` there is no need to dispose the sources once all signalled their only `onsuccess`related: #5024 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/5027?srcpr) is 9559% (diff: 9924%)> merging [#5027](https://codecovio/gh/reactivex/rxjava/pull/5027?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **010%**```diff@@ 2x #5027 diff @@ files 609 611 +2 lines 39427 39538 +111 methods 0 0 messages 0 0 branches 6030 6051 +21 + hits 37731 37796 +65 - misses 738 757 +19 - partials 958 985 +27 ```> powered by [codecov](https://codecovio?srcpr) last update [d93ee2bddcbc3b](https://codecovio/gh/reactivex/rxjava/compare/d93ee2bbbb8d8c9949b546974c99032f60c3d09addcbc3be2f56b03f6296b98fdb63863906672b43?srcpr) ||
5044.0,5047,1,0,0,1,0,1,1,1,"2x: document and test amb subscription ordering refs #5044 once wording and tests are approved ill port to 1x as well || hmm i seem to be fighting the cool documentation checker which is being a bit too clever in this instance im using the word ""subscription"" at the beginning of a sentence which it thinks means `subscription` the type ill figure out a wording tweak to make it end up as a lowercase ""subscription"" || also with regard to signal types i figure the other tests cover those already so in these cases were just guarding against ordering changes || yes lowercase it as `subscription` is interpreted as the reference to the type || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5047?srcpr&elh1) report> merging [#5047](https://codecovio/gh/reactivex/rxjava/pull/5047?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/0ccc4530776cc18ecfa7a84b8bd6cd02c0c2f092?srcpr&eldesc) will **increase** coverage by `008%````diff@@ coverage diff @@## 2x #5047 +/- ##+ coverage 9552% 956% +008% - complexity 5539 5541 +2 files 612 612 lines 39576 39576 branches 5553 5553 + hits 37804 37838 +34 + misses 773 758 -15 + partials 999 980 -19```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5047?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/compare/0ccc4530776cc18ecfa7a84b8bd6cd02c0c2f092665d59bb8116d24942c9629913a223749e89061f?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `112 (ø)` | :x: || [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/compare/0ccc4530776cc18ecfa7a84b8bd6cd02c0c2f092665d59bb8116d24942c9629913a223749e89061f?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `167 (ø)` | :x: || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/compare/0ccc4530776cc18ecfa7a84b8bd6cd02c0c2f092665d59bb8116d24942c9629913a223749e89061f?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `9929% (ø)` | `130 (ø)` | :x: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/compare/0ccc4530776cc18ecfa7a84b8bd6cd02c0c2f092665d59bb8116d24942c9629913a223749e89061f?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `504 (ø)` | :x: || [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/compare/0ccc4530776cc18ecfa7a84b8bd6cd02c0c2f092665d59bb8116d24942c9629913a223749e89061f?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `520 (ø)` | :x: || [ternal/operators/flowable/flowablesubscribeonjava](https://codecovio/gh/reactivex/rxjava/compare/0ccc4530776cc18ecfa7a84b8bd6cd02c0c2f092665d59bb8116d24942c9629913a223749e89061f?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3vic2nyawjlt24uamf2yq) | `909% (-728%)` | `2% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/compare/0ccc4530776cc18ecfa7a84b8bd6cd02c0c2f092665d59bb8116d24942c9629913a223749e89061f?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9285% (-536%)` | `2% (ø)` | || [rnal/operators/flowable/flowableskiplasttimedjava](https://codecovio/gh/reactivex/rxjava/compare/0ccc4530776cc18ecfa7a84b8bd6cd02c0c2f092665d59bb8116d24942c9629913a223749e89061f?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2tpcexhc3ruaw1lzc5qyxzh) | `9387% (-409%)` | `2% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/compare/0ccc4530776cc18ecfa7a84b8bd6cd02c0c2f092665d59bb8116d24942c9629913a223749e89061f?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9189% (-361%)` | `10% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/compare/0ccc4530776cc18ecfa7a84b8bd6cd02c0c2f092665d59bb8116d24942c9629913a223749e89061f?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9253% (-299%)` | `2% (ø)` | || and [37 more](https://codecovio/gh/reactivex/rxjava/pull/5047/changes?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5047?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5047?srcpr&elfooter) last update [0ccc453665d59b](https://codecovio/gh/reactivex/rxjava/compare/0ccc4530776cc18ecfa7a84b8bd6cd02c0c2f092665d59bb8116d24942c9629913a223749e89061f?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||"
5045.0,5049,1,0,0,1,0,1,1,0,use bounded wildcards for errorhandler (fixes #5045) adding bound wildcards for error handler - fixes #5045 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5049?srcpr&elh1) report> merging [#5049](https://codecovio/gh/reactivex/rxjava/pull/5049?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/00f53ae291b3dd3a0f479045bbcd5b59c187ead9?srcpr&eldesc) will **increase** coverage by `012%````diff@@ coverage diff @@## 2x #5049 +/- ##+ coverage 9553% 9565% +012% - complexity 5540 5547 +7 files 612 612 lines 39576 39576 branches 5553 5553 + hits 37807 37855 +48 + misses 775 742 -33 + partials 994 979 -15```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5049?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/plugins/rxjavapluginsjava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcgx1z2lucy9seephdmfqbhvnaw5zlmphdme) | `100% (ø)` | `138 (ø)` | :x: || [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `8688% (-492%)` | `2% (ø)` | || [ternal/operators/flowable/flowablesubscribeonjava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3vic2nyawjlt24uamf2yq) | `9454% (-364%)` | `2% (ø)` | || [reactivex/internal/operators/maybe/maybeusingjava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvxnpbmcuamf2yq) | `9797% (-203%)` | `4% (ø)` | || [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `9444% (-186%)` | `10% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9724% (-184%)` | `39% (-1%)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `9444% (-139%)` | `6% (ø)` | || [ors/observable/observablesamplewithobservablejava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnhbxbszvdpdghpynnlcnzhymxllmphdme) | `9759% (-121%)` | `3% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-12%)` | `2% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `975% (-084%)` | `2% (ø)` | || and [28 more](https://codecovio/gh/reactivex/rxjava/pull/5049/changes?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5049?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5049?srcpr&elfooter) last update [00f53aed677bfc](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || /cc @davidmoten || yep that looks fine i can do the others || @akarnokd do you want test coverage of the signature changes? || yes make sure the contravariant consumer now compiles || @jschneider can you add unit tests for this please? || i will add a test yes || added the test || looks like this got a conflict due to changes to rxjavaplugins by other prs could you rebase this onto the head? || yep i am on it || should be good now ||
4876.0,5051,0,0,0,1,0,0,0,0,"feature/#4876 nonnull annotations issue: #4876starting to add @nonnull and @nullable annotationsi decided to add a compileonly dependency to findbugs:jsr305 artifactwe could also use ""ioreactivexannotationsnonnull"" which already exists but there is no ""ioreactivexannotationsnullable"" annotation which is at least as important in my experiencesince these are only annotations it is no problem when the class files are missing at compile time (jls 9612 retention)i have started to add annotations in the scheduler and rxjavapluginsthe test rxjavaplugins contains some invalid checks using null (lines 1353 and following)this pull request is work in progress and should be discussedquestions so far:- use jsr305 (compileonly) or existing annotation in ioreactivex?- (if not using jsr305): use own @nullable annotation or try to get one added to ""ioreactivex""? or skip these completely (which misses the point of the static code analysis)- why has there been tests calling the rxjavapluginson*scheduler with null arguments? can these be removed securely? maybe it wasnt well articulated but based on #5023 i thought we try with just the functional interfaces and come back later if it was not enough> i decided to add a compileonly dependency to findbugs:jsr305 artifactwe rather use our own annotations as most tools allow customizing what annotations to considerexpect futher comments inline || thanks for the feedback i will improve the pull request further ||"
5053.0,5054,1,0,0,0,0,1,1,1,2x: add nullable annotation to simple queue (fixes #5053) as explained in https://githubcom/reactivex/rxjava/issues/5053 simplequeue might return nullto document this behavior a nullable annotation has been added # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5054?srcpr&elh1) report> merging [#5054](https://codecovio/gh/reactivex/rxjava/pull/5054?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/87208280d40ee23ab5499b08c5664dc1826d5c3a?srcpr&eldesc) will **increase** coverage by `001%````diff@@ coverage diff @@## 2x #5054 +/- ##+ coverage 9565% 9567% +001% + complexity 5546 5543 -3 files 612 612 lines 39576 39576 branches 5553 5553 + hits 37857 37863 +6 - misses 737 744 +7 + partials 982 969 -13```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5054?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rnal/operators/observable/observablefromarrayjava](https://codecovio/gh/reactivex/rxjava/compare/87208280d40ee23ab5499b08c5664dc1826d5c3a9c62d2f53730c900e6bf24d5d204005089f10f10?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzyb21bcnjhes5qyxzh) | `100% (ø)` | `3 (ø)` | :x: || [rnal/operators/observable/observablerangelongjava](https://codecovio/gh/reactivex/rxjava/compare/87208280d40ee23ab5499b08c5664dc1826d5c3a9c62d2f53730c900e6bf24d5d204005089f10f10?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjhbmdltg9uzy5qyxzh) | `100% (ø)` | `2 (ø)` | :x: || [perators/maybe/maybeflatmapiterableobservablejava](https://codecovio/gh/reactivex/rxjava/compare/87208280d40ee23ab5499b08c5664dc1826d5c3a9c62d2f53730c900e6bf24d5d204005089f10f10?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlrmxhde1hcel0zxjhymxlt2jzzxj2ywjszs5qyxzh) | `9866% (ø)` | `2 (ø)` | :x: || [vex/internal/operators/flowable/flowablerangejava](https://codecovio/gh/reactivex/rxjava/compare/87208280d40ee23ab5499b08c5664dc1826d5c3a9c62d2f53730c900e6bf24d5d204005089f10f10?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumfuz2uuamf2yq) | `969% (ø)` | `3 (ø)` | :x: || [x/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/compare/87208280d40ee23ab5499b08c5664dc1826d5c3a9c62d2f53730c900e6bf24d5d204005089f10f10?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlr3jvdxbces5qyxzh) | `9501% (-063%)` | `2 (ø)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/87208280d40ee23ab5499b08c5664dc1826d5c3a9c62d2f53730c900e6bf24d5d204005089f10f10?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9846% (ø)` | `28 (ø)` | :x: || [eactivex/internal/disposables/emptydisposablejava](https://codecovio/gh/reactivex/rxjava/compare/87208280d40ee23ab5499b08c5664dc1826d5c3a9c62d2f53730c900e6bf24d5d204005089f10f10?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvrw1wdhleaxnwb3nhymxllmphdme) | `100% (ø)` | `17 (ø)` | :x: || [nal/operators/observable/observablescalarxmapjava](https://codecovio/gh/reactivex/rxjava/compare/87208280d40ee23ab5499b08c5664dc1826d5c3a9c62d2f53730c900e6bf24d5d204005089f10f10?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnjywxhclhnyxauamf2yq) | `9655% (ø)` | `7 (ø)` | :x: || [internal/operators/flowable/flowableobserveonjava](https://codecovio/gh/reactivex/rxjava/compare/87208280d40ee23ab5499b08c5664dc1826d5c3a9c62d2f53730c900e6bf24d5d204005089f10f10?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlt2jzzxj2zu9ulmphdme) | `971% (+115%)` | `3 (ø)` | :x: || [internal/operators/flowable/flowablerangelongjava](https://codecovio/gh/reactivex/rxjava/compare/87208280d40ee23ab5499b08c5664dc1826d5c3a9c62d2f53730c900e6bf24d5d204005089f10f10?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumfuz2vmb25nlmphdme) | `9175% (ø)` | `3 (ø)` | :x: || and [81 more](https://codecovio/gh/reactivex/rxjava/pull/5054/changes?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5054?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5054?srcpr&elfooter) last update [87208289c62d2f](https://codecovio/gh/reactivex/rxjava/compare/87208280d40ee23ab5499b08c5664dc1826d5c3a9c62d2f53730c900e6bf24d5d204005089f10f10?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
4876.0,5055,1,0,0,0,0,1,1,0,2x: feature/#4876 more null checks i have added some more null checks to help the static code analysisi think i have also fixed one possible npe in newthreadworker # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5055?srcpr&elh1) report> merging [#5055](https://codecovio/gh/reactivex/rxjava/pull/5055?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/00f53ae291b3dd3a0f479045bbcd5b59c187ead9?srcpr&eldesc) will **increase** coverage by `005%````diff@@ coverage diff @@## 2x #5055 +/- ##+ coverage 9553% 9558% +005% - complexity 5540 5544 +4 files 612 612 lines 39576 39577 +1 branches 5553 5554 +1 + hits 37807 37831 +24 + misses 775 754 -21 + partials 994 992 -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5055?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [operators/flowable/flowablewithlatestfrommanyjava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9339b6b8ccc70bbecb9404ea4b394751b0a345cb8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlv2l0aexhdgvzdezyb21nyw55lmphdme) | `9767% (ø)` | `7 (ø)` | :x: || [rnal/operators/flowable/flowablecombinelatestjava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9339b6b8ccc70bbecb9404ea4b394751b0a345cb8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq29tymluzuxhdgvzdc5qyxzh) | `9243% (ø)` | `8 (ø)` | :x: || [ators/observable/observablewithlatestfrommanyjava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9339b6b8ccc70bbecb9404ea4b394751b0a345cb8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpdghmyxrlc3rgcm9ttwfues5qyxzh) | `9919% (ø)` | `7 (ø)` | :x: || [perators/maybe/maybeflatmapiterableobservablejava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9339b6b8ccc70bbecb9404ea4b394751b0a345cb8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlrmxhde1hcel0zxjhymxlt2jzzxj2ywjszs5qyxzh) | `100% (+133%)` | `2 (ø)` | :x: || [reactivex/internal/schedulers/newthreadworkerjava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9339b6b8ccc70bbecb9404ea4b394751b0a345cb8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ozxduahjlywrxb3jrzxiuamf2yq) | `100% (ø)` | `15 (+1)` | :white_check_mark: || [ivex/internal/schedulers/computationschedulerjava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9339b6b8ccc70bbecb9404ea4b394751b0a345cb8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9db21wdxrhdglvblnjagvkdwxlci5qyxzh) | `9696% (ø)` | `13 (ø)` | :x: || [rnal/subscribers/singlepostcompletesubscriberjava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9339b6b8ccc70bbecb9404ea4b394751b0a345cb8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyawjlcnmvu2luz2xlug9zdenvbxbszxrlu3vic2nyawjlci5qyxzh) | `9487% (-513%)` | `14% (-1%)` | || [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9339b6b8ccc70bbecb9404ea4b394751b0a345cb8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `8688% (-492%)` | `2% (ø)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9339b6b8ccc70bbecb9404ea4b394751b0a345cb8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9384% (-462%)` | `27% (-1%)` | || [reactivex/internal/operators/maybe/maybeusingjava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9339b6b8ccc70bbecb9404ea4b394751b0a345cb8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvxnpbmcuamf2yq) | `9595% (-405%)` | `4% (ø)` | || and [40 more](https://codecovio/gh/reactivex/rxjava/pull/5055/changes?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5055?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5055?srcpr&elfooter) last update [00f53ae339b6b8](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9339b6b8ccc70bbecb9404ea4b394751b0a345cb8?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5045.0,5058,1,0,0,1,0,1,1,0,feature/#5045 more generics in rxjavaplugins i widened the bounds for the functions looks good for merelated to #5045 looks like this needs rebasing im sorrry im trying to merge your prs in proper order but multiple recent prs change the same file(s) || yeah no problem rebasing isnt too difficult -) || fixed import and rebased || looks like there is a [compilation error](https://travis-ciorg/reactivex/rxjava/builds/198621003#l190) with the changes || uups fixed it (at least i hope) || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5058?srcpr&elh1) report> merging [#5058](https://codecovio/gh/reactivex/rxjava/pull/5058?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/14ea26be82b8b5fc8fa53eba84b553d727e8475f?srcpr&eldesc) will **increase** coverage by `-008%````diff@@ coverage diff @@## 2x #5058 +/- ##- coverage 9565% 9558% -008% + complexity 5544 5538 -6 files 612 612 lines 39575 39575 branches 5554 5554 - hits 37857 37828 -29 - misses 746 759 +13 - partials 972 988 +16```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5058?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/plugins/rxjavapluginsjava](https://codecovio/gh/reactivex/rxjava/compare/14ea26be82b8b5fc8fa53eba84b553d727e8475f4ae8c82cfcadcce62abb8a220040ee3b33e74e4b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcgx1z2lucy9seephdmfqbhvnaw5zlmphdme) | `100% (ø)` | `138 (ø)` | :x: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/compare/14ea26be82b8b5fc8fa53eba84b553d727e8475f4ae8c82cfcadcce62abb8a220040ee3b33e74e4b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `909% (-607%)` | `9% (-1%)` | || [reactivex/internal/operators/maybe/maybeusingjava](https://codecovio/gh/reactivex/rxjava/compare/14ea26be82b8b5fc8fa53eba84b553d727e8475f4ae8c82cfcadcce62abb8a220040ee3b33e74e4b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvxnpbmcuamf2yq) | `9393% (-607%)` | `4% (ø)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/compare/14ea26be82b8b5fc8fa53eba84b553d727e8475f4ae8c82cfcadcce62abb8a220040ee3b33e74e4b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8497% (-57%)` | `56% (ø)` | || [ternal/operators/completable/completableusingjava](https://codecovio/gh/reactivex/rxjava/compare/14ea26be82b8b5fc8fa53eba84b553d727e8475f4ae8c82cfcadcce62abb8a220040ee3b33e74e4b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvxnpbmcuamf2yq) | `9523% (-477%)` | `4% (ø)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/14ea26be82b8b5fc8fa53eba84b553d727e8475f4ae8c82cfcadcce62abb8a220040ee3b33e74e4b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9384% (-462%)` | `27% (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/compare/14ea26be82b8b5fc8fa53eba84b553d727e8475f4ae8c82cfcadcce62abb8a220040ee3b33e74e4b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9215% (-458%)` | `2% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/compare/14ea26be82b8b5fc8fa53eba84b553d727e8475f4ae8c82cfcadcce62abb8a220040ee3b33e74e4b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `96% (-4%)` | `33% (-2%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/compare/14ea26be82b8b5fc8fa53eba84b553d727e8475f4ae8c82cfcadcce62abb8a220040ee3b33e74e4b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `945% (-33%)` | `2% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/compare/14ea26be82b8b5fc8fa53eba84b553d727e8475f4ae8c82cfcadcce62abb8a220040ee3b33e74e4b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || and [28 more](https://codecovio/gh/reactivex/rxjava/pull/5058/changes?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5058?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5058?srcpr&elfooter) last update [14ea26b4ae8c82](https://codecovio/gh/reactivex/rxjava/compare/14ea26be82b8b5fc8fa53eba84b553d727e8475f4ae8c82cfcadcce62abb8a220040ee3b33e74e4b?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5060.0,5064,1,0,0,1,0,1,1,1,2x: fix replay() cancel/dispose npe this pr fixes both `flowablereplay()` and `observablereplay()` throwing a `nullpointerexception` if the connection is disconnect before the upstream calls `onsubscribe` on the connection being established in practice this requires an async cancellation to happen through `refcount()unsubscribeon()` for example the validation tests simulate this by not calling `onsubscribe` until the synchronous connect/disconnect happensreported in #5060
4253.0,5086,1,0,1,0,1,1,1,1,1x: deprecate create() add alternatives looks like `create()` wont go away unless we get the ide mark it someway such as being deprecatedthis pr deprecates `create()` and adds `unsafecreate` for internal use and deprecate-renames `fromemitter` to `create(action1 backpressuremode)`there was an earlier attempt at deprecating `create` #4253 but it was not followed up this pr executes what i suggested in one of the [comments](https://githubcom/reactivex/rxjava/pull/4253#issuecomment-235913860) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5086?srcpr&elh1) report> merging [#5086](https://codecovio/gh/reactivex/rxjava/pull/5086?srcpr&eldesc) into [1x](https://codecovio/gh/reactivex/rxjava/commit/a37e292cfeb6c46559c397d730966d402b106fe5?srcpr&eldesc) will **decrease** coverage by `-001%````diff@@ coverage diff @@## 1x #5086 +/- ##- coverage 8424% 8424% -001% complexity 2859 2859 files 288 288 lines 17805 17807 +2 branches 2420 2420 + hits 15000 15001 +1 - misses 1954 1955 +1 partials 851 851```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5086?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [java/rx/plugins/rxjavaobservableexecutionhookjava](https://codecovio/gh/reactivex/rxjava/compare/a37e292cfeb6c46559c397d730966d402b106fe52027ff0f3c67ff0f619701c8df3b0baa0bfcbe83?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9wbhvnaw5zl1j4smf2yu9ic2vydmfibgvfegvjdxrpb25ib29rlmphdme) | `100% (ø)` | `6 (ø)` | :x: || [src/main/java/rx/observables/asynconsubscribejava](https://codecovio/gh/reactivex/rxjava/compare/a37e292cfeb6c46559c397d730966d402b106fe52027ff0f3c67ff0f619701c8df3b0baa0bfcbe83?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9vynnlcnzhymxlcy9bc3luy09uu3vic2nyawjllmphdme) | `6666% (ø)` | `5 (ø)` | :x: || [src/main/java/rx/observables/synconsubscribejava](https://codecovio/gh/reactivex/rxjava/compare/a37e292cfeb6c46559c397d730966d402b106fe52027ff0f3c67ff0f619701c8df3b0baa0bfcbe83?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9vynnlcnzhymxlcy9tew5jt25tdwjzy3jpymuuamf2yq) | `9185% (ø)` | `8 (ø)` | :x: || [src/main/java/rx/singlejava](https://codecovio/gh/reactivex/rxjava/compare/a37e292cfeb6c46559c397d730966d402b106fe52027ff0f3c67ff0f619701c8df3b0baa0bfcbe83?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9taw5nbguuamf2yq) | `7008% (ø)` | `77 (ø)` | :x: || [ain/java/rx/observables/connectableobservablejava](https://codecovio/gh/reactivex/rxjava/compare/a37e292cfeb6c46559c397d730966d402b106fe52027ff0f3c67ff0f619701c8df3b0baa0bfcbe83?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9vynnlcnzhymxlcy9db25uzwn0ywjszu9ic2vydmfibguuamf2yq) | `100% (ø)` | `7 (ø)` | :x: || [in/java/rx/internal/operators/operatorpublishjava](https://codecovio/gh/reactivex/rxjava/compare/a37e292cfeb6c46559c397d730966d402b106fe52027ff0f3c67ff0f619701c8df3b0baa0bfcbe83?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jqdwjsaxnolmphdme) | `7848% (ø)` | `8 (ø)` | :x: || [a/rx/internal/operators/emptyobservableholderjava](https://codecovio/gh/reactivex/rxjava/compare/a37e292cfeb6c46559c397d730966d402b106fe52027ff0f3c67ff0f619701c8df3b0baa0bfcbe83?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvrw1wdhlpynnlcnzhymxlsg9szgvylmphdme) | `100% (ø)` | `3 (ø)` | :x: || [internal/operators/onsubscribeflatteniterablejava](https://codecovio/gh/reactivex/rxjava/compare/a37e292cfeb6c46559c397d730966d402b106fe52027ff0f3c67ff0f619701c8df3b0baa0bfcbe83?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt25tdwjzy3jpymvgbgf0dgvusxrlcmfibguuamf2yq) | `8846% (ø)` | `4 (ø)` | :x: || [/java/rx/internal/operators/onsubscribecreatejava](https://codecovio/gh/reactivex/rxjava/compare/a37e292cfeb6c46559c397d730966d402b106fe52027ff0f3c67ff0f619701c8df3b0baa0bfcbe83?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt25tdwjzy3jpymvdcmvhdguuamf2yq) | `9581% (ø)` | `6 (?)` | || [/rx/internal/util/scalarsynchronousobservablejava](https://codecovio/gh/reactivex/rxjava/compare/a37e292cfeb6c46559c397d730966d402b106fe52027ff0f3c67ff0f619701c8df3b0baa0bfcbe83?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc91dglsl1njywxhcln5bmnocm9ub3vzt2jzzxj2ywjszs5qyxzh) | `90% (ø)` | `8 (ø)` | :x: || and [12 more](https://codecovio/gh/reactivex/rxjava/pull/5086/changes?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5086?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5086?srcpr&elfooter) last update [a37e292a072448](https://codecovio/gh/reactivex/rxjava/compare/a37e292cfeb6c46559c397d730966d402b106fe5a0724484610fe8de78856eae720af8ca8019d92a?srcpr&elfooter&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5067.0,5087,1,0,0,1,0,0,1,0,"2x: correct marble diagram dimensions this fixes part of #4535 as requested in #5067these changes were generated using the following script:```sh#!/usr/bin/env bashfind -name *java -print0 \ | xargs -0 grep ^\s*\* \ | grep -op https*?\png \ | sort -u \ | while read -r i do echo ""updating ${i}"" # gather image details data""$(identify ` tags referencing the image find -name *java -print0 \ | xargs -0 perl -i -p -e s merging [#5087](https://codecovio/gh/reactivex/rxjava/pull/5087?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/8819cc933e26449751535bc48ba2f10852c9b96d?srcpr&eldesc) will **increase** coverage by `007%````diff@@ coverage diff @@## 2x #5087 +/- ##+ coverage 9551% 9559% +007% - complexity 5547 5550 +3 files 614 614 lines 39580 39580 branches 5559 5559 + hits 37805 37836 +31 + misses 778 758 -20 + partials 997 986 -11```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5087?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/java/io/reactivex/processors/replayprocessorjava](https://codecovio/gh/reactivex/rxjava/compare/8819cc933e26449751535bc48ba2f10852c9b96d066f8e3dc58db51ac6ce8f7416550ba442ad16c9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9szxbsyxlqcm9jzxnzb3iuamf2yq) | `9875% (+02%)` | `49 (ø)` | :x: || [ain/java/io/reactivex/subjects/publishsubjectjava](https://codecovio/gh/reactivex/rxjava/compare/8819cc933e26449751535bc48ba2f10852c9b96d066f8e3dc58db51ac6ce8f7416550ba442ad16c9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvuhvibglzafn1ymply3quamf2yq) | `9787% (ø)` | `40 (ø)` | :x: || [ernal/operators/flowable/blockingflowablenextjava](https://codecovio/gh/reactivex/rxjava/compare/8819cc933e26449751535bc48ba2f10852c9b96d066f8e3dc58db51ac6ce8f7416550ba442ad16c9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0jsb2nraw5nrmxvd2fibgvozxh0lmphdme) | `9516% (ø)` | `2 (ø)` | :x: || [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/compare/8819cc933e26449751535bc48ba2f10852c9b96d066f8e3dc58db51ac6ce8f7416550ba442ad16c9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `520 (ø)` | :x: || [main/java/io/reactivex/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/compare/8819cc933e26449751535bc48ba2f10852c9b96d066f8e3dc58db51ac6ce8f7416550ba442ad16c9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvumvwbgf5u3viamvjdc5qyxzh) | `9711% (ø)` | `51 (ø)` | :x: || [ators/observable/blockingobservablemostrecentjava](https://codecovio/gh/reactivex/rxjava/compare/8819cc933e26449751535bc48ba2f10852c9b96d066f8e3dc58db51ac6ce8f7416550ba442ad16c9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvqmxvy2tpbmdpynnlcnzhymxltw9zdfjly2vudc5qyxzh) | `100% (ø)` | `2 (ø)` | :x: || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/compare/8819cc933e26449751535bc48ba2f10852c9b96d066f8e3dc58db51ac6ce8f7416550ba442ad16c9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8963% (+466%)` | `55 (-1)` | :x: || [l/operators/observable/blockingobservablenextjava](https://codecovio/gh/reactivex/rxjava/compare/8819cc933e26449751535bc48ba2f10852c9b96d066f8e3dc58db51ac6ce8f7416550ba442ad16c9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvqmxvy2tpbmdpynnlcnzhymxltmv4dc5qyxzh) | `9836% (ø)` | `2 (ø)` | :x: || [n/java/io/reactivex/parallel/parallelflowablejava](https://codecovio/gh/reactivex/rxjava/compare/8819cc933e26449751535bc48ba2f10852c9b96d066f8e3dc58db51ac6ce8f7416550ba442ad16c9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcgfyywxszwwvugfyywxszwxgbg93ywjszs5qyxzh) | `100% (ø)` | `41 (ø)` | :x: || [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/compare/8819cc933e26449751535bc48ba2f10852c9b96d066f8e3dc58db51ac6ce8f7416550ba442ad16c9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `112 (ø)` | :x: || and [43 more](https://codecovio/gh/reactivex/rxjava/pull/5087/changes?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5087?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5087?srcpr&elfooter) last update [8819cc9066f8e3](https://codecovio/gh/reactivex/rxjava/compare/8819cc933e26449751535bc48ba2f10852c9b96d066f8e3dc58db51ac6ce8f7416550ba442ad16c9?srcpr&elfooter&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||"
5089.0,5090,1,0,0,0,0,1,1,1,2x: fix scan(seed f) to emit accumulated values asap for performance reasons the `scan` delayed the emission of accumulated items by one which worked well with sources that pushed new items frequently unfortunately if the source stopped emitting (without completion) the very last accumulated item was stuck and no way to get it out of `scan` i considered this type of use being rare but apparently i was wrongthe pr changes `scan` to emit accumulated items including the initial seed as soon as there is request for it the operator now uses a stable-prefetch queue-drain found throughout other operators such as `observeon` remark: sadly request trickery such as capturing the first `request` call emitting the seed and then requesting n - 1 doesnt work because if the `request()` call itself happens from another thread and the source is empty the `onnext` and `oncomplete` could run concurrentlyreported in #5089
4735.0,5091,1,0,0,0,0,0,1,0,1x: create+subscribeon avoid same-pool deadlock this pr allows to fix the same-pool deadlock that may happen with `create()` (formerly `fromemitter`) and `subscribeon` as `subscribeon` by default schedules the requests behind a running emitter and thus the internal request amount may not get updated leading to unnecessary datalosssee #4735in the update if `subscribeon` detects its upstream is `onsubscribecreate` it no longer reschedules requests for it for other non-immediate cases a new overload allows specifying the `requeston` parameter that should be `false` if there is a `create(action1 backpressurestrategy)` in the sequence upstream
4988.0,5092,1,0,0,0,0,1,1,1,"1x: add singlemerge(obs) obsflatmapsingle & flatmapcompletable this pr adds specialized operators for merging `single` and `completable` sources: - `singlemerge(observable >)` + `maxconcurrency` overload - `singlemergedelayerror(observable >)` + `maxconcurrency` overload - `observableflatmapsingle(func1 >)` + `delayerrors` + `delayerrors maxconcurrency` overloads - `observableflatmapcompletable(func1 )` + `delayerrors` + `delayerrors maxconcurrency` overloadsall of these return `observable`this replaces #4988*sidenote: for some time now contributor(s) from certain party tend to contribute low quality or inadequate code and ""disappear"" pretty quickly i cant be sure this is just lazyness or a deliberate and elaborate scheme to extract free work out of me for their own partys benefit but it is annoying as hell* # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5092?srcpr&elh1) report> merging [#5092](https://codecovio/gh/reactivex/rxjava/pull/5092?srcpr&eldesc) into [1x](https://codecovio/gh/reactivex/rxjava/commit/828db38e3c895a66dab440652c07427455da226d?srcpr&eldesc) will **increase** coverage by `017%`> the diff coverage is `9285%````diff@@ coverage diff @@## 1x #5092 +/- ##+ coverage 8412% 8429% +017% - complexity 2852 2874 +22 files 288 290 +2 lines 17818 18070 +252 branches 2420 2468 +48 + hits 14989 15233 +244 misses 1968 1968 - partials 861 869 +8```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5092?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/rx/observablejava](https://codecovio/gh/reactivex/rxjava/compare/828db38e3c895a66dab440652c07427455da226dcf58fb08aa67559671ae661e16a81151ca978c87?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pynnlcnzhymxllmphdme) | `9945% (ø)` | `448 (+6)` | :white_check_mark: || [src/main/java/rx/singlejava](https://codecovio/gh/reactivex/rxjava/compare/828db38e3c895a66dab440652c07427455da226dcf58fb08aa67559671ae661e16a81151ca978c87?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9taw5nbguuamf2yq) | `7056% (+048%)` | `81 (+4)` | :white_check_mark: || [x/internal/operators/onsubscribeflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/compare/828db38e3c895a66dab440652c07427455da226dcf58fb08aa67559671ae661e16a81151ca978c87?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt25tdwjzy3jpymvgbgf0twfwu2luz2xllmphdme) | `923% (ø)` | `4 (?)` | || [ernal/operators/onsubscribeflatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/compare/828db38e3c895a66dab440652c07427455da226dcf58fb08aa67559671ae661e16a81151ca978c87?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt25tdwjzy3jpymvgbgf0twfwq29tcgxldgfibguuamf2yq) | `9302% (ø)` | `4 (?)` | || [ava/rx/internal/operators/operatormaterializejava](https://codecovio/gh/reactivex/rxjava/compare/828db38e3c895a66dab440652c07427455da226dcf58fb08aa67559671ae661e16a81151ca978c87?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jnyxrlcmlhbgl6zs5qyxzh) | `8524% (-328%)` | `3% (ø)` | || [n/java/rx/subscriptions/compositesubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/828db38e3c895a66dab440652c07427455da226dcf58fb08aa67559671ae661e16a81151ca978c87?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9zdwjzy3jpchrpb25zl0nvbxbvc2l0zvn1ynnjcmlwdglvbi5qyxzh) | `7402% (-26%)` | `23% (-1%)` | || [/rx/internal/schedulers/cachedthreadschedulerjava](https://codecovio/gh/reactivex/rxjava/compare/828db38e3c895a66dab440652c07427455da226dcf58fb08aa67559671ae661e16a81151ca978c87?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9zy2hlzhvszxjzl0nhy2hlzfrocmvhzfnjagvkdwxlci5qyxzh) | `8737% (-195%)` | `6% (ø)` | || [main/java/rx/internal/operators/operatormergejava](https://codecovio/gh/reactivex/rxjava/compare/828db38e3c895a66dab440652c07427455da226dcf58fb08aa67559671ae661e16a81151ca978c87?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jnzxjnzs5qyxzh) | `8683% (+023%)` | `7% (ø)` | :x: || and [4 more](https://codecovio/gh/reactivex/rxjava/pull/5092/changes?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5092?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5092?srcpr&elfooter) last update [828db38cf58fb0](https://codecovio/gh/reactivex/rxjava/compare/828db38e3c895a66dab440652c07427455da226dcf58fb08aa67559671ae661e16a81151ca978c87?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||"
5100.0,5101,1,0,0,1,0,1,1,1,2x: fix maybeconcat() subscribe-after-cancel verify others this pr fixes `maybeconcatx` subscribing to the next source when the downstream cancelled the `flowable` sequence from its `onnext` this resulted in executing the subscription side-effects of the source to be immediately cancelled when it called `onsubscribe` on concats `maybeobserver`in addition tests were added to verify the other types dont have this kind of a problemrelated #5100
5104.0,5106,1,0,0,0,0,1,1,0,2x: fix window(time size) not completing windows on timeout this pr fixes the operators `flowablewindow(time size)` and `observablewindow(time size)` to complete the current window if the time elapses before the size limit is reachedreported in #5104 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5106?srcpr&elh1) report> merging [#5106](https://codecovio/gh/reactivex/rxjava/pull/5106?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7?srcpr&eldesc) will **increase** coverage by `006%`> the diff coverage is `100%````diff@@ coverage diff @@## 2x #5106 +/- ##+ coverage 956% 9567% +006% + complexity 5558 5556 -2 files 615 615 lines 39703 39705 +2 branches 5583 5583 + hits 37959 37986 +27 + misses 758 745 -13 + partials 986 974 -12```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5106?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ternal/operators/flowable/flowablewindowtimedjava](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlv2luzg93vgltzwquamf2yq) | `8386% (+026%)` | `4 (ø)` | :x: || [al/operators/observable/observablewindowtimedjava](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvd1rpbwvklmphdme) | `8784% (+003%)` | `4 (ø)` | :x: || [a/io/reactivex/processors/serializedprocessorjava](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9tzxjpywxpemvkuhjvy2vzc29ylmphdme) | `9255% (-532%)` | `26% (-2%)` | || [rnal/operators/completable/completabletimeoutjava](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvgltzw91dc5qyxzh) | `923% (-513%)` | `2% (ø)` | || [erators/completable/completableconcatiterablejava](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0sxrlcmfibguuamf2yq) | `9591% (-409%)` | `2% (ø)` | || [operators/observable/observableconcatmapeagerjava](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunvbmnhde1hcevhz2vylmphdme) | `9729% (-217%)` | `2% (ø)` | || [reactivex/internal/operators/maybe/maybeusingjava](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvxnpbmcuamf2yq) | `9393% (-203%)` | `4% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [activex/internal/disposables/disposablehelperjava](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvrglzcg9zywjszuhlbhblci5qyxzh) | `9814% (-186%)` | `27% (-1%)` | || [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `9629% (-186%)` | `10% (-1%)` | || and [37 more](https://codecovio/gh/reactivex/rxjava/pull/5106/changes?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5106?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5106?srcpr&elfooter) last update [d9e2df9754cc86](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5110.0,5112,1,1,1,1,1,1,1,1,"2x: flowable as a publisher to be fully rs compliant this pr performs the changes suggested in #5110 - introduce `flowablesubscriber` with extra textual specification on its relaxed nature - `flowablesubscribe(subscriber)` checks for `flowablesubscriber` and if not found it wraps the incoming rs `subscriber` into a `strictsubscriber` that follows the rs spec to the letter at any cost - introduce `flowablesubscribe(flowablesubscribe)` that most internal operators will use - change `abstractflowablewithupstream` to accept `flowable` as a source update operators - some operators were useful with raw `publisher` input these were duplicated on their outer containing type but use the same internal `flowablesubscriber` - removed ""cheat"" from the tck tests adjusted timeout on `delay` - replaced most `implements subscriber` with `implements flowablesubscriber` - replaced most `new subscriber` with `new flowablesubscriber` in tests the rest is required for testing the strictness itself - `strict()` is now an identity operator with suggested scheduled removalperformance impact estimation- most primary use of a `flowable` should go through `subscribe(flowablesubscribe)` and thus no overhead change- where the api mandated `publisher` as input providing a `flowable` will have an `instanceof` check at subscription time and routed to `subscribe(flowablesubscriber) if the consumer is part of rxjava 2 itself okay lets go from here in the unlikely case the spec becomes more forgiving the undo is just to remove cast/wrapping from flowablesubscribe and everything works the same as `flowablesubscriber` is an interface ||"
5111.0,5114,1,0,0,1,0,1,1,1,2x: fix observablecombinelatest to dispose eagerly this pr fixes `observablecombinelatest` to dispose the sources outside the serialization loop just like `flowablecombinelatest` does this allows cancellation even if the serialization loop is busy/blocking inside an `onnext` emissionin addition a unit test was added to `flowablecombinelatest` as wellreported in #5111 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5114?srcpr&elh1) report> merging [#5114](https://codecovio/gh/reactivex/rxjava/pull/5114?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab6?srcpr&eldesc) will **decrease** coverage by `-007%`> the diff coverage is `100%````diff@@ coverage diff @@## 2x #5114 +/- ##- coverage 9515% 9509% -007% - complexity 5561 5565 +4 files 620 620 lines 40011 40014 +3 branches 5632 5632 - hits 38072 38050 -22 - misses 920 944 +24 - partials 1019 1020 +1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5114?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/operators/observable/observablecombinelatestjava](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunvbwjpbmvmyxrlc3quamf2yq) | `9875% (+002%)` | `6 (ø)` | :x: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `8955% (-747%)` | `2% (ø)` | || [internal/disposables/arraycompositedisposablejava](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvqxjyyxldb21wb3npdgveaxnwb3nhymxllmphdme) | `9285% (-715%)` | `15% (-1%)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8393% (-57%)` | `55% (ø)` | || [rnal/subscribers/singlepostcompletesubscriberjava](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyawjlcnmvu2luz2xlug9zdenvbxbszxrlu3vic2nyawjlci5qyxzh) | `9487% (-513%)` | `14% (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `8738% (-421%)` | `56% (+1%)` | || [x/internal/operators/maybe/maybeswitchifemptyjava](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlu3dpdgnoswzfbxb0es5qyxzh) | `9722% (-278%)` | `2% (ø)` | || [rnal/operators/flowable/flowabletakelasttimedjava](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgfrzuxhc3ruaw1lzc5qyxzh) | `9629% (-278%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9215% (-262%)` | `2% (ø)` | || [activex/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9fegvjdxrvclnjagvkdwxlci5qyxzh) | `9407% (-223%)` | `9% (ø)` | || and [38 more](https://codecovio/gh/reactivex/rxjava/pull/5114/changes?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5114?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5114?srcpr&elfooter) last update [a00ea070050275](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&elfooter&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5108.0,5117,1,0,0,1,0,1,1,1,2x: add parallelflowablesequentialdelayerror this pr adds the `sequentialdelayerror` operator to `parallelflowable` that allows awaiting all rails in a parallel flow to terminate normally or with the (composite) exception of the failed rail(s)to enable this the `flowableparallel()` operators behavior regarding rail cancellation had to be changed in v205 if any of the rails cancelled (maybe due to a failure maybe due to an end consumer cancelling the entire parallel flow) the input `flowable` was cancelled this pr alters this by requiring all rails to cancel before cancelling the input `flowable` the change permits one or multiple rails to fail and let others progress in case the new `sequentialdelayerror` is applied as a terminal operator the original `sequential()` operator still cancels all rails if one of them fails (triggering the cancellation of the input `flowable`)note that this change may still drop and never process elements in the internal queues of the operators in the parallel flow (because the parallel processing is not implemented with work-stealing that could pick up elements from a dead queue) in order to get as many elements processed as possible it is recommended to reduce the default prefetch on the `runon` operator to a reasonable tradeoff value (between throughput and fault tolerance)**edit**updated the pr to make sure `parallel()` ignores cancelled rails when it dispatches itemsrelated: #5108 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5117?srcpr&elh1) report> merging [#5117](https://codecovio/gh/reactivex/rxjava/pull/5117?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/421c5bbb2312b9364e11a0f02cf84126e94961fb?srcpr&eldesc) will **decrease** coverage by `-003%`> the diff coverage is `9103%````diff@@ coverage diff @@## 2x #5117 +/- ##- coverage 96% 9597% -003% - complexity 5598 5609 +11 files 620 620 lines 39699 39810 +111 branches 5567 5597 +30 + hits 38113 38208 +95 + misses 629 627 -2 - partials 957 975 +18```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5117?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [n/java/io/reactivex/parallel/parallelflowablejava](https://codecovio/gh/reactivex/rxjava/compare/421c5bbb2312b9364e11a0f02cf84126e94961fbff2c2c6c78ebb326a47df8e68795359b05fd1416?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcgfyywxszwwvugfyywxszwxgbg93ywjszs5qyxzh) | `100% (ø)` | `43 (+2)` | :white_check_mark: || [ivex/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/compare/421c5bbb2312b9364e11a0f02cf84126e94961fbff2c2c6c78ebb326a47df8e68795359b05fd1416?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvssm9pbi5qyxzh) | `9483% (-047%)` | `3 (+1)` | || [rnal/operators/parallel/parallelfrompublisherjava](https://codecovio/gh/reactivex/rxjava/compare/421c5bbb2312b9364e11a0f02cf84126e94961fbff2c2c6c78ebb326a47df8e68795359b05fd1416?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsrnjvbvb1ymxpc2hlci5qyxzh) | `9573% (-084%)` | `4 (ø)` | || [al/operators/observable/observablesampletimedjava](https://codecovio/gh/reactivex/rxjava/compare/421c5bbb2312b9364e11a0f02cf84126e94961fbff2c2c6c78ebb326a47df8e68795359b05fd1416?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnhbxbszvrpbwvklmphdme) | `9166% (-5%)` | `3% (ø)` | || [/internal/operators/maybe/maybetakeuntilmaybejava](https://codecovio/gh/reactivex/rxjava/compare/421c5bbb2312b9364e11a0f02cf84126e94961fbff2c2c6c78ebb326a47df8e68795359b05fd1416?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglstwf5ymuuamf2yq) | `9591% (-409%)` | `2% (ø)` | || [ernal/operators/maybe/maybetakeuntilpublisherjava](https://codecovio/gh/reactivex/rxjava/compare/421c5bbb2312b9364e11a0f02cf84126e94961fbff2c2c6c78ebb326a47df8e68795359b05fd1416?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglsuhvibglzagvylmphdme) | `96% (-4%)` | `2% (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/compare/421c5bbb2312b9364e11a0f02cf84126e94961fbff2c2c6c78ebb326a47df8e68795359b05fd1416?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/compare/421c5bbb2312b9364e11a0f02cf84126e94961fbff2c2c6c78ebb326a47df8e68795359b05fd1416?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `913% (-363%)` | `2% (ø)` | || [/internal/operators/flowable/flowableintervaljava](https://codecovio/gh/reactivex/rxjava/compare/421c5bbb2312b9364e11a0f02cf84126e94961fbff2c2c6c78ebb326a47df8e68795359b05fd1416?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlsw50zxj2ywwuamf2yq) | `9333% (-334%)` | `2% (ø)` | || [ex/internal/operators/maybe/maybetimeoutmaybejava](https://codecovio/gh/reactivex/rxjava/compare/421c5bbb2312b9364e11a0f02cf84126e94961fbff2c2c6c78ebb326a47df8e68795359b05fd1416?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgltzw91de1hewjllmphdme) | `9558% (-295%)` | `2% (ø)` | || and [42 more](https://codecovio/gh/reactivex/rxjava/pull/5117?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5117?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5117?srcpr&elfooter) last update [421c5bbff2c2c6](https://codecovio/gh/reactivex/rxjava/compare/421c5bbb2312b9364e11a0f02cf84126e94961fbff2c2c6c78ebb326a47df8e68795359b05fd1416?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5111.0,5121,1,0,0,0,0,1,1,1,2x: fix observablezip to dispose eagerly this pr fixes `observablezip` to dispose the sources outside the serialization loop just like `flowablezip` does this allows cancellation even if the serialization loop is busy/blocking inside an `onnext` emissionin addition a unit test was added to `observablezip` as wellreported in #5111 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5121?srcpr&elh1) report> merging [#5121](https://codecovio/gh/reactivex/rxjava/pull/5121?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/9a342fdff91ee1bcc0f3d95441c3039ad8d897f9?srcpr&eldesc) will **decrease** coverage by `-007%`> the diff coverage is `100%````diff@@ coverage diff @@## 2x #5121 +/- ##- coverage 9517% 951% -007% + complexity 5566 5564 -2 files 620 620 lines 40014 40020 +6 branches 5632 5633 +1 - hits 38082 38062 -20 - misses 929 941 +12 - partials 1003 1017 +14```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5121?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [x/internal/operators/observable/observablezipjava](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvppcc5qyxzh) | `100% (ø)` | `6 (ø)` | :x: || [al/operators/observable/observablesampletimedjava](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnhbxbszvrpbwvklmphdme) | `90% (-667%)` | `3% (ø)` | || [rnal/subscriptions/arraycompositesubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9bcnjheunvbxbvc2l0zvn1ynnjcmlwdglvbi5qyxzh) | `9333% (-667%)` | `17% (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9019% (-523%)` | `2% (ø)` | || [/internal/operators/maybe/maybetakeuntilmaybejava](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglstwf5ymuuamf2yq) | `9591% (-409%)` | `2% (ø)` | || [vex/internal/operators/flowable/flowabletimerjava](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzxiuamf2yq) | `9285% (-358%)` | `2% (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `9275% (-218%)` | `2% (ø)` | || [/main/java/io/reactivex/subjects/maybesubjectjava](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvtwf5ymvtdwjqzwn0lmphdme) | `9565% (-218%)` | `46% (-1%)` | || [operators/observable/observableconcatmapeagerjava](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunvbmnhde1hcevhz2vylmphdme) | `9729% (-217%)` | `2% (ø)` | || [activex/internal/disposables/disposablehelperjava](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvrglzcg9zywjszuhlbhblci5qyxzh) | `9814% (-186%)` | `27% (-1%)` | || and [28 more](https://codecovio/gh/reactivex/rxjava/pull/5121?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5121?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5121?srcpr&elfooter) last update [9a342fd87b4773](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5126.0,5127,1,0,0,0,0,0,1,0,2x: update javadoc of flatmap() overloads this pr rewords the javadoc of `flowableflatmap()` overloads to correctly express their behavior regarding backpressure towards their upstream in 2x only `merge()` operators are unbounded-in by default `flatmap`s are by default bounded by `buffersize()` or the `maxconcurrency` parameterin addition one of the `flatmap` overload still had `resultselector` instead of the common `combiner` parameter name as far as i know there are no language-specific libraries targeting 2x yet where in the language the actual parameter names are also part of the signature and changing them counts as an incompatible changerelated #5126 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5127?srcpr&elh1) report> merging [#5127](https://codecovio/gh/reactivex/rxjava/pull/5127?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/70922a6a4f7093cb7c924e91a1edf966bd0071c0?srcpr&eldesc) will **decrease** coverage by `-007%`> the diff coverage is `100%````diff@@ coverage diff @@## 2x #5127 +/- ##- coverage 9593% 9587% -007% + complexity 5605 5601 -4 files 620 620 lines 39810 39810 branches 5597 5597 - hits 38191 38167 -24 - misses 637 661 +24 partials 982 982```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5127?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/compare/70922a6a4f7093cb7c924e91a1edf966bd0071c0abbd670d8ced744089aaef31747ce7b691f9397d?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `522 (ø)` | :x: || [rnal/subscriptions/arraycompositesubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/70922a6a4f7093cb7c924e91a1edf966bd0071c0abbd670d8ced744089aaef31747ce7b691f9397d?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9bcnjheunvbxbvc2l0zvn1ynnjcmlwdglvbi5qyxzh) | `9333% (-667%)` | `17% (-1%)` | || [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/compare/70922a6a4f7093cb7c924e91a1edf966bd0071c0abbd670d8ced744089aaef31747ce7b691f9397d?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `8852% (-656%)` | `2% (ø)` | || [/internal/operators/maybe/maybetakeuntilmaybejava](https://codecovio/gh/reactivex/rxjava/compare/70922a6a4f7093cb7c924e91a1edf966bd0071c0abbd670d8ced744089aaef31747ce7b691f9397d?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglstwf5ymuuamf2yq) | `9387% (-613%)` | `2% (ø)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/compare/70922a6a4f7093cb7c924e91a1edf966bd0071c0abbd670d8ced744089aaef31747ce7b691f9397d?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8393% (-57%)` | `55% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/compare/70922a6a4f7093cb7c924e91a1edf966bd0071c0abbd670d8ced744089aaef31747ce7b691f9397d?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `8644% (-515%)` | `55% (ø)` | || [rnal/subscribers/singlepostcompletesubscriberjava](https://codecovio/gh/reactivex/rxjava/compare/70922a6a4f7093cb7c924e91a1edf966bd0071c0abbd670d8ced744089aaef31747ce7b691f9397d?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyawjlcnmvu2luz2xlug9zdenvbxbszxrlu3vic2nyawjlci5qyxzh) | `9487% (-513%)` | `14% (-1%)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/70922a6a4f7093cb7c924e91a1edf966bd0071c0abbd670d8ced744089aaef31747ce7b691f9397d?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9384% (-462%)` | `27% (-1%)` | || [/main/java/io/reactivex/subjects/maybesubjectjava](https://codecovio/gh/reactivex/rxjava/compare/70922a6a4f7093cb7c924e91a1edf966bd0071c0abbd670d8ced744089aaef31747ce7b691f9397d?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvtwf5ymvtdwjqzwn0lmphdme) | `9565% (-435%)` | `46% (-2%)` | || [vex/internal/operators/flowable/flowabletimerjava](https://codecovio/gh/reactivex/rxjava/compare/70922a6a4f7093cb7c924e91a1edf966bd0071c0abbd670d8ced744089aaef31747ce7b691f9397d?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzxiuamf2yq) | `9285% (-358%)` | `2% (ø)` | || and [38 more](https://codecovio/gh/reactivex/rxjava/pull/5127?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5127?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5127?srcpr&elfooter) last update [70922a6abbd670](https://codecovio/gh/reactivex/rxjava/compare/70922a6a4f7093cb7c924e91a1edf966bd0071c0abbd670d8ced744089aaef31747ce7b691f9397d?srcpr&elfooter&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5132.0,5133,1,0,0,0,0,1,1,1,2x: fix flatmap not cancelling the upstream eagerly this pr fixes the lack of eager cancellation when flatmapping sources and not stopping the upstream if the inner source failsunit tests were added to verify `single` (in case it receives a dedicated implementation one day as currently it delegates to `flowable`) `flowable` and `observable`reported in #5132 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5133?srcpr&elh1) report> merging [#5133](https://codecovio/gh/reactivex/rxjava/pull/5133?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/7494a2c05cf2f02142fc3193682141826974661a?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `100%````diff@@ coverage diff @@## 2x #5133 +/- ##+ coverage 9592% 9594% +002% + complexity 5608 5601 -7 files 620 620 lines 39810 39820 +10 branches 5597 5599 +2 + hits 38186 38207 +21 + misses 651 640 -11 partials 973 973```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5133?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [x/internal/operators/flowable/flowableflatmapjava](https://codecovio/gh/reactivex/rxjava/compare/7494a2c05cf2f02142fc3193682141826974661a6457c110f57f728a7e38a9a9c31b39e25439c1d7?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcc5qyxzh) | `88% (+005%)` | `4 (ø)` | :x: || [a/io/reactivex/processors/serializedprocessorjava](https://codecovio/gh/reactivex/rxjava/compare/7494a2c05cf2f02142fc3193682141826974661a6457c110f57f728a7e38a9a9c31b39e25439c1d7?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9tzxjpywxpemvkuhjvy2vzc29ylmphdme) | `9148% (-639%)` | `27% (-1%)` | || [/operators/completable/completableconcatarrayjava](https://codecovio/gh/reactivex/rxjava/compare/7494a2c05cf2f02142fc3193682141826974661a6457c110f57f728a7e38a9a9c31b39e25439c1d7?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0qxjyyxkuamf2yq) | `9375% (-625%)` | `2% (ø)` | || [/internal/operators/maybe/maybetakeuntilmaybejava](https://codecovio/gh/reactivex/rxjava/compare/7494a2c05cf2f02142fc3193682141826974661a6457c110f57f728a7e38a9a9c31b39e25439c1d7?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglstwf5ymuuamf2yq) | `9387% (-613%)` | `2% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/compare/7494a2c05cf2f02142fc3193682141826974661a6457c110f57f728a7e38a9a9c31b39e25439c1d7?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `5886% (-568%)` | `31% (-4%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/compare/7494a2c05cf2f02142fc3193682141826974661a6457c110f57f728a7e38a9a9c31b39e25439c1d7?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9179% (-448%)` | `2% (ø)` | || [/main/java/io/reactivex/subjects/maybesubjectjava](https://codecovio/gh/reactivex/rxjava/compare/7494a2c05cf2f02142fc3193682141826974661a6457c110f57f728a7e38a9a9c31b39e25439c1d7?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvtwf5ymvtdwjqzwn0lmphdme) | `9565% (-435%)` | `46% (-2%)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/compare/7494a2c05cf2f02142fc3193682141826974661a6457c110f57f728a7e38a9a9c31b39e25439c1d7?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9197% (-321%)` | `5% (ø)` | || [rnal/operators/flowable/flowabletakelasttimedjava](https://codecovio/gh/reactivex/rxjava/compare/7494a2c05cf2f02142fc3193682141826974661a6457c110f57f728a7e38a9a9c31b39e25439c1d7?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgfrzuxhc3ruaw1lzc5qyxzh) | `9629% (-278%)` | `2% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/compare/7494a2c05cf2f02142fc3193682141826974661a6457c110f57f728a7e38a9a9c31b39e25439c1d7?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9732% (-268%)` | `2% (ø)` | || and [36 more](https://codecovio/gh/reactivex/rxjava/pull/5133?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5133?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5133?srcpr&elfooter) last update [7494a2c6457c11](https://codecovio/gh/reactivex/rxjava/compare/7494a2c05cf2f02142fc3193682141826974661a6457c110f57f728a7e38a9a9c31b39e25439c1d7?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5135.0,5136,1,0,0,0,0,0,1,0,2x: fix repeatwhen and retrywhen signatures adjust the `repeatwhen` and `retrywhen` signatures to accept `publisher ` on `single` and `completable` matching `flowable`s signaturereported in #5135 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5136?srcpr&elh1) report> :exclamation: no coverage uploaded for pull request base (`2x@2a4b18e`) [click here to learn what that means](https://docscodecovio/docs/error-reference#section-missing-base-commit)> the diff coverage is `n/a````diff@@ coverage diff @@## 2x #5136 +/- ## coverage ? 9581% complexity ? 5601 files ? 620 lines ? 39820 branches ? 5599 hits ? 38154 misses ? 672 partials ? 994```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5136?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/compare/2a4b18e743f0958551f4e31fdf81e618cc35f238d7bd221e9977238fcb33b3a2fc602cf6198ebb93?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `522 (?)` | || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/compare/2a4b18e743f0958551f4e31fdf81e618cc35f238d7bd221e9977238fcb33b3a2fc602cf6198ebb93?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `9929% (ø)` | `131 (?)` | || [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/compare/2a4b18e743f0958551f4e31fdf81e618cc35f238d7bd221e9977238fcb33b3a2fc602cf6198ebb93?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `112 (?)` | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5136?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5136?srcpr&elfooter) last update [2a4b18ed7bd221](https://codecovio/gh/reactivex/rxjava/compare/2a4b18e743f0958551f4e31fdf81e618cc35f238d7bd221e9977238fcb33b3a2fc602cf6198ebb93?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
3917.0,5140,1,0,0,1,0,1,1,1,2x: fix timed replay-like components replaying outdated items the timed versions of `flowablereplay()` `replayprocessor` `observablereplay()` and `replaysubject` all replay outdated items to new subscribers and through the `getvalues()` and `size()` state-peeking methods similar to issue #3917 resolved via #4023the fix includes a node-walk for new subscribers that skips old entries some unit tests werent logically considering the emission pattern (ie items timed out shouldnt appear) and have been fixed as wellreported in #5139 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&elh1) report> merging [#5140](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/a03bf90c19e0eed80c677eb0e3071079220fd392?srcpr&eldesc) will **decrease** coverage by `-001%`> the diff coverage is `100%````diff@@ coverage diff @@## 2x #5140 +/- ##- coverage 9596% 9596% -001% + complexity 5611 5601 -10 files 620 620 lines 39820 39850 +30 branches 5599 5603 +4 + hits 38215 38242 +27 misses 633 633 - partials 972 975 +3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/java/io/reactivex/processors/replayprocessorjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9szxbsyxlqcm9jzxnzb3iuamf2yq) | `9876% (ø)` | `49 (ø)` | :x: || [ex/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvwbgf5lmphdme) | `9009% (+032%)` | `17 (ø)` | :x: || [main/java/io/reactivex/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvumvwbgf5u3viamvjdc5qyxzh) | `9711% (-022%)` | `51 (ø)` | || [nternal/operators/observable/observablereplayjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlcgxhes5qyxzh) | `9696% (-114%)` | `18 (ø)` | || [rnal/subscriptions/arraycompositesubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9bcnjheunvbxbvc2l0zvn1ynnjcmlwdglvbi5qyxzh) | `9333% (-667%)` | `17% (-1%)` | || [ternal/operators/completable/completableusingjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvxnpbmcuamf2yq) | `9523% (-477%)` | `4% (ø)` | || [erators/completable/completableconcatiterablejava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0sxrlcmfibguuamf2yq) | `9591% (-409%)` | `2% (ø)` | || [io/reactivex/internal/util/backpressurehelperjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9cywnrchjlc3n1cmvizwxwzxiuamf2yq) | `9591% (-409%)` | `21% (-1%)` | || [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `9444% (-371%)` | `10% (-1%)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% (-364%)` | `9% (-1%)` | || and [37 more](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&elfooter) last update [a03bf906377b58](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5139.0,5140,1,0,0,1,0,1,1,1,2x: fix timed replay-like components replaying outdated items the timed versions of `flowablereplay()` `replayprocessor` `observablereplay()` and `replaysubject` all replay outdated items to new subscribers and through the `getvalues()` and `size()` state-peeking methods similar to issue #3917 resolved via #4023the fix includes a node-walk for new subscribers that skips old entries some unit tests werent logically considering the emission pattern (ie items timed out shouldnt appear) and have been fixed as wellreported in #5139 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&elh1) report> merging [#5140](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/a03bf90c19e0eed80c677eb0e3071079220fd392?srcpr&eldesc) will **decrease** coverage by `-001%`> the diff coverage is `100%````diff@@ coverage diff @@## 2x #5140 +/- ##- coverage 9596% 9596% -001% + complexity 5611 5601 -10 files 620 620 lines 39820 39850 +30 branches 5599 5603 +4 + hits 38215 38242 +27 misses 633 633 - partials 972 975 +3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/java/io/reactivex/processors/replayprocessorjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9szxbsyxlqcm9jzxnzb3iuamf2yq) | `9876% (ø)` | `49 (ø)` | :x: || [ex/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvwbgf5lmphdme) | `9009% (+032%)` | `17 (ø)` | :x: || [main/java/io/reactivex/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvumvwbgf5u3viamvjdc5qyxzh) | `9711% (-022%)` | `51 (ø)` | || [nternal/operators/observable/observablereplayjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlcgxhes5qyxzh) | `9696% (-114%)` | `18 (ø)` | || [rnal/subscriptions/arraycompositesubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9bcnjheunvbxbvc2l0zvn1ynnjcmlwdglvbi5qyxzh) | `9333% (-667%)` | `17% (-1%)` | || [ternal/operators/completable/completableusingjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvxnpbmcuamf2yq) | `9523% (-477%)` | `4% (ø)` | || [erators/completable/completableconcatiterablejava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0sxrlcmfibguuamf2yq) | `9591% (-409%)` | `2% (ø)` | || [io/reactivex/internal/util/backpressurehelperjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9cywnrchjlc3n1cmvizwxwzxiuamf2yq) | `9591% (-409%)` | `21% (-1%)` | || [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `9444% (-371%)` | `10% (-1%)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% (-364%)` | `9% (-1%)` | || and [37 more](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&elfooter) last update [a03bf906377b58](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5139.0,5141,1,0,0,1,0,1,1,1,1x: fix timed replay() not terminating when all items timeout the timed `replay()` operator didnt terminate a late subscriber if all the items timed out in the meantimerelated: #5139
5138.0,5146,1,0,0,0,0,1,1,1,1x: add unsubscribeon to single type (#5138) resolve #5138 add unsubscribeon to single type # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5146?srcpr&elh1) report> merging [#5146](https://codecovio/gh/reactivex/rxjava/pull/5146?srcpr&eldesc) into [1x](https://codecovio/gh/reactivex/rxjava/commit/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322?srcpr&eldesc) will **increase** coverage by `007%`> the diff coverage is `100%````diff@@ coverage diff @@## 1x #5146 +/- ##+ coverage 8429% 8437% +007% - complexity 2875 2878 +3 files 290 290 lines 18091 18107 +16 branches 2475 2475 + hits 15250 15277 +27 + misses 1973 1960 -13 - partials 868 870 +2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5146?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/rx/singlejava](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9taw5nbguuamf2yq) | `7386% (+329%)` | `82 (+1)` | :white_check_mark: || [in/java/rx/internal/schedulers/sleepingactionjava](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9zy2hlzhvszxjzl1nszwvwaw5nqwn0aw9ulmphdme) | `5555% (-556%)` | `2% (-1%)` | || [/java/rx/internal/operators/backpressureutilsjava](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvqmfja3byzxnzdxjlvxrpbhmuamf2yq) | `6818% (-455%)` | `27% (-2%)` | || [ain/java/rx/internal/schedulers/schedulerwhenjava](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9zy2hlzhvszxjzl1njagvkdwxlcldozw4uamf2yq) | `8378% (-406%)` | `4% (ø)` | || [ava/rx/internal/operators/operatormaterializejava](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jnyxrlcmlhbgl6zs5qyxzh) | `8524% (-328%)` | `3% (ø)` | || [ava/rx/internal/util/backpressuredrainmanagerjava](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc91dglsl0jhy2twcmvzc3vyzuryywlutwfuywdlci5qyxzh) | `6666% (-124%)` | `20% (-1%)` | || [in/java/rx/internal/operators/operatorpublishjava](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jqdwjsaxnolmphdme) | `789% (+042%)` | `8% (ø)` | :x: || [/rx/internal/schedulers/cachedthreadschedulerjava](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9zy2hlzhvszxjzl0nhy2hlzfrocmvhzfnjagvkdwxlci5qyxzh) | `8932% (+097%)` | `6% (ø)` | :x: || [n/java/rx/subscriptions/compositesubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9zdwjzy3jpchrpb25zl0nvbxbvc2l0zvn1ynnjcmlwdglvbi5qyxzh) | `7792% (+129%)` | `25% (+1%)` | :white_check_mark: || [n/java/rx/subjects/subjectsubscriptionmanagerjava](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9zdwjqzwn0cy9tdwjqzwn0u3vic2nyaxb0aw9utwfuywdlci5qyxzh) | `8214% (+142%)` | `16% (+1%)` | :white_check_mark: || and [3 more](https://codecovio/gh/reactivex/rxjava/pull/5146?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5146?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5146?srcpr&elfooter) last update [2a0427be698511](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
4876.0,5156,0,0,0,0,0,0,1,0,add @nonnull to the methods of emitter this pr is a part of #4876 this pr adds `@nonnull` annotation to some methods of `emitter` so that the users of rxjava migrating from 1x to 2x can easily know passing null to the methods will cause npe sorry ive just noticed there is #5151 related to this pr || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5156?srcpr&elh1) report> merging [#5156](https://codecovio/gh/reactivex/rxjava/pull/5156?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/26eff7994062044220178467e0e4f941ed5f40db?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `n/a````diff@@ coverage diff @@## 2x #5156 +/- ##+ coverage 9588% 9591% +002% + complexity 5606 5601 -5 files 620 620 lines 39856 39856 branches 5604 5604 + hits 38217 38227 +10 + misses 654 651 -3 + partials 985 978 -7```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5156?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ternal/operators/flowable/flowablesubscribeonjava](https://codecovio/gh/reactivex/rxjava/compare/26eff7994062044220178467e0e4f941ed5f40db22e8735e81392e48b8c6e897c2e2173818300fbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3vic2nyawjlt24uamf2yq) | `909% (-546%)` | `2% (ø)` | || [rnal/subscribers/singlepostcompletesubscriberjava](https://codecovio/gh/reactivex/rxjava/compare/26eff7994062044220178467e0e4f941ed5f40db22e8735e81392e48b8c6e897c2e2173818300fbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyawjlcnmvu2luz2xlug9zdenvbxbszxrlu3vic2nyawjlci5qyxzh) | `9487% (-513%)` | `14% (-1%)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/26eff7994062044220178467e0e4f941ed5f40db22e8735e81392e48b8c6e897c2e2173818300fbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9384% (-462%)` | `27% (-1%)` | || [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/compare/26eff7994062044220178467e0e4f941ed5f40db22e8735e81392e48b8c6e897c2e2173818300fbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `9444% (-371%)` | `10% (-1%)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/compare/26eff7994062044220178467e0e4f941ed5f40db22e8735e81392e48b8c6e897c2e2173818300fbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% (-364%)` | `9% (-1%)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/compare/26eff7994062044220178467e0e4f941ed5f40db22e8735e81392e48b8c6e897c2e2173818300fbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9192% (-314%)` | `10% (+1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/compare/26eff7994062044220178467e0e4f941ed5f40db22e8735e81392e48b8c6e897c2e2173818300fbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9253% (-299%)` | `2% (ø)` | || [activex/internal/operators/single/singlecachejava](https://codecovio/gh/reactivex/rxjava/compare/26eff7994062044220178467e0e4f941ed5f40db22e8735e81392e48b8c6e897c2e2173818300fbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvdywnozs5qyxzh) | `9705% (-295%)` | `23% (-1%)` | || [x/internal/operators/maybe/maybeswitchifemptyjava](https://codecovio/gh/reactivex/rxjava/compare/26eff7994062044220178467e0e4f941ed5f40db22e8735e81392e48b8c6e897c2e2173818300fbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlu3dpdgnoswzfbxb0es5qyxzh) | `9722% (-278%)` | `2% (ø)` | || [activex/internal/disposables/disposablehelperjava](https://codecovio/gh/reactivex/rxjava/compare/26eff7994062044220178467e0e4f941ed5f40db22e8735e81392e48b8c6e897c2e2173818300fbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvrglzcg9zywjszuhlbhblci5qyxzh) | `9814% (-186%)` | `27% (-1%)` | || and [25 more](https://codecovio/gh/reactivex/rxjava/pull/5156?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5156?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5156?srcpr&elfooter) last update [26eff7922e8735](https://codecovio/gh/reactivex/rxjava/compare/26eff7994062044220178467e0e4f941ed5f40db22e8735e81392e48b8c6e897c2e2173818300fbe?srcpr&elfooter&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks @hkurokawa for the pr and @vanniktech for the review! || @vanniktech @akarnokd thank you for your prompt merge! ||
4853.0,5161,1,0,0,0,0,1,1,1,2x: add observableswitchmapsingle and switchmapsingledelayerror this is a new operator discussed in #4853 the issue refers to a goodly number of new operators which ill do bit by bit as my time allows and to ensure review is not too daunting updated with suggested changes || unrelated ci failure```ioreactivexparallelparallelflowabletest > parallelismandprefetchasync failed javalangassertionerror: value counts differ expected: 1048576 actual: 814189 (latch 1 values 814189 errors 0 completions 0 timeout! disposed!) at ioreactivexobserversbasetestconsumerfail(basetestconsumerjava:163) at ioreactivexobserversbasetestconsumerassertvaluecount(basetestconsumerjava:462) at ioreactivexparallelparallelflowabletestparallelismandprefetchasync(parallelflowabletestjava:741)``` || > unrelated ci failuretracking via #5154 could be due to low timeout settings and travis overload just rerun the build next time i did it just now || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5161?srcpr&elh1) report> merging [#5161](https://codecovio/gh/reactivex/rxjava/pull/5161?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/7861679938342d0317fdc3fe578dac91613e1388?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `100%````diff@@ coverage diff @@## 2x #5161 +/- ##+ coverage 9586% 9588% +002% - complexity 5648 5652 +4 files 621 621 lines 39962 39972 +10 branches 5610 5610 + hits 38309 38329 +20 + misses 665 657 -8 + partials 988 986 -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5161?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [operators/observable/observableinternalhelperjava](https://codecovio/gh/reactivex/rxjava/compare/7861679938342d0317fdc3fe578dac91613e1388315fb808dd36a30d353fb62d85d50bc57e9e0cb1?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuludgvybmfssgvscgvylmphdme) | `8631% (+125%)` | `18 (+3)` | :white_check_mark: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/compare/7861679938342d0317fdc3fe578dac91613e1388315fb808dd36a30d353fb62d85d50bc57e9e0cb1?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `506 (+2)` | :white_check_mark: || [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/compare/7861679938342d0317fdc3fe578dac91613e1388315fb808dd36a30d353fb62d85d50bc57e9e0cb1?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `8688% (-82%)` | `2% (ø)` | || [/operators/completable/completableconcatarrayjava](https://codecovio/gh/reactivex/rxjava/compare/7861679938342d0317fdc3fe578dac91613e1388315fb808dd36a30d353fb62d85d50bc57e9e0cb1?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0qxjyyxkuamf2yq) | `9375% (-625%)` | `2% (ø)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/7861679938342d0317fdc3fe578dac91613e1388315fb808dd36a30d353fb62d85d50bc57e9e0cb1?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9384% (-462%)` | `27% (-1%)` | || [io/reactivex/internal/util/backpressurehelperjava](https://codecovio/gh/reactivex/rxjava/compare/7861679938342d0317fdc3fe578dac91613e1388315fb808dd36a30d353fb62d85d50bc57e9e0cb1?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9cywnrchjlc3n1cmvizwxwzxiuamf2yq) | `9591% (-409%)` | `21% (-1%)` | || [ernal/operators/maybe/maybetakeuntilpublisherjava](https://codecovio/gh/reactivex/rxjava/compare/7861679938342d0317fdc3fe578dac91613e1388315fb808dd36a30d353fb62d85d50bc57e9e0cb1?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglsuhvibglzagvylmphdme) | `96% (-4%)` | `2% (ø)` | || [main/java/io/reactivex/subjects/singlesubjectjava](https://codecovio/gh/reactivex/rxjava/compare/7861679938342d0317fdc3fe578dac91613e1388315fb808dd36a30d353fb62d85d50bc57e9e0cb1?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvu2luz2xlu3viamvjdc5qyxzh) | `9523% (-239%)` | `38% (-1%)` | || [ternal/operators/completable/completableusingjava](https://codecovio/gh/reactivex/rxjava/compare/7861679938342d0317fdc3fe578dac91613e1388315fb808dd36a30d353fb62d85d50bc57e9e0cb1?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvxnpbmcuamf2yq) | `9523% (-239%)` | `4% (ø)` | || [/main/java/io/reactivex/subjects/maybesubjectjava](https://codecovio/gh/reactivex/rxjava/compare/7861679938342d0317fdc3fe578dac91613e1388315fb808dd36a30d353fb62d85d50bc57e9e0cb1?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvtwf5ymvtdwjqzwn0lmphdme) | `9565% (-218%)` | `46% (-1%)` | || and [35 more](https://codecovio/gh/reactivex/rxjava/pull/5161?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5161?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5161?srcpr&elfooter) last update [7861679315fb80](https://codecovio/gh/reactivex/rxjava/compare/7861679938342d0317fdc3fe578dac91613e1388315fb808dd36a30d353fb62d85d50bc57e9e0cb1?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || updated with null check on mapper call and added unit tests for null mapper and null mapper call result not proposing to duplicate all tests @akarnokd what would you like? || dont duplicate tests when the specialized implementation happens that will ask for proper coverage by itself ||
5160.0,5163,1,0,0,0,0,1,1,0,2x: singlesubscribe() to report isdisposed() true on success/error the `consumersingleobserver` didnt report `isdisposed` consistently with its statereported in #5160 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5163?srcpr&elh1) report> merging [#5163](https://codecovio/gh/reactivex/rxjava/pull/5163?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/23b46f5b83eabebff15fbfbb4b471cde93706b81?srcpr&eldesc) will **decrease** coverage by `-002%`> the diff coverage is `100%````diff@@ coverage diff @@## 2x #5163 +/- ##- coverage 9597% 9595% -002% + complexity 5655 5653 -2 files 621 621 lines 39960 39962 +2 branches 5610 5610 - hits 38351 38345 -6 - misses 628 648 +20 + partials 981 969 -12```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5163?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [vex/internal/observers/consumersingleobserverjava](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0nvbnn1bwvyu2luz2xlt2jzzxj2zxiuamf2yq) | `100% (ø)` | `7 (ø)` | :x: || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8393% (-674%)` | `55% (-1%)` | || [rnal/subscriptions/arraycompositesubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9bcnjheunvbxbvc2l0zvn1ynnjcmlwdglvbi5qyxzh) | `9333% (-667%)` | `17% (-1%)` | || [/operators/completable/completableconcatarrayjava](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0qxjyyxkuamf2yq) | `9375% (-625%)` | `2% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `8644% (-608%)` | `55% (-1%)` | || [ernal/operators/maybe/maybetakeuntilpublisherjava](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglsuhvibglzagvylmphdme) | `96% (-4%)` | `2% (ø)` | || [rnal/operators/flowable/flowabletakelasttimedjava](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgfrzuxhc3ruaw1lzc5qyxzh) | `9629% (-278%)` | `2% (ø)` | || [main/java/io/reactivex/subjects/singlesubjectjava](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvu2luz2xlu3viamvjdc5qyxzh) | `9523% (-239%)` | `38% (-1%)` | || [operators/observable/observableconcatmapeagerjava](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunvbmnhde1hcevhz2vylmphdme) | `9729% (-217%)` | `2% (ø)` | || [/internal/operators/maybe/maybetakeuntilmaybejava](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglstwf5ymuuamf2yq) | `9591% (-205%)` | `2% (ø)` | || and [35 more](https://codecovio/gh/reactivex/rxjava/pull/5163?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5163?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5163?srcpr&elfooter) last update [23b46f52f7fa97](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&elfooter&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5150.0,5174,1,0,0,0,0,0,1,0,2x: wip removes anonymous inner classes this is a wip since the changes are big an incremental review and pr was recommended by @akarnokd - removes them from flowable/observable/operators- issue [#5150](https://githubcom/reactivex/rxjava/issues/5150) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5174?srcpr&elh1) report> merging [#5174](https://codecovio/gh/reactivex/rxjava/pull/5174?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/f059ded2c1d02d9797cae451a5c879eb0837e3b9?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `9878%````diff@@ coverage diff @@## 2x #5174 +/- ##- coverage 96% 9596% -004% + complexity 5663 5654 -9 files 621 621 lines 39974 40247 +273 branches 5610 5610 + hits 38378 38625 +247 - misses 630 649 +19 - partials 966 973 +7```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5174?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [operators/flowable/flowablewithlatestfrommanyjava](https://codecovio/gh/reactivex/rxjava/compare/f059ded2c1d02d9797cae451a5c879eb0837e3b92377ea820976329de9670f2dbc3bdf1435feeba3?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlv2l0aexhdgvzdezyb21nyw55lmphdme) | `9769% (+001%)` | `7 (ø)` | :x: || [al/operators/observable/observablesubscribeonjava](https://codecovio/gh/reactivex/rxjava/compare/f059ded2c1d02d9797cae451a5c879eb0837e3b92377ea820976329de9670f2dbc3bdf1435feeba3?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn1ynnjcmlizu9ulmphdme) | `100% (ø)` | `2 (ø)` | :x: || [ternal/operators/flowable/flowablebuffertimedjava](https://codecovio/gh/reactivex/rxjava/compare/f059ded2c1d02d9797cae451a5c879eb0837e3b92377ea820976329de9670f2dbc3bdf1435feeba3?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqnvmzmvyvgltzwquamf2yq) | `9094% (-007%)` | `5 (ø)` | || [vex/internal/operators/single/singledooneventjava](https://codecovio/gh/reactivex/rxjava/compare/f059ded2c1d02d9797cae451a5c879eb0837e3b92377ea820976329de9670f2dbc3bdf1435feeba3?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgveb09urxzlbnquamf2yq) | `100% (ø)` | `2 (ø)` | :x: || [vex/internal/operators/flowable/flowabledelayjava](https://codecovio/gh/reactivex/rxjava/compare/f059ded2c1d02d9797cae451a5c879eb0837e3b92377ea820976329de9670f2dbc3bdf1435feeba3?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrgvsyxkuamf2yq) | `100% (ø)` | `3 (ø)` | :x: || [rnal/operators/flowable/flowablecombinelatestjava](https://codecovio/gh/reactivex/rxjava/compare/f059ded2c1d02d9797cae451a5c879eb0837e3b92377ea820976329de9670f2dbc3bdf1435feeba3?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq29tymluzuxhdgvzdc5qyxzh) | `9246% (+003%)` | `8 (ø)` | :x: || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/compare/f059ded2c1d02d9797cae451a5c879eb0837e3b92377ea820976329de9670f2dbc3bdf1435feeba3?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9603% (+186%)` | `10 (+1)` | :white_check_mark: || [nternal/operators/observable/observablereplayjava](https://codecovio/gh/reactivex/rxjava/compare/f059ded2c1d02d9797cae451a5c879eb0837e3b92377ea820976329de9670f2dbc3bdf1435feeba3?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlcgxhes5qyxzh) | `9774% (-014%)` | `18 (-1)` | || [x/internal/operators/single/singlezipiterablejava](https://codecovio/gh/reactivex/rxjava/compare/f059ded2c1d02d9797cae451a5c879eb0837e3b92377ea820976329de9670f2dbc3bdf1435feeba3?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvaaxbjdgvyywjszs5qyxzh) | `100% (ø)` | `9 (ø)` | :x: || [internal/operators/observable/observabledelayjava](https://codecovio/gh/reactivex/rxjava/compare/f059ded2c1d02d9797cae451a5c879eb0837e3b92377ea820976329de9670f2dbc3bdf1435feeba3?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszurlbgf5lmphdme) | `100% (ø)` | `3 (ø)` | :x: || and [82 more](https://codecovio/gh/reactivex/rxjava/pull/5174?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5174?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5174?srcpr&elfooter) last update [f059ded2377ea8](https://codecovio/gh/reactivex/rxjava/compare/f059ded2c1d02d9797cae451a5c879eb0837e3b92377ea820976329de9670f2dbc3bdf1435feeba3?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || @akarnokd on it || great job! ill merge this so the changes dont get too numerous ||
5150.0,5177,1,0,0,0,0,0,1,0,removes all anonymous inner classes this is a what left to complete [this one](https://githubcom/reactivex/rxjava/pull/5174) : - removes all aics - issue [#5150](https://githubcom/reactivex/rxjava/issues/5150) @sleimanjneidi whats the motivation behind making this change? || @naturalwarren to improve stack-traces and to reduce the footprint || > @naturalwarren to improve stack-traces and to reduce the footprintmakes sense thanks for filling me in! || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5177?srcpr&elh1) report> merging [#5177](https://codecovio/gh/reactivex/rxjava/pull/5177?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/67f77fa803c36c5b125c5261e14c38799cf43619?srcpr&eldesc) will **decrease** coverage by `009%`> the diff coverage is `9603%````diff@@ coverage diff @@## 2x #5177 +/- ##- coverage 9596% 9587% -01% + complexity 5665 5646 -19 files 621 621 lines 40247 40320 +73 branches 5610 5610 + hits 38624 38655 +31 - misses 643 670 +27 - partials 980 995 +15```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5177?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/compare/67f77fa803c36c5b125c5261e14c38799cf43619ffecd5b5b07f27e98d7680d4e315030f36089f03?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `9473% (+029%)` | `6 (ø)` | :x: || [/main/java/io/reactivex/schedulers/schedulersjava](https://codecovio/gh/reactivex/rxjava/compare/67f77fa803c36c5b125c5261e14c38799cf43619ffecd5b5b07f27e98d7680d4e315030f36089f03?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc2nozwr1bgvycy9ty2hlzhvszxjzlmphdme) | `100% (ø)` | `10 (ø)` | :x: || [activex/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/compare/67f77fa803c36c5b125c5261e14c38799cf43619ffecd5b5b07f27e98d7680d4e315030f36089f03?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9fegvjdxrvclnjagvkdwxlci5qyxzh) | `9647% (+018%)` | `9 (ø)` | :x: || [/reactivex/internal/subscriptions/fullarbiterjava](https://codecovio/gh/reactivex/rxjava/compare/67f77fa803c36c5b125c5261e14c38799cf43619ffecd5b5b07f27e98d7680d4e315030f36089f03?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9gdwxsqxjiaxrlci5qyxzh) | `9803% (+001%)` | `29 (ø)` | :x: || [va/io/reactivex/internal/util/exceptionhelperjava](https://codecovio/gh/reactivex/rxjava/compare/67f77fa803c36c5b125c5261e14c38799cf43619ffecd5b5b07f27e98d7680d4e315030f36089f03?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9fegnlchrpb25izwxwzxiuamf2yq) | `100% (ø)` | `15 (ø)` | :x: || [src/main/java/io/reactivex/schedulerjava](https://codecovio/gh/reactivex/rxjava/compare/67f77fa803c36c5b125c5261e14c38799cf43619ffecd5b5b07f27e98d7680d4e315030f36089f03?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2nozwr1bgvylmphdme) | `100% (ø)` | `11 (ø)` | :x: || [in/java/io/reactivex/schedulers/testschedulerjava](https://codecovio/gh/reactivex/rxjava/compare/67f77fa803c36c5b125c5261e14c38799cf43619ffecd5b5b07f27e98d7680d4e315030f36089f03?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc2nozwr1bgvycy9uzxn0u2nozwr1bgvylmphdme) | `100% (ø)` | `11 (ø)` | :x: || [/io/reactivex/internal/functions/objecthelperjava](https://codecovio/gh/reactivex/rxjava/compare/67f77fa803c36c5b125c5261e14c38799cf43619ffecd5b5b07f27e98d7680d4e315030f36089f03?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl09iamvjdehlbhblci5qyxzh) | `100% (ø)` | `21 (ø)` | :x: || [ivex/internal/schedulers/schedulerpoolfactoryjava](https://codecovio/gh/reactivex/rxjava/compare/67f77fa803c36c5b125c5261e14c38799cf43619ffecd5b5b07f27e98d7680d4e315030f36089f03?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ty2hlzhvszxjqb29srmfjdg9yes5qyxzh) | `7619% (+058%)` | `7 (ø)` | :x: || [o/reactivex/internal/schedulers/schedulerwhenjava](https://codecovio/gh/reactivex/rxjava/compare/67f77fa803c36c5b125c5261e14c38799cf43619ffecd5b5b07f27e98d7680d4e315030f36089f03?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ty2hlzhvszxjxagvulmphdme) | `7906% (+306%)` | `4 (ø)` | :x: || and [51 more](https://codecovio/gh/reactivex/rxjava/pull/5177?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5177?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5177?srcpr&elfooter) last update [67f77faffecd5b](https://codecovio/gh/reactivex/rxjava/compare/67f77fa803c36c5b125c5261e14c38799cf43619ffecd5b5b07f27e98d7680d4e315030f36089f03?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5172.0,5182,1,0,0,1,0,1,1,1,2x: fix replay()refcount() leaking items between connections this pr updates `observablereplay()` and `flowablereplay()` **for 2x** to not leak items between reconnections when run with `refcount()` the `replay()` operator is designed to hold onto the buffer even after its completion so late subscribers can still receive the cached data only a new `connect()` clears this data which may or may not happen since `refcount` ensures that there wont be any latecommers to an already completed connection (because it also drops its current subscribers on termination or when reaching zero) the `replay()` can be reset to an empty staterelated: #5172 #5181 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5182?srcpr&elh1) report> merging [#5182](https://codecovio/gh/reactivex/rxjava/pull/5182?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/88c60b9a5b75b07fa23bac460b4a95f0a47bbeba?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `100%````diff@@ coverage diff @@## 2x #5182 +/- ##- coverage 9604% 96% -004% - complexity 5655 5665 +10 files 621 621 lines 40320 40336 +16 branches 5610 5616 +6 + hits 38725 38726 +1 - misses 630 640 +10 - partials 965 970 +5```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5182?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/internal/operators/flowable/flowablerefcountjava](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvmq291bnquamf2yq) | `9871% (+006%)` | `7 (ø)` | :x: || [ernal/operators/observable/observablerefcountjava](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlzknvdw50lmphdme) | `9868% (+007%)` | `7 (ø)` | :x: || [nternal/operators/observable/observablereplayjava](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlcgxhes5qyxzh) | `9777% (-026%)` | `22 (+3)` | || [ex/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvwbgf5lmphdme) | `9069% (+007%)` | `21 (+4)` | :white_check_mark: || [al/operators/observable/observablesampletimedjava](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnhbxbszvrpbwvklmphdme) | `8833% (-834%)` | `3% (ø)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8497% (-467%)` | `56% (+1%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `6028% (-426%)` | `32% (-3%)` | || [rnal/operators/completable/completabletimeoutjava](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvgltzw91dc5qyxzh) | `94% (-4%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9253% (-374%)` | `2% (ø)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% (-364%)` | `9% (-1%)` | || and [33 more](https://codecovio/gh/reactivex/rxjava/pull/5182?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5182?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5182?srcpr&elfooter) last update [88c60b9c2f2435](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5185.0,5189,1,0,0,1,0,1,1,0,2x: fix concatmapeager should accept 0 for prefetch fixes a bug that flowableconcatmapeager(mapper maxconcurrency prefetch) and observableconcatmapeager(mapper maxconcurrency prefetch) operators will not accept 0 and negative numbersreported in #5185 i believe a 0 breaks the internals of the operator and -1 has the completely opposite effect taking more memory || i am sorry with the wrong fixis it only necessary to modify the document? || > is it only necessary to modify the document?yes please modify only the javadoc || thank you! also i think that the test case name is wrong so i modifed it || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5189?srcpr&elh1) report> merging [#5189](https://codecovio/gh/reactivex/rxjava/pull/5189?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/b58642b1ed95c8f54666667fdba73be874db1986?srcpr&eldesc) will **decrease** coverage by `005%`> the diff coverage is `n/a````diff@@ coverage diff @@## 2x #5189 +/- ##- coverage 9602% 9597% -006% complexity 5670 5670 files 621 621 lines 40581 40581 branches 5620 5620 - hits 38969 38946 -23 - misses 640 661 +21 - partials 972 974 +2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5189?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/compare/b58642b1ed95c8f54666667fdba73be874db198669e3b232037ae3957e1f98e4c7695afb2bcf5d13?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `506 (ø)` | :x: || [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/compare/b58642b1ed95c8f54666667fdba73be874db198669e3b232037ae3957e1f98e4c7695afb2bcf5d13?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `522 (ø)` | :x: || [al/operators/observable/observablesampletimedjava](https://codecovio/gh/reactivex/rxjava/compare/b58642b1ed95c8f54666667fdba73be874db198669e3b232037ae3957e1f98e4c7695afb2bcf5d13?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnhbxbszvrpbwvklmphdme) | `8833% (-10%)` | `3% (ø)` | || [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/compare/b58642b1ed95c8f54666667fdba73be874db198669e3b232037ae3957e1f98e4c7695afb2bcf5d13?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `8688% (-82%)` | `2% (ø)` | || [/operators/completable/completableconcatarrayjava](https://codecovio/gh/reactivex/rxjava/compare/b58642b1ed95c8f54666667fdba73be874db198669e3b232037ae3957e1f98e4c7695afb2bcf5d13?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0qxjyyxkuamf2yq) | `9375% (-625%)` | `2% (ø)` | || [rnal/subscribers/singlepostcompletesubscriberjava](https://codecovio/gh/reactivex/rxjava/compare/b58642b1ed95c8f54666667fdba73be874db198669e3b232037ae3957e1f98e4c7695afb2bcf5d13?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyawjlcnmvu2luz2xlug9zdenvbxbszxrlu3vic2nyawjlci5qyxzh) | `9487% (-513%)` | `14% (-1%)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/compare/b58642b1ed95c8f54666667fdba73be874db198669e3b232037ae3957e1f98e4c7695afb2bcf5d13?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8497% (-467%)` | `56% (+1%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/compare/b58642b1ed95c8f54666667fdba73be874db198669e3b232037ae3957e1f98e4c7695afb2bcf5d13?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `6028% (-426%)` | `32% (-3%)` | || [erators/completable/completableconcatiterablejava](https://codecovio/gh/reactivex/rxjava/compare/b58642b1ed95c8f54666667fdba73be874db198669e3b232037ae3957e1f98e4c7695afb2bcf5d13?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0sxrlcmfibguuamf2yq) | `9591% (-409%)` | `2% (ø)` | || [vex/internal/operators/parallel/parallelrunonjava](https://codecovio/gh/reactivex/rxjava/compare/b58642b1ed95c8f54666667fdba73be874db198669e3b232037ae3957e1f98e4c7695afb2bcf5d13?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsunvut24uamf2yq) | `9441% (-305%)` | `6% (ø)` | || and [35 more](https://codecovio/gh/reactivex/rxjava/pull/5189?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5189?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5189?srcpr&elfooter) last update [b58642b69e3b23](https://codecovio/gh/reactivex/rxjava/compare/b58642b1ed95c8f54666667fdba73be874db198669e3b232037ae3957e1f98e4c7695afb2bcf5d13?srcpr&elfooter&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks for the contribution! ||
5165.0,5195,1,0,0,0,0,0,1,0,1x: unicastsubject fail-fast and delay-error behavior this pr adds support for delay-error behavior to `unicastsubject` with methods `unicastsubject create(boolean delayerror)` `unicastsubject create(int capacityhint action0 onterminated boolean delayerror)` behavior of existing factory methods was not changed and is fail-fastrelates to #5165 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5195?srcpr&elh1) report> merging [#5195](https://codecovio/gh/reactivex/rxjava/pull/5195?srcpr&eldesc) into [1x](https://codecovio/gh/reactivex/rxjava/commit/0f1542d7d5d2ce2e89118a5701a6d6fd7d5684b0?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `100%````diff@@ coverage diff @@## 1x #5195 +/- ##+ coverage 8436% 8438% +002% - complexity 2880 2883 +3 files 290 290 lines 18115 18123 +8 branches 2478 2479 +1 + hits 15282 15293 +11 + misses 1964 1961 -3 partials 869 869```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5195?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/rx/subjects/unicastsubjectjava](https://codecovio/gh/reactivex/rxjava/compare/0f1542d7d5d2ce2e89118a5701a6d6fd7d5684b0d3e9cd1aa5fa90c16b0c61f4f54fc1dd8229b56f?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9zdwjqzwn0cy9vbmljyxn0u3viamvjdc5qyxzh) | `8456% (+08%)` | `9 (+2)` | :arrow_up: || [ain/java/rx/internal/schedulers/schedulerwhenjava](https://codecovio/gh/reactivex/rxjava/compare/0f1542d7d5d2ce2e89118a5701a6d6fd7d5684b0d3e9cd1aa5fa90c16b0c61f4f54fc1dd8229b56f?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9zy2hlzhvszxjzl1njagvkdwxlcldozw4uamf2yq) | `8378% (-406%)` | `4% (ø)` | || [n/java/rx/subjects/subjectsubscriptionmanagerjava](https://codecovio/gh/reactivex/rxjava/compare/0f1542d7d5d2ce2e89118a5701a6d6fd7d5684b0d3e9cd1aa5fa90c16b0c61f4f54fc1dd8229b56f?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9zdwjqzwn0cy9tdwjqzwn0u3vic2nyaxb0aw9utwfuywdlci5qyxzh) | `8071% (-143%)` | `15% (-1%)` | || [main/java/rx/internal/operators/operatormergejava](https://codecovio/gh/reactivex/rxjava/compare/0f1542d7d5d2ce2e89118a5701a6d6fd7d5684b0d3e9cd1aa5fa90c16b0c61f4f54fc1dd8229b56f?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jnzxjnzs5qyxzh) | `8683% (+023%)` | `7% (ø)` | :arrow_down: || [in/java/rx/internal/operators/operatorpublishjava](https://codecovio/gh/reactivex/rxjava/compare/0f1542d7d5d2ce2e89118a5701a6d6fd7d5684b0d3e9cd1aa5fa90c16b0c61f4f54fc1dd8229b56f?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jqdwjsaxnolmphdme) | `7932% (+084%)` | `8% (ø)` | :arrow_down: || [n/java/rx/internal/operators/cachedobservablejava](https://codecovio/gh/reactivex/rxjava/compare/0f1542d7d5d2ce2e89118a5701a6d6fd7d5684b0d3e9cd1aa5fa90c16b0c61f4f54fc1dd8229b56f?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvq2fjagvkt2jzzxj2ywjszs5qyxzh) | `8478% (+108%)` | `6% (ø)` | :arrow_down: || [/java/rx/internal/operators/backpressureutilsjava](https://codecovio/gh/reactivex/rxjava/compare/0f1542d7d5d2ce2e89118a5701a6d6fd7d5684b0d3e9cd1aa5fa90c16b0c61f4f54fc1dd8229b56f?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvqmfja3byzxnzdxjlvxrpbhmuamf2yq) | `7045% (+227%)` | `28% (+1%)` | :arrow_up: || [in/java/rx/internal/schedulers/sleepingactionjava](https://codecovio/gh/reactivex/rxjava/compare/0f1542d7d5d2ce2e89118a5701a6d6fd7d5684b0d3e9cd1aa5fa90c16b0c61f4f54fc1dd8229b56f?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9zy2hlzhvszxjzl1nszwvwaw5nqwn0aw9ulmphdme) | `6111% (+555%)` | `3% (+1%)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5195?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5195?srcpr&elfooter) last update [0f1542dd3e9cd1](https://codecovio/gh/reactivex/rxjava/compare/0f1542d7d5d2ce2e89118a5701a6d6fd7d5684b0d3e9cd1aa5fa90c16b0c61f4f54fc1dd8229b56f?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks! ||
5154.0,5199,1,0,0,0,0,1,1,1,2x: increase timeout on parallel & completable tests this pr increases the timeout on `completabletest` test methods and on `parallelflowabletestparallelismandprefetchasync`related: #5154 #5179 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&elh1) report> merging [#5199](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/354a16d08bd55049c37f5928cb846a8127239738?srcpr&eldesc) will **decrease** coverage by `007%`> the diff coverage is `n/a````diff@@ coverage diff @@## 2x #5199 +/- ##- coverage 9598% 959% -008% + complexity 5679 5673 -6 files 621 621 lines 40611 40611 branches 5632 5632 - hits 38982 38950 -32 - misses 648 671 +23 - partials 981 990 +9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `8688% (-82%)` | `2% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `8678% (-661%)` | `60% (-2%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `5886% (-568%)` | `31% (-4%)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9166% (-556%)` | `9% (-1%)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9384% (-462%)` | `27% (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9215% (-458%)` | `2% (ø)` | || [ernal/operators/maybe/maybetakeuntilpublisherjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglsuhvibglzagvylmphdme) | `96% (-4%)` | `2% (ø)` | || [vex/internal/operators/flowable/flowabletimerjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzxiuamf2yq) | `9285% (-358%)` | `2% (ø)` | || [vex/internal/operators/parallel/parallelrunonjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsunvut24uamf2yq) | `9441% (-305%)` | `6% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9642% (-268%)` | `2% (ø)` | || and [36 more](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&elfooter) last update [354a16dd2b3845](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&elfooter&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5179.0,5199,1,0,0,0,0,1,1,1,2x: increase timeout on parallel & completable tests this pr increases the timeout on `completabletest` test methods and on `parallelflowabletestparallelismandprefetchasync`related: #5154 #5179 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&elh1) report> merging [#5199](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/354a16d08bd55049c37f5928cb846a8127239738?srcpr&eldesc) will **decrease** coverage by `007%`> the diff coverage is `n/a````diff@@ coverage diff @@## 2x #5199 +/- ##- coverage 9598% 959% -008% + complexity 5679 5673 -6 files 621 621 lines 40611 40611 branches 5632 5632 - hits 38982 38950 -32 - misses 648 671 +23 - partials 981 990 +9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `8688% (-82%)` | `2% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `8678% (-661%)` | `60% (-2%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `5886% (-568%)` | `31% (-4%)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9166% (-556%)` | `9% (-1%)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9384% (-462%)` | `27% (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9215% (-458%)` | `2% (ø)` | || [ernal/operators/maybe/maybetakeuntilpublisherjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglsuhvibglzagvylmphdme) | `96% (-4%)` | `2% (ø)` | || [vex/internal/operators/flowable/flowabletimerjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzxiuamf2yq) | `9285% (-358%)` | `2% (ø)` | || [vex/internal/operators/parallel/parallelrunonjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsunvut24uamf2yq) | `9441% (-305%)` | `6% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9642% (-268%)` | `2% (ø)` | || and [36 more](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&elfooter) last update [354a16dd2b3845](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&elfooter&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5128.0,5202,1,1,0,1,1,1,1,1,2x: add resilient versions of parallel map() filter() & doonnext() this pr adds 2 new overloads to `parallelflowable` operators `map` `filter` and `doonnext` to enable per item error handling in case the main function fails with some exception```javaflowablerange(0 2)parallel(1)map(v -> 1 / v parallelfailurehandlingskip)sequential()test()assertresult(1)```the new `parallelfailurehandling` has some default enumeration values to handle the common cases in addition the `bifunction` overload allows bounded retries and/or conditional handling of failuresrelated: #5128 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5202?srcpr&elh1) report> merging [#5202](https://codecovio/gh/reactivex/rxjava/pull/5202?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/21a7a0567a51193734e21b234fa3ed925e65d0ec?srcpr&eldesc) will **increase** coverage by `015%`> the diff coverage is `9842%````diff@@ coverage diff @@## 2x #5202 +/- ##+ coverage 9594% 961% +015% - complexity 5677 5709 +32 files 621 625 +4 lines 40611 40991 +380 branches 5632 5675 +43 + hits 38963 39393 +430 + misses 666 627 -39 + partials 982 971 -11```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5202?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ex/internal/operators/parallel/parallelfilterjava](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsrmlsdgvylmphdme) | `9759% (ø)` | `6 (ø)` | :arrow_down: || [n/java/io/reactivex/parallel/parallelflowablejava](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcgfyywxszwwvugfyywxszwxgbg93ywjszs5qyxzh) | `100% (ø)` | `49 (+6)` | :arrow_up: || [io/reactivex/parallel/parallelfailurehandlingjava](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcgfyywxszwwvugfyywxszwxgywlsdxjlsgfuzgxpbmcuamf2yq) | `100% (ø)` | `3 (?)` | || [internal/operators/parallel/parallelfiltertryjava](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsrmlsdgvyvhj5lmphdme) | `9826% (ø)` | `6 (?)` | || [ternal/operators/parallel/paralleldoonnexttryjava](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsrg9pbk5lehrucnkuamf2yq) | `9833% (ø)` | `6 (?)` | || [ex/internal/operators/parallel/parallelmaptryjava](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvstwfwvhj5lmphdme) | `9833% (ø)` | `6 (?)` | || [erators/completable/completableconcatiterablejava](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0sxrlcmfibguuamf2yq) | `9591% (-409%)` | `2% (ø)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% (-364%)` | `9% (-1%)` | || [perators/flowable/flowablesequenceequalsinglejava](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2vxdwvuy2vfcxvhbfnpbmdszs5qyxzh) | `9661% (-339%)` | `3% (ø)` | || [ternal/operators/flowable/flowablesubscribeonjava](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3vic2nyawjlt24uamf2yq) | `9491% (-339%)` | `2% (ø)` | || and [46 more](https://codecovio/gh/reactivex/rxjava/pull/5202?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5202?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5202?srcpr&elfooter) last update [21a7a05dc08894](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || sorry if this is not the correct place for this question however its relevant to the above featurei would like to have an error handler/on error callback but continue the processing or specify the number of retriescan the `parallelfailurehandling` enum be made into an interface instead? i see the enum instances are all used in the same way in all the `tryonnext` methods of the 3 operators (filter map and doonnext) the existing enums can maybe built-in handler instances something like:built-ins:```map(v -> 1 / v parallelfailurehandlingskip) //static instance```some customizable built-ins:```map(v -> 1 / v parallelfailurehandlingretry(5)) //retry 5 times before failing```user defined:```map(v -> 1 / v (retries err) -> { logerror(err) return parrallelfailurehandlingresultskip })```the return values could be `skip`/`ignore` `retry` `stop` `default(val)` or `error(ex)`or perhaps this is already do able using existing api? || please always check the available operators first before asking for a feature: http://reactivexio/rxjava/2x/javadoc/io/reactivex/parallel/parallelflowablehtml#map-ioreactivexfunctionsfunction-ioreactivexfunctionsbifunction-the enums are just convenience implementations of the bifunction variants of the operators ||
5203.0,5207,1,0,0,1,0,1,1,1,2x: prevent tasks to self interrupt on the standard schedulers task wrappers of the various schedulers and modes (direct & worker) were able to get cancelled via interruption from the same thread they were runningrelated #5203 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5207?srcpr&elh1) report> merging [#5207](https://codecovio/gh/reactivex/rxjava/pull/5207?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/ab0c59094d11142cea4fef70169f053e062d85ec?srcpr&eldesc) will **increase** coverage by `005%`> the diff coverage is `9893%````diff@@ coverage diff @@## 2x #5207 +/- ##+ coverage 959% 9595% +005% - complexity 5678 5706 +28 files 621 624 +3 lines 40611 40677 +66 branches 5632 5644 +12 + hits 38947 39032 +85 + misses 673 660 -13 + partials 991 985 -6```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5207?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [activex/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec80dcb69e73abfb6bf3f95ee5c4e18524f28b8843?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9fegvjdxrvclnjagvkdwxlci5qyxzh) | `9459% (-189%)` | `9 (ø)` | || [reactivex/internal/schedulers/newthreadworkerjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec80dcb69e73abfb6bf3f95ee5c4e18524f28b8843?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ozxduahjlywrxb3jrzxiuamf2yq) | `100% (ø)` | `17 (+2)` | :arrow_up: || [ternal/schedulers/scheduleddirectperiodictaskjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec80dcb69e73abfb6bf3f95ee5c4e18524f28b8843?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ty2hlzhvszwreaxjly3rqzxjpb2rpy1rhc2suamf2yq) | `100% (ø)` | `2 (?)` | || [reactivex/internal/schedulers/singleschedulerjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec80dcb69e73abfb6bf3f95ee5c4e18524f28b8843?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9taw5nbgvty2hlzhvszxiuamf2yq) | `9577% (+012%)` | `13 (ø)` | :arrow_down: || [tivex/internal/schedulers/scheduleddirecttaskjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec80dcb69e73abfb6bf3f95ee5c4e18524f28b8843?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ty2hlzhvszwreaxjly3ruyxnrlmphdme) | `100% (ø)` | `2 (?)` | || [ctivex/internal/schedulers/abstractdirecttaskjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec80dcb69e73abfb6bf3f95ee5c4e18524f28b8843?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9bynn0cmfjderpcmvjdfrhc2suamf2yq) | `100% (ø)` | `16 (?)` | || [activex/internal/schedulers/scheduledrunnablejava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec80dcb69e73abfb6bf3f95ee5c4e18524f28b8843?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ty2hlzhvszwrsdw5uywjszs5qyxzh) | `9574% (+241%)` | `27 (+3)` | :arrow_up: || [src/main/java/io/reactivex/schedulerjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec80dcb69e73abfb6bf3f95ee5c4e18524f28b8843?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2nozwr1bgvylmphdme) | `9883% (-117%)` | `11 (ø)` | || [al/operators/observable/observablesampletimedjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec80dcb69e73abfb6bf3f95ee5c4e18524f28b8843?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnhbxbszvrpbwvklmphdme) | `8833% (-834%)` | `3% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec80dcb69e73abfb6bf3f95ee5c4e18524f28b8843?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9122% (-527%)` | `9% (-2%)` | || and [44 more](https://codecovio/gh/reactivex/rxjava/pull/5207?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5207?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5207?srcpr&elfooter) last update [ab0c59080dcb69](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec80dcb69e73abfb6bf3f95ee5c4e18524f28b8843?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5130.0,5208,1,0,0,0,0,0,1,0,2x: fix images of firstelement flattenasx flatmapiterable this pr links in the new images from #5130 for previously misleading marble diagrams of the operators # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5208?srcpr&elh1) report> merging [#5208](https://codecovio/gh/reactivex/rxjava/pull/5208?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/ab0c59094d11142cea4fef70169f053e062d85ec?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `n/a````diff@@ coverage diff @@## 2x #5208 +/- ##- coverage 959% 9588% -002% + complexity 5678 5672 -6 files 621 621 lines 40611 40611 branches 5632 5632 - hits 38947 38941 -6 + misses 673 671 -2 - partials 991 999 +8```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5208?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `168 (ø)` | :arrow_down: || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `9932% (ø)` | `131 (ø)` | :arrow_down: || [ain/java/io/reactivex/subjects/unicastsubjectjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvvw5py2fzdfn1ymply3quamf2yq) | `9928% (+215%)` | `53 (+2)` | :arrow_up: || [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `522 (ø)` | :arrow_down: || [java/io/reactivex/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9vbmljyxn0uhjvy2vzc29ylmphdme) | `9681% (ø)` | `57 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `506 (ø)` | :arrow_down: || [reactivex/internal/operators/maybe/maybeusingjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvxnpbmcuamf2yq) | `9393% (-607%)` | `4% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `921% (-439%)` | `10% (-1%)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% (-364%)` | `9% (-1%)` | || [al/operators/observable/observablesampletimedjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnhbxbszvrpbwvklmphdme) | `9333% (-334%)` | `3% (ø)` | || and [34 more](https://codecovio/gh/reactivex/rxjava/pull/5208?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5208?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5208?srcpr&elfooter) last update [ab0c59073e22cd](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || ### plus unicastx:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/unicastprocessorpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/unicastsubjectpng) || yes the default with is set to 640 and these new images are slightly bigger in their native form || thanks for the reviews guys! ||
5148.0,5210,1,0,0,0,0,0,1,0,2x: better documentation on the abstract consumer classes this pr improves the documentation of the abstract consumer classes such as `disposablesubscriber` `resourcesubscriber` and their counterparts for the other base reactive typesit contains a lot of copy-paste so please read through all of the text in case the text was not properly adapted to the abstract class at handrelated: #5148 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5210?srcpr&elh1) report> merging [#5210](https://codecovio/gh/reactivex/rxjava/pull/5210?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/ab0c59094d11142cea4fef70169f053e062d85ec?srcpr&eldesc) will **increase** coverage by `011%`> the diff coverage is `n/a````diff@@ coverage diff @@## 2x #5210 +/- ##+ coverage 959% 9601% +011% - complexity 5678 5684 +6 files 621 621 lines 40611 40611 branches 5632 5632 + hits 38947 38992 +45 + misses 673 644 -29 + partials 991 975 -16```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5210?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ava/io/reactivex/observers/disposableobserverjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec1ad3e1f30bad5f60cb486594f3d33ba801301f6c?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvb2jzzxj2zxjzl0rpc3bvc2fibgvpynnlcnzlci5qyxzh) | `100% (ø)` | `7 (ø)` | :arrow_down: || [o/reactivex/observers/disposablemaybeobserverjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec1ad3e1f30bad5f60cb486594f3d33ba801301f6c?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvb2jzzxj2zxjzl0rpc3bvc2fibgvnyxlizu9ic2vydmvylmphdme) | `100% (ø)` | `7 (ø)` | :arrow_down: || [io/reactivex/observers/resourcesingleobserverjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec1ad3e1f30bad5f60cb486594f3d33ba801301f6c?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvb2jzzxj2zxjzl1jlc291cmnlu2luz2xlt2jzzxj2zxiuamf2yq) | `100% (ø)` | `8 (ø)` | :arrow_down: || [tivex/observers/disposablecompletableobserverjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec1ad3e1f30bad5f60cb486594f3d33ba801301f6c?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvb2jzzxj2zxjzl0rpc3bvc2fibgvdb21wbgv0ywjszu9ic2vydmvylmphdme) | `100% (ø)` | `7 (ø)` | :arrow_down: || [/reactivex/observers/disposablesingleobserverjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec1ad3e1f30bad5f60cb486594f3d33ba801301f6c?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvb2jzzxj2zxjzl0rpc3bvc2fibgvtaw5nbgvpynnlcnzlci5qyxzh) | `100% (ø)` | `7 (ø)` | :arrow_down: || [va/io/reactivex/subscribers/defaultsubscriberjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec1ad3e1f30bad5f60cb486594f3d33ba801301f6c?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3vic2nyawjlcnmvrgvmyxvsdfn1ynnjcmlizxiuamf2yq) | `8666% (ø)` | `5 (ø)` | :arrow_down: || [activex/observers/resourcecompletableobserverjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec1ad3e1f30bad5f60cb486594f3d33ba801301f6c?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvb2jzzxj2zxjzl1jlc291cmnlq29tcgxldgfibgvpynnlcnzlci5qyxzh) | `100% (ø)` | `8 (ø)` | :arrow_down: || [io/reactivex/subscribers/disposablesubscriberjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec1ad3e1f30bad5f60cb486594f3d33ba801301f6c?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3vic2nyawjlcnmvrglzcg9zywjszvn1ynnjcmlizxiuamf2yq) | `100% (ø)` | `9 (ø)` | :arrow_down: || [/java/io/reactivex/observers/resourceobserverjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec1ad3e1f30bad5f60cb486594f3d33ba801301f6c?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvb2jzzxj2zxjzl1jlc291cmnlt2jzzxj2zxiuamf2yq) | `100% (ø)` | `8 (ø)` | :arrow_down: || [a/io/reactivex/subscribers/resourcesubscriberjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec1ad3e1f30bad5f60cb486594f3d33ba801301f6c?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3vic2nyawjlcnmvumvzb3vyy2vtdwjzy3jpymvylmphdme) | `100% (ø)` | `9 (ø)` | :arrow_down: || and [47 more](https://codecovio/gh/reactivex/rxjava/pull/5210?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5210?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5210?srcpr&elfooter) last update [ab0c5901ad3e1f](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec1ad3e1f30bad5f60cb486594f3d33ba801301f6c?srcpr&elfooter&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5104.0,5213,1,0,0,0,0,1,1,0,2x: fix window() with time+size emission problems the `window()` operator overload with time and size bound didnt work correctly when some windows were terminated by the timeout and others by the size this pr fixes: - the case when the operator restarts the time windows when the size bound is reached - leaking of the worker - the item counter not reset to zero when the time bound is reached - periodic window bound stopped working after the first windowrelated #5104 (again) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5213?srcpr&elh1) report> merging [#5213](https://codecovio/gh/reactivex/rxjava/pull/5213?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/cd91a9f712db77e09dfc3147ba9b9eaaefb525fb?srcpr&eldesc) will **increase** coverage by `009%`> the diff coverage is `100%````diff@@ coverage diff @@## 2x #5213 +/- ##+ coverage 9602% 9612% +009% - complexity 5680 5690 +10 files 621 621 lines 40611 40617 +6 branches 5632 5636 +4 + hits 38998 39042 +44 + misses 643 623 -20 + partials 970 952 -18```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5213?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ternal/operators/flowable/flowablewindowtimedjava](https://codecovio/gh/reactivex/rxjava/compare/cd91a9f712db77e09dfc3147ba9b9eaaefb525fb158cb0d97bd44133124353de5bf68f3a25207b94?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlv2luzg93vgltzwquamf2yq) | `8468% (+101%)` | `4 (ø)` | :arrow_down: || [al/operators/observable/observablewindowtimedjava](https://codecovio/gh/reactivex/rxjava/compare/cd91a9f712db77e09dfc3147ba9b9eaaefb525fb158cb0d97bd44133124353de5bf68f3a25207b94?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvd1rpbwvklmphdme) | `9071% (+228%)` | `4 (ø)` | :arrow_down: || [/operators/completable/completableconcatarrayjava](https://codecovio/gh/reactivex/rxjava/compare/cd91a9f712db77e09dfc3147ba9b9eaaefb525fb158cb0d97bd44133124353de5bf68f3a25207b94?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0qxjyyxkuamf2yq) | `9375% (-625%)` | `2% (ø)` | || [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/compare/cd91a9f712db77e09dfc3147ba9b9eaaefb525fb158cb0d97bd44133124353de5bf68f3a25207b94?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `9491% (-509%)` | `10% (-1%)` | || [ternal/operators/completable/completableusingjava](https://codecovio/gh/reactivex/rxjava/compare/cd91a9f712db77e09dfc3147ba9b9eaaefb525fb158cb0d97bd44133124353de5bf68f3a25207b94?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvxnpbmcuamf2yq) | `9523% (-477%)` | `4% (ø)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/compare/cd91a9f712db77e09dfc3147ba9b9eaaefb525fb158cb0d97bd44133124353de5bf68f3a25207b94?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% (-364%)` | `9% (-1%)` | || [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/compare/cd91a9f712db77e09dfc3147ba9b9eaaefb525fb158cb0d97bd44133124353de5bf68f3a25207b94?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `918% (-328%)` | `2% (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/compare/cd91a9f712db77e09dfc3147ba9b9eaaefb525fb158cb0d97bd44133124353de5bf68f3a25207b94?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9383% (-177%)` | `9% (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/compare/cd91a9f712db77e09dfc3147ba9b9eaaefb525fb158cb0d97bd44133124353de5bf68f3a25207b94?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9473% (-176%)` | `9% (-2%)` | || [al/operators/observable/observablesampletimedjava](https://codecovio/gh/reactivex/rxjava/compare/cd91a9f712db77e09dfc3147ba9b9eaaefb525fb158cb0d97bd44133124353de5bf68f3a25207b94?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnhbxbszvrpbwvklmphdme) | `9666% (-167%)` | `3% (ø)` | || and [39 more](https://codecovio/gh/reactivex/rxjava/pull/5213?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5213?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5213?srcpr&elfooter) last update [cd91a9f158cb0d](https://codecovio/gh/reactivex/rxjava/compare/cd91a9f712db77e09dfc3147ba9b9eaaefb525fb158cb0d97bd44133124353de5bf68f3a25207b94?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5165.0,5217,1,0,0,0,0,0,1,0,[2x] unicastsubject fail fast support this pr adds support for fail-fast behavior to `unicastsubject` with methods `unicastsubject create(boolean delayerror)` `unicastsubject create(int capacityhint runnable onterminated boolean delayerror)` relates to #5165 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5217?srcpr&elh1) report> merging [#5217](https://codecovio/gh/reactivex/rxjava/pull/5217?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/0e1956682e6154b551da5c8bee8bc5ba94e36f21?srcpr&eldesc) will **decrease** coverage by `004%`> the diff coverage is `975%````diff@@ coverage diff @@## 2x #5217 +/- ##- coverage 9604% 9599% -005% - complexity 5705 5711 +6 files 624 624 lines 40683 40705 +22 branches 5648 5655 +7 + hits 39075 39076 +1 - misses 632 655 +23 + partials 976 974 -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5217?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ain/java/io/reactivex/subjects/unicastsubjectjava](https://codecovio/gh/reactivex/rxjava/compare/0e1956682e6154b551da5c8bee8bc5ba94e36f21efcd9a9c172248192a5b14a068d8b0c994061deb?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvvw5py2fzdfn1ymply3quamf2yq) | `9875% (-053%)` | `65 (+12)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/compare/0e1956682e6154b551da5c8bee8bc5ba94e36f21efcd9a9c172248192a5b14a068d8b0c994061deb?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8393% (-778%)` | `55% (-2%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/compare/0e1956682e6154b551da5c8bee8bc5ba94e36f21efcd9a9c172248192a5b14a068d8b0c994061deb?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `8678% (-485%)` | `60% (ø)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/0e1956682e6154b551da5c8bee8bc5ba94e36f21efcd9a9c172248192a5b14a068d8b0c994061deb?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9384% (-462%)` | `27% (-1%)` | || [ctivex/internal/schedulers/abstractdirecttaskjava](https://codecovio/gh/reactivex/rxjava/compare/0e1956682e6154b551da5c8bee8bc5ba94e36f21efcd9a9c172248192a5b14a068d8b0c994061deb?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9bynn0cmfjderpcmvjdfrhc2suamf2yq) | `9565% (-435%)` | `15% (-1%)` | || [rnal/operators/completable/completabletimeoutjava](https://codecovio/gh/reactivex/rxjava/compare/0e1956682e6154b551da5c8bee8bc5ba94e36f21efcd9a9c172248192a5b14a068d8b0c994061deb?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvgltzw91dc5qyxzh) | `94% (-4%)` | `2% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/compare/0e1956682e6154b551da5c8bee8bc5ba94e36f21efcd9a9c172248192a5b14a068d8b0c994061deb?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `921% (-351%)` | `10% (ø)` | || [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/compare/0e1956682e6154b551da5c8bee8bc5ba94e36f21efcd9a9c172248192a5b14a068d8b0c994061deb?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `9491% (-339%)` | `10% (-1%)` | || [n/java/io/reactivex/processors/asyncprocessorjava](https://codecovio/gh/reactivex/rxjava/compare/0e1956682e6154b551da5c8bee8bc5ba94e36f21efcd9a9c172248192a5b14a068d8b0c994061deb?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9bc3luy1byb2nlc3nvci5qyxzh) | `9576% (-339%)` | `54% (-2%)` | || [activex/internal/operators/single/singlecachejava](https://codecovio/gh/reactivex/rxjava/compare/0e1956682e6154b551da5c8bee8bc5ba94e36f21efcd9a9c172248192a5b14a068d8b0c994061deb?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvdywnozs5qyxzh) | `9705% (-295%)` | `23% (-1%)` | || and [42 more](https://codecovio/gh/reactivex/rxjava/pull/5217?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5217?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5217?srcpr&elfooter) last update [0e19566efcd9a9](https://codecovio/gh/reactivex/rxjava/compare/0e1956682e6154b551da5c8bee8bc5ba94e36f21efcd9a9c172248192a5b14a068d8b0c994061deb?srcpr&elfooter&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || yes will do that as separate pr || thanks! ||
5145.0,5223,1,0,0,1,0,0,1,0,2x: improve the documentation of schedulers utility class this pr improves the javadoc of the `ioreactivexschedulersschedulers` utility class plus adds a missing `schedulersupport` constant for the `single()` schedulerlet me know if something needs further explanation (or some new case needs explanation)related: #5145 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5223?srcpr&elh1) report> merging [#5223](https://codecovio/gh/reactivex/rxjava/pull/5223?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/59dc7a38d48fea037383c577b969f579e09c0c23?srcpr&eldesc) will **decrease** coverage by `009%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5223/graphs/treesvg?width650&height150&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5223?srcpr&eltree)```diff@@ coverage diff @@## 2x #5223 +/- ##- coverage 9601% 9591% -01% + complexity 5747 5740 -7 files 628 628 lines 41085 41085 branches 5698 5698 - hits 39446 39406 -40 - misses 657 679 +22 - partials 982 1000 +18```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5223?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/schedulers/schedulersjava](https://codecovio/gh/reactivex/rxjava/pull/5223?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc2nozwr1bgvycy9ty2hlzhvszxjzlmphdme) | `100% (ø)` | `10 (ø)` | :arrow_down: || [a/io/reactivex/processors/serializedprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5223?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9tzxjpywxpemvkuhjvy2vzc29ylmphdme) | `9148% (-639%)` | `27% (-1%)` | || [/internal/operators/maybe/maybetakeuntilmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5223?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglstwf5ymuuamf2yq) | `9387% (-613%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5223?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `8955% (-598%)` | `2% (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5223?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9245% (-567%)` | `23% (-2%)` | || [rnal/operators/completable/completabletimeoutjava](https://codecovio/gh/reactivex/rxjava/pull/5223?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvgltzw91dc5qyxzh) | `94% (-4%)` | `2% (ø)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/pull/5223?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% (-364%)` | `9% (-1%)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5223?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `8983% (-321%)` | `5% (ø)` | || [activex/internal/operators/single/singlecachejava](https://codecovio/gh/reactivex/rxjava/pull/5223?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvdywnozs5qyxzh) | `9705% (-295%)` | `23% (-1%)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5223?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9642% (-268%)` | `2% (ø)` | || and [36 more](https://codecovio/gh/reactivex/rxjava/pull/5223?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5223?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5223?srcpr&elfooter) last update [59dc7a3a3bfa80](https://codecovio/gh/reactivex/rxjava/pull/5223?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5224.0,5225,1,0,0,0,0,1,1,0,1x: fix completableonerrorresumenext unsubscribe not propagated the `completableonerrorresumenext` did not properly propagate the downstream `unsubscribe()` call to upstreamreported in #5224 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&elh1) report> merging [#5225](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eldesc) into [1x](https://codecovio/gh/reactivex/rxjava/commit/1d7edee0a60cbf185157555483db430e1afd6702?srcpr&eldesc) will **decrease** coverage by `01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5225/graphs/treesvg?height150&width650&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree)```diff@@ coverage diff @@## 1x #5225 +/- ##- coverage 845% 844% -011% + complexity 2886 2883 -3 files 290 290 lines 18123 18124 +1 branches 2479 2479 - hits 15315 15297 -18 - misses 1943 1963 +20 + partials 865 864 -1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/rx/completablejava](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9db21wbgv0ywjszs5qyxzh) | `8337% (+002%)` | `103 (ø)` | :arrow_down: || [/java/rx/internal/util/unsafe/mpsclinkedqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc91dglsl3vuc2fmzs9nchnjtglua2vkuxvldwuuamf2yq) | `7575% (-1213%)` | `9% (-1%)` | || [/rx/internal/operators/operatorwindowwithtimejava](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jxaw5kb3dxaxrovgltzs5qyxzh) | `4204% (-644%)` | `3% (ø)` | || [internal/subscriptions/sequentialsubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9zdwjzy3jpchrpb25zl1nlcxvlbnrpywxtdwjzy3jpchrpb24uamf2yq) | `4655% (-345%)` | `14% (-1%)` | || [/java/rx/internal/operators/backpressureutilsjava](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvqmfja3byzxnzdxjlvxrpbhmuamf2yq) | `6818% (-228%)` | `27% (-1%)` | || [src/main/java/rx/observers/serializedobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9vynnlcnzlcnmvu2vyawfsaxplze9ic2vydmvylmphdme) | `9891% (-109%)` | `19% (-1%)` | || [n/java/rx/subjects/subjectsubscriptionmanagerjava](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9zdwjqzwn0cy9tdwjqzwn0u3vic2nyaxb0aw9utwfuywdlci5qyxzh) | `8071% (-072%)` | `15% (ø)` | || [/rx/internal/schedulers/cachedthreadschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9zy2hlzhvszxjzl0nhy2hlzfrocmvhzfnjagvkdwxlci5qyxzh) | `9029% (+097%)` | `6% (ø)` | :arrow_down: || [a/rx/internal/operators/bufferuntilsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvqnvmzmvyvw50awxtdwjzy3jpymvylmphdme) | `7301% (+158%)` | `12% (+1%)` | :arrow_up: || [n/java/rx/internal/operators/cachedobservablejava](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvq2fjagvkt2jzzxj2ywjszs5qyxzh) | `8532% (+163%)` | `6% (ø)` | :arrow_down: || and [1 more](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&elfooter) last update [1d7edee51bd12a](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5165.0,5226,1,0,0,0,0,0,1,0,2x unicastprocessor fail-fast support this pr adds support for fail-fast behavior to `unicastprocessor` with methods `unicastprocessor create(boolean delayerror)` `unicastprocessor create(int capacityhint runnable onterminated boolean delayerror)` relates to #5165 #5217 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&elh1) report> merging [#5226](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/59dc7a38d48fea037383c577b969f579e09c0c23?srcpr&eldesc) will **increase** coverage by `006%`> the diff coverage is `9375%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5226/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree)```diff@@ coverage diff @@## 2x #5226 +/- ##+ coverage 9601% 9607% +006% - complexity 5747 5758 +11 files 628 628 lines 41085 41099 +14 branches 5698 5703 +5 + hits 39446 39485 +39 + misses 657 642 -15 + partials 982 972 -10```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [java/io/reactivex/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9vbmljyxn0uhjvy2vzc29ylmphdme) | `959% (-091%)` | `64 (+7)` | || [a/io/reactivex/processors/serializedprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9tzxjpywxpemvkuhjvy2vzc29ylmphdme) | `9148% (-639%)` | `27% (-1%)` | || [/internal/operators/maybe/maybetakeuntilmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglstwf5ymuuamf2yq) | `9387% (-613%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9104% (-448%)` | `2% (ø)` | || [ernal/operators/maybe/maybetakeuntilpublisherjava](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglsuhvibglzagvylmphdme) | `96% (-4%)` | `2% (ø)` | || [rnal/operators/completable/completabletimeoutjava](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvgltzw91dc5qyxzh) | `94% (-4%)` | `2% (ø)` | || [ternal/operators/completable/completablecachejava](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq2fjaguuamf2yq) | `9696% (-304%)` | `23% (-1%)` | || [x/internal/operators/maybe/maybeswitchifemptyjava](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlu3dpdgnoswzfbxb0es5qyxzh) | `9722% (-278%)` | `2% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `6153% (-257%)` | `12% (-1%)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || and [40 more](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&elfooter) last update [59dc7a3d7409bb](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5246.0,5247,1,0,0,0,0,1,1,1,2x: fix flowabletolist() onnext/cancel race this pr fixes the `nullpointerexception` that can happen because `cancel` nulls out the value and `onnext` simply dereferences that value in `flowabletolist`reported in #5246 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&elh1) report> merging [#5247](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/7c95808f077537428f2ae80fffd15e2848a2de31?srcpr&eldesc) will **decrease** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5247/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree)```diff@@ coverage diff @@## 2x #5247 +/- ##- coverage 9604% 96% -005% - complexity 5749 5750 +1 files 628 628 lines 41073 41075 +2 branches 5697 5698 +1 - hits 39450 39434 -16 - misses 636 659 +23 + partials 987 982 -5```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ex/internal/operators/flowable/flowabletolistjava](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvg9maxn0lmphdme) | `9677% (+022%)` | `2 (ø)` | :arrow_down: || [rnal/subscriptions/arraycompositesubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9bcnjheunvbxbvc2l0zvn1ynnjcmlwdglvbi5qyxzh) | `9333% (-667%)` | `17% (-1%)` | || [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `8688% (-656%)` | `2% (ø)` | || [/java/io/reactivex/subjects/serializedsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvu2vyawfsaxplzfn1ymply3quamf2yq) | `8947% (-632%)` | `26% (-1%)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8497% (-57%)` | `56% (ø)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9384% (-462%)` | `27% (-1%)` | || [erators/completable/completableconcatiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0sxrlcmfibguuamf2yq) | `9591% (-409%)` | `2% (ø)` | || [rnal/operators/completable/completabletimeoutjava](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvgltzw91dc5qyxzh) | `94% (-4%)` | `2% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `8854% (-397%)` | `62% (+1%)` | || [vex/internal/operators/flowable/flowabletimerjava](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzxiuamf2yq) | `9285% (-358%)` | `2% (ø)` | || and [42 more](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&elfooter) last update [7c95808affef41](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5249.0,5258,1,0,0,0,0,1,1,1,"1x use intellij ide friendly assertion failure message the `assertitem` failure message pattern in `testsubscriber` does not match any of the regex patterns defined by intellij to show ` ` link ![before](https://cloudgithubusercontentcom/assets/2339109/24586365/9239290c-179f-11e7-8178-38425448d3a1jpg)by changing the ""_expected to be_"" to ""_expected:_"" the pattern is recognised by intellij and the helpful link is presented![after](https://cloudgithubusercontentcom/assets/2339109/24586364/9238f414-179f-11e7-9b12-e6b648318550jpg)the original idea from #5249 was to use the ""_expected: but was: _"" pattern used in junit but it is not picked up on its own by intellij the assertionerror must extend from junits comparisonfailure to get it recognised this however requires dependency on junit![junit](https://cloudgithubusercontentcom/assets/2339109/24586389/fefd6c38-179f-11e7-8841-884bc07db404jpg)so in the end the fix is just a very simple change in the message # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5258?srcpr&elh1) report> merging [#5258](https://codecovio/gh/reactivex/rxjava/pull/5258?srcpr&eldesc) into [1x](https://codecovio/gh/reactivex/rxjava/commit/bc40a84ffd66852ffcc320f2a2430ef52c903f61?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `0%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5258/graphs/treesvg?srcpr&width650&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/5258?srcpr&eltree)```diff@@ coverage diff @@## 1x #5258 +/- ##- coverage 8429% 8425% -004% - complexity 2879 2880 +1 files 290 290 lines 18125 18125 branches 2479 2479 - hits 15279 15272 -7 - misses 1974 1980 +6 - partials 872 873 +1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5258?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/rx/observers/testsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/5258?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9vynnlcnzlcnmvvgvzdfn1ynnjcmlizxiuamf2yq) | `8181% (ø)` | `76 (ø)` | :arrow_down: || [ain/java/rx/internal/operators/onsubscribeambjava](https://codecovio/gh/reactivex/rxjava/pull/5258?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt25tdwjzy3jpymvbbwiuamf2yq) | `7913% (-504%)` | `13% (ø)` | || [n/java/rx/internal/operators/cachedobservablejava](https://codecovio/gh/reactivex/rxjava/pull/5258?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvq2fjagvkt2jzzxj2ywjszs5qyxzh) | `8369% (-109%)` | `6% (ø)` | || [ava/rx/internal/util/backpressuredrainmanagerjava](https://codecovio/gh/reactivex/rxjava/pull/5258?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc91dglsl0jhy2twcmvzc3vyzuryywlutwfuywdlci5qyxzh) | `679% (+123%)` | `21% (+1%)` | :arrow_up: || [n/java/rx/subscriptions/compositesubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5258?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9zdwjzy3jpchrpb25zl0nvbxbvc2l0zvn1ynnjcmlwdglvbi5qyxzh) | `7662% (+129%)` | `24% (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5258?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5258?srcpr&elfooter) last update [bc40a845c236b8](https://codecovio/gh/reactivex/rxjava/pull/5258?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||"
5276.0,5277,1,0,0,0,0,1,1,0,2x: singlesubscribe(biconsumer) consistent isdisposed fixes the `singlesubscribe(biconsumer)` to report `isdisposed` when terminatingreported in #5276 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5277?srcpr&elh1) report> merging [#5277](https://codecovio/gh/reactivex/rxjava/pull/5277?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/80d9b909e9df856b34f60438235e74f0daa49a96?srcpr&eldesc) will **increase** coverage by `008%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5277/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5277?srcpr&eltree)```diff@@ coverage diff @@## 2x #5277 +/- ##+ coverage 9602% 9611% +008% - complexity 5752 5754 +2 files 628 628 lines 41077 41079 +2 branches 5699 5699 + hits 39445 39482 +37 + misses 658 627 -31 + partials 974 970 -4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5277?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [x/internal/observers/biconsumersingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5277?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0jpq29uc3vtzxjtaw5nbgvpynnlcnzlci5qyxzh) | `100% (ø)` | `7 (ø)` | :arrow_down: || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5277?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9196% (-715%)` | `2% (ø)` | || [/operators/completable/completableconcatarrayjava](https://codecovio/gh/reactivex/rxjava/pull/5277?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0qxjyyxkuamf2yq) | `9375% (-625%)` | `2% (ø)` | || [reactivex/internal/operators/maybe/maybeusingjava](https://codecovio/gh/reactivex/rxjava/pull/5277?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvxnpbmcuamf2yq) | `9595% (-405%)` | `4% (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/5277?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `913% (-363%)` | `2% (ø)` | || [al/operators/observable/observablesampletimedjava](https://codecovio/gh/reactivex/rxjava/pull/5277?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnhbxbszvrpbwvklmphdme) | `9333% (-334%)` | `3% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5277?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `934% (-275%)` | `2% (ø)` | || [rnal/operators/flowable/flowablesequenceequaljava](https://codecovio/gh/reactivex/rxjava/pull/5277?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2vxdwvuy2vfcxvhbc5qyxzh) | `9634% (-244%)` | `2% (ø)` | || [/internal/operators/maybe/maybetakeuntilmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5277?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglstwf5ymuuamf2yq) | `9795% (-205%)` | `2% (ø)` | || [activex/internal/disposables/disposablehelperjava](https://codecovio/gh/reactivex/rxjava/pull/5277?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvrglzcg9zywjszuhlbhblci5qyxzh) | `9814% (-186%)` | `27% (-1%)` | || and [38 more](https://codecovio/gh/reactivex/rxjava/pull/5277?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5277?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5277?srcpr&elfooter) last update [80d9b90445d93c](https://codecovio/gh/reactivex/rxjava/pull/5277?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5283.0,5296,1,0,0,0,0,0,1,0,improve doondispose javadoc sorry for the earlier pr #5295 :/ this addresses the javadoc issues discussed in #5283- removes the note in `observabledoondispose` which claims its action would be called on terminal events- slightly adjusts the javadocs of the `maybe`/`single`/`completable` variants- adds `@throws` note to some `observable`/`single`/`maybe` `doondispose` as it was present in the `completable` variant # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&elh1) report> merging [#5296](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/5ab208308249f3387df62d1861ab04c75f0915de?srcpr&eldesc) will **increase** coverage by `015%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5296/graphs/treesvg?width650&srcpr&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree)```diff@@ coverage diff @@## 2x #5296 +/- ##+ coverage 9611% 9626% +015% - complexity 5750 5767 +17 files 628 628 lines 41085 41085 branches 5703 5703 + hits 39487 39551 +64 + misses 634 600 -34 + partials 964 934 -30```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `506 (ø)` | :arrow_down: || [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `112 (ø)` | :arrow_down: || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `9932% (ø)` | `131 (ø)` | :arrow_down: || [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `168 (ø)` | :arrow_down: || [vex/internal/operators/flowable/flowabletimerjava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzxiuamf2yq) | `9285% (-358%)` | `2% (ø)` | || [x/internal/operators/maybe/maybeswitchifemptyjava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlu3dpdgnoswzfbxb0es5qyxzh) | `9722% (-278%)` | `2% (ø)` | || [vex/internal/operators/flowable/flowablecachejava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq2fjaguuamf2yq) | `9261% (-269%)` | `7% (ø)` | || [al/operators/observable/observablesampletimedjava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnhbxbszvrpbwvklmphdme) | `9666% (-167%)` | `3% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9552% (-075%)` | `2% (ø)` | || [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxauamf2yq) | `8289% (-066%)` | `3% (ø)` | || and [33 more](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&elfooter) last update [5ab20836c6c8f4](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5295.0,5296,1,0,0,0,0,0,1,0,improve doondispose javadoc sorry for the earlier pr #5295 :/ this addresses the javadoc issues discussed in #5283- removes the note in `observabledoondispose` which claims its action would be called on terminal events- slightly adjusts the javadocs of the `maybe`/`single`/`completable` variants- adds `@throws` note to some `observable`/`single`/`maybe` `doondispose` as it was present in the `completable` variant # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&elh1) report> merging [#5296](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/5ab208308249f3387df62d1861ab04c75f0915de?srcpr&eldesc) will **increase** coverage by `015%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5296/graphs/treesvg?width650&srcpr&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree)```diff@@ coverage diff @@## 2x #5296 +/- ##+ coverage 9611% 9626% +015% - complexity 5750 5767 +17 files 628 628 lines 41085 41085 branches 5703 5703 + hits 39487 39551 +64 + misses 634 600 -34 + partials 964 934 -30```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `506 (ø)` | :arrow_down: || [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `112 (ø)` | :arrow_down: || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `9932% (ø)` | `131 (ø)` | :arrow_down: || [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `168 (ø)` | :arrow_down: || [vex/internal/operators/flowable/flowabletimerjava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzxiuamf2yq) | `9285% (-358%)` | `2% (ø)` | || [x/internal/operators/maybe/maybeswitchifemptyjava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlu3dpdgnoswzfbxb0es5qyxzh) | `9722% (-278%)` | `2% (ø)` | || [vex/internal/operators/flowable/flowablecachejava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq2fjaguuamf2yq) | `9261% (-269%)` | `7% (ø)` | || [al/operators/observable/observablesampletimedjava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnhbxbszvrpbwvklmphdme) | `9666% (-167%)` | `3% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9552% (-075%)` | `2% (ø)` | || [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxauamf2yq) | `8289% (-066%)` | `3% (ø)` | || and [33 more](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&elfooter) last update [5ab20836c6c8f4](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5300.0,5302,1,0,0,0,0,0,1,0,2x: add singleunsubscribeon() this pr adds the `singleunsubscribeon()` operatorrelated: #5300 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&elh1) report> merging [#5302](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/db627720e5518845677dff536e6b0f2d9e5c2ea3?srcpr&eldesc) will **decrease** coverage by `007%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5302/graphs/treesvg?width650&srcpr&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree)```diff@@ coverage diff @@## 2x #5302 +/- ##- coverage 9617% 9609% -008% complexity 5756 5756 files 628 629 +1 lines 41085 41112 +27 branches 5703 5705 +2 - hits 39514 39508 -6 - misses 613 629 +16 - partials 958 975 +17```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `9933% (ø)` | `132 (+1)` | :arrow_up: || [internal/operators/single/singleunsubscribeonjava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvvbnn1ynnjcmlizu9ulmphdme) | `100% (ø)` | `2 (?)` | || [rnal/subscriptions/arraycompositesubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9bcnjheunvbxbvc2l0zvn1ynnjcmlwdglvbi5qyxzh) | `9333% (-667%)` | `17% (-1%)` | || [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `9491% (-509%)` | `10% (-1%)` | || [erators/completable/completableconcatiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0sxrlcmfibguuamf2yq) | `9591% (-409%)` | `2% (ø)` | || [ernal/operators/maybe/maybetakeuntilpublisherjava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglsuhvibglzagvylmphdme) | `96% (-4%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9328% (-299%)` | `2% (ø)` | || [activex/internal/operators/single/singlecachejava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvdywnozs5qyxzh) | `9705% (-295%)` | `23% (-1%)` | || [ex/internal/operators/maybe/maybetimeoutmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgltzw91de1hewjllmphdme) | `9558% (-295%)` | `2% (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `9275% (-29%)` | `2% (ø)` | || and [35 more](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&elfooter) last update [db62772506d8ee](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5243.0,5307,1,0,0,1,0,0,1,0,2x: apply promotions for v21 this pr applies the promotions listed in #5243suggested review strategy:- check if the `@experimental` annotation has been removed or turned into `@beta`- check if the ` history: 20x` matches the original value of the updated `@since 20x` # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&elh1) report> merging [#5307](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/475c05844e065776a6f347555e0f11fc5e3de546?srcpr&eldesc) will **decrease** coverage by `006%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5307/graphs/treesvg?srcpr&tokenwtcc2htjm2&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree)```diff@@ coverage diff @@## 2x #5307 +/- ##- coverage 9609% 9602% -007% + complexity 5774 5768 -6 files 630 630 lines 41148 41146 -2 branches 5714 5714 - hits 39542 39512 -30 - misses 630 668 +38 + partials 976 966 -10```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [main/java/io/reactivex/subjects/singlesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvu2luz2xlu3viamvjdc5qyxzh) | `9523% (-239%)` | `38 (-1)` | || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `506 (ø)` | :arrow_down: || [/java/io/reactivex/subscribers/testsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3vic2nyawjlcnmvvgvzdfn1ynnjcmlizxiuamf2yq) | `9927% (ø)` | `57 (ø)` | :arrow_down: || [n/java/io/reactivex/parallel/parallelflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcgfyywxszwwvugfyywxszwxgbg93ywjszs5qyxzh) | `100% (ø)` | `49 (ø)` | :arrow_down: || [/main/java/io/reactivex/plugins/rxjavapluginsjava](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcgx1z2lucy9seephdmfqbhvnaw5zlmphdme) | `100% (ø)` | `146 (ø)` | :arrow_down: || [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `112 (ø)` | :arrow_down: || [activex/exceptions/protocolviolationexceptionjava](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzxhjzxb0aw9ucy9qcm90b2nvbfzpb2xhdglvbkv4y2vwdglvbi5qyxzh) | `100% (ø)` | `1 (ø)` | :arrow_down: || [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `168 (ø)` | :arrow_down: || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `9933% (ø)` | `132 (ø)` | :arrow_down: || [java/io/reactivex/subjects/completablesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvq29tcgxldgfibgvtdwjqzwn0lmphdme) | `948% (ø)` | `35 (ø)` | :arrow_down: || and [61 more](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&elfooter) last update [475c0583fe0d2b](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5201.0,5318,1,0,0,0,0,0,1,0,1x: apply api promotions for 13 this pr applies the api promotions of #5201note that `singleunsubscribeon` remainded experimental and `observablefromemitter` was removedwhere the experimental version was available it was moved up as ` history: 1xy - experimental` similar to how 2x versioning/promotions happensuggested review strategy:- verify `@experimental` and `@beta` annotations are removed from the method and from javadoc- verify `@since 13` is present # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5318?srcpr&elh1) report> merging [#5318](https://codecovio/gh/reactivex/rxjava/pull/5318?srcpr&eldesc) into [1x](https://codecovio/gh/reactivex/rxjava/commit/95afbd0f1cc194a6273515f9b81f2a78b885ba32?srcpr&eldesc) will **decrease** coverage by `008%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5318/graphs/treesvg?tokenwtcc2htjm2&width650&srcpr&height150)](https://codecovio/gh/reactivex/rxjava/pull/5318?srcpr&eltree)```diff@@ coverage diff @@## 1x #5318 +/- ##- coverage 8446% 8437% -009% + complexity 2887 2881 -6 files 290 290 lines 18125 18124 -1 branches 2479 2479 - hits 15309 15292 -17 - misses 1955 1966 +11 - partials 861 866 +5```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5318?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/rx/singlejava](https://codecovio/gh/reactivex/rxjava/pull/5318?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9taw5nbguuamf2yq) | `7396% (ø)` | `82 (ø)` | :arrow_down: || [src/main/java/rx/internal/util/blockingutilsjava](https://codecovio/gh/reactivex/rxjava/pull/5318?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc91dglsl0jsb2nraw5nvxrpbhmuamf2yq) | `90% (ø)` | `2 (ø)` | :arrow_down: || [src/main/java/rx/schedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5318?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9ty2hlzhvszxiuamf2yq) | `100% (ø)` | `3 (ø)` | :arrow_down: || [src/main/java/rx/plugins/rxjavaschedulershookjava](https://codecovio/gh/reactivex/rxjava/pull/5318?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9wbhvnaw5zl1j4smf2yvnjagvkdwxlcnnib29rlmphdme) | `100% (ø)` | `16 (ø)` | :arrow_down: || [src/main/java/rx/observables/synconsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/5318?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9vynnlcnzhymxlcy9tew5jt25tdwjzy3jpymuuamf2yq) | `9185% (ø)` | `8 (ø)` | :arrow_down: || [src/main/java/rx/backpressureoverflowjava](https://codecovio/gh/reactivex/rxjava/pull/5318?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9cywnrchjlc3n1cmvpdmvyzmxvdy5qyxzh) | `8666% (ø)` | `1 (ø)` | :arrow_down: || [src/main/java/rx/plugins/rxjavapluginsjava](https://codecovio/gh/reactivex/rxjava/pull/5318?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9wbhvnaw5zl1j4smf2yvbsdwdpbnmuamf2yq) | `7311% (ø)` | `28 (ø)` | :arrow_down: || [src/main/java/rx/plugins/rxjavaerrorhandlerjava](https://codecovio/gh/reactivex/rxjava/pull/5318?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9wbhvnaw5zl1j4smf2yuvycm9ysgfuzgxlci5qyxzh) | `70% (ø)` | `4 (ø)` | :arrow_down: || [x/internal/operators/onsubscribeflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5318?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt25tdwjzy3jpymvgbgf0twfwu2luz2xllmphdme) | `923% (ø)` | `4 (ø)` | :arrow_down: || [n/java/rx/observers/safecompletablesubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/5318?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9vynnlcnzlcnmvu2fmzunvbxbszxrhymxlu3vic2nyawjlci5qyxzh) | `100% (ø)` | `10 (ø)` | :arrow_down: || and [30 more](https://codecovio/gh/reactivex/rxjava/pull/5318?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5318?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5318?srcpr&elfooter) last update [95afbd0dd9b789](https://codecovio/gh/reactivex/rxjava/pull/5318?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5382.0,5409,1,0,0,0,0,0,1,0,#5382 corrected singledelay documentation corrected singledelay documentation that says that success or error signals will be delayed by the specified amount but in fact errors are not delayed only successes
5416.0,5419,1,0,0,0,0,1,1,0,2x: fix periodic scheduling with negative period causing iae this pr adds unit tests to verify the `schedulerscheduleperiodicallydirect` and `schedulerworkerscheduleperiodically` works with non-positive period as required by the javadoc the `computation` and `single` schedulers were not working properly and the underlying `scheduledexecutorservice` crashed with `illegalargumentexception` thus these are now fixed with custom handler for the `period < 0l` casesrelated: #5416
5426.0,5427,1,0,0,0,0,1,1,1,2x: fix buffer(time maxsize) duplicating buffers on time-size race the pr fixes both the time+maxsize bound `buffer` operators of `flowable` and `observable` the logic didnt properly mutually exclude the timer action and the `onnext` action resulting in probabilistic emission of the same buffer twicereported in #5426 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5427?srcpr&elh1) report> merging [#5427](https://codecovio/gh/reactivex/rxjava/pull/5427?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/73a85c15d35dc748ff41d4a5d37f33cd862ee67b?srcpr&eldesc) will **increase** coverage by `016%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5427/graphs/treesvg?width650&srcpr&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/5427?srcpr&eltree)```diff@@ coverage diff @@## 2x #5427 +/- ##+ coverage 9588% 9605% +016% - complexity 5789 5792 +3 files 631 631 lines 41297 41291 -6 branches 5742 5742 + hits 39599 39661 +62 + misses 679 633 -46 + partials 1019 997 -22```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5427?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [al/operators/observable/observablebuffertimedjava](https://codecovio/gh/reactivex/rxjava/pull/5427?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuj1zmzlclrpbwvklmphdme) | `9219% (+028%)` | `5 (ø)` | :arrow_down: || [ternal/operators/flowable/flowablebuffertimedjava](https://codecovio/gh/reactivex/rxjava/pull/5427?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqnvmzmvyvgltzwquamf2yq) | `9084% (-01%)` | `5 (ø)` | || [/internal/operators/maybe/maybetakeuntilmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5427?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglstwf5ymuuamf2yq) | `9387% (-613%)` | `2% (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/5427?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9166% (-556%)` | `9% (-1%)` | || [ternal/operators/completable/completableusingjava](https://codecovio/gh/reactivex/rxjava/pull/5427?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvxnpbmcuamf2yq) | `9523% (-477%)` | `4% (ø)` | || [ernal/operators/maybe/maybetakeuntilpublisherjava](https://codecovio/gh/reactivex/rxjava/pull/5427?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglsuhvibglzagvylmphdme) | `96% (-4%)` | `2% (ø)` | || [vex/internal/operators/flowable/flowabletimerjava](https://codecovio/gh/reactivex/rxjava/pull/5427?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzxiuamf2yq) | `9285% (-358%)` | `2% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5427?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `913% (-272%)` | `2% (ø)` | || [ava/io/reactivex/internal/util/halfserializerjava](https://codecovio/gh/reactivex/rxjava/pull/5427?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9iywxmu2vyawfsaxplci5qyxzh) | `975% (-25%)` | `22% (-1%)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5427?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9583% (-25%)` | `2% (ø)` | || and [37 more](https://codecovio/gh/reactivex/rxjava/pull/5427?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5427?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5427?srcpr&elfooter) last update [73a85c13634588](https://codecovio/gh/reactivex/rxjava/pull/5427?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
543.0,5440,1,0,0,0,0,1,1,1,2x: concat to report isdisposed consistently with termination this pr makes sure the `disposable` of a `concat` operator reports `true` when the sequence terminatesreported in #5439 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5440?srcpr&elh1) report> merging [#5440](https://codecovio/gh/reactivex/rxjava/pull/5440?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/14a83b391e5b6a437421deed38822954540afe7d?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5440/graphs/treesvg?width650&srcpr&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/5440?srcpr&eltree)```diff@@ coverage diff @@## 2x #5440 +/- ##- coverage 9596% 9593% -004% - complexity 5793 5794 +1 files 631 631 lines 41297 41302 +5 branches 5744 5744 - hits 39632 39622 -10 - misses 663 667 +4 - partials 1002 1013 +11```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5440?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rnal/operators/observable/observableconcatmapjava](https://codecovio/gh/reactivex/rxjava/pull/5440?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunvbmnhde1hcc5qyxzh) | `9752% (+005%)` | `5 (ø)` | :arrow_down: || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5440?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `7863% (-1881%)` | `2% (ø)` | || [/operators/completable/completableconcatarrayjava](https://codecovio/gh/reactivex/rxjava/pull/5440?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0qxjyyxkuamf2yq) | `9375% (-625%)` | `2% (ø)` | || [/internal/operators/observable/observablehidejava](https://codecovio/gh/reactivex/rxjava/pull/5440?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuhpzguuamf2yq) | `90% (-5%)` | `2% (ø)` | || [rnal/operators/flowable/flowableskiplasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/5440?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2tpcexhc3ruaw1lzc5qyxzh) | `9387% (-409%)` | `2% (ø)` | || [io/reactivex/internal/util/backpressurehelperjava](https://codecovio/gh/reactivex/rxjava/pull/5440?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9cywnrchjlc3n1cmvizwxwzxiuamf2yq) | `9591% (-409%)` | `21% (-1%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5440?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `96% (-4%)` | `33% (-2%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5440?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% (-393%)` | `2% (ø)` | || [vex/internal/operators/flowable/flowabletimerjava](https://codecovio/gh/reactivex/rxjava/pull/5440?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzxiuamf2yq) | `9285% (-358%)` | `2% (ø)` | || [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/pull/5440?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `9491% (-339%)` | `10% (-1%)` | || and [39 more](https://codecovio/gh/reactivex/rxjava/pull/5440?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5440?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5440?srcpr&elfooter) last update [14a83b3af45f4e](https://codecovio/gh/reactivex/rxjava/pull/5440?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5442.0,5447,1,0,1,0,0,0,1,0,"remove @nonnull annotation in consumer method parameter this fixes #5442 this should be safe to merge see the discussion in #5216 || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5447?srcpr&elh1) report> merging [#5447](https://codecovio/gh/reactivex/rxjava/pull/5447?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/3656b9bcc380f425d46e6f41829c065b8741faae?srcpr&eldesc) will **decrease** coverage by `008%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5447/graphs/treesvg?srcpr&tokenwtcc2htjm2&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/5447?srcpr&eltree)```diff@@ coverage diff @@## 2x #5447 +/- ##- coverage 9607% 9599% -009% + complexity 5798 5792 -6 files 631 631 lines 41297 41297 branches 5744 5744 - hits 39675 39641 -34 - misses 637 648 +11 - partials 985 1008 +23```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5447?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5447?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% (-1112%)` | `2% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5447?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `8888% (-1112%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5447?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-598%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5447?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9033% (-58%)` | `2% (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/5447?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9166% (-556%)` | `9% (-1%)` | || [al/operators/observable/observablesampletimedjava](https://codecovio/gh/reactivex/rxjava/pull/5447?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnhbxbszvrpbwvklmphdme) | `9166% (-5%)` | `3% (ø)` | || [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/pull/5447?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `9491% (-339%)` | `10% (-1%)` | || [ternal/operators/completable/completablecachejava](https://codecovio/gh/reactivex/rxjava/pull/5447?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq2fjaguuamf2yq) | `9696% (-304%)` | `23% (-1%)` | || [ex/internal/operators/maybe/maybetimeoutmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5447?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgltzw91de1hewjllmphdme) | `9411% (-295%)` | `2% (ø)` | || [main/java/io/reactivex/subjects/singlesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5447?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvu2luz2xlu3viamvjdc5qyxzh) | `9523% (-239%)` | `38% (-1%)` | || and [39 more](https://codecovio/gh/reactivex/rxjava/pull/5447?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5447?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5447?srcpr&elfooter) last update [3656b9bf7394e8](https://codecovio/gh/reactivex/rxjava/pull/5447?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || im curious why did the code coverage decrease because of this? || there are unit tests that race for a certain code path inside the operators travis-ci lately has become 2-3x slower and often these code paths are no longer exercised it is sometimes +/- 02% if there is a generic drop unrelated to your changes there is nothing to worry about || looks like this nullability thing is hitting many kotlin users now (see #5448) what do you think about removing all nullability annotations from the functional types in an additional pr? || > what do you think about removing all nullability annotations from the functional types@akarnokd to add my two cents ) i think this is a good idea there is nothing wrong with nullability annotations as long as the code adheres to this contract - meaning `null` should never be passed where `@nonnull` is declared || java 6 doesnt enforce this and only java 8+ allows annotating the type arguments themselves:```javapublic observable doonnext(consumer onnext)public completable doonevent(consumer onevent)``` || @akarnokd id be happy to add a pr for removing them if you wishshould all annotations in the `ioreactivexfunctions` package be removed then? || looks like `function` is the next to be adjusted: #5448 indicates its return type may be null with `groupby` id delay removing all annotations in case kotlin comes to senses because i doubt rxjava is the only library that has inconsistent nullability annotation usage || > looks like function is the next to be adjusted: #5448 indicates its return type may be null with groupby id delay removing all annotations in case kotlin comes to senses because i doubt rxjava is the only library that has inconsistent nullability annotation usage@akarnokd what do you mean by ""kotlin comes to senses""? this is by language design and i doubt it will change i dont understand why we have to discuss this and why its not clear that as a library developer you should not put `null` into an argument that is annotated by `@nonnull` as i said before this is not a kotlin-only problem and certainly will affect java developers too as here clearly the contract is broken || rxjava is a java 6 library and thus we are bound by the capabilities of java language level 6 we are also trying to be nice with other languages but that has limits the best we can do is to remove nullability annotations from controversial functional types that come upwhat i mean by ""senses"" is it would be kotlins responsibility to work with native java libraries and provide workaround since javas type system doesnt have a primary notion of nullability i just leave off/replace the annotations to satisfy some static analysis tools if necessary the fact that just by upgrading to 113 compatiblity broke indicates there has to be work done on kotlins part || im aware that java 6 cannot check nullability constraints during compile time however this is not a language issue ides like intellij idea will analyze these annotations and give hints so as a developer you might think that the argument can never be `null` but in fact it can so what is the point of this annotation then? || see #5151 if we could support callsite nullability wed do it but we cant so either annotate for the majority uses or not annotate at all through the common functional interfaces adding/removing annotations is considered binary compatible thus any other means such as alternate interfaces has to be added and accompanied by new methods which also need to be named differently to avoid lambda ambiguity> ides like intellij idea will analyze these annotations and give hintsthe keyword is ""hints"" the annotations were mostly working for java/android but kotlin no longer considers them as hints if there was a ""i take my chances"" type/hint or you could disable the rxjava annotations being considered that would make things simpler || if theyre just hints id prefer them entirely removed they should eitherbe 100% accurate or entirely absent we have java tools which take theseannotations as being 100% accurate and having anything less than that inactuality will cause bugson tue jun 27 2017 9:52 am david karnok wrote:> see #5151 if we could> support callsite nullability wed do it but we cant so either annotate> for the majority uses or not annotate at all through the common functional> interfaces adding/removing annotations is considered binary compatible> thus any other means such as alternate interfaces has to be added and> accompanied by new methods which also need to be named differently to avoid> lambda ambiguity>> ides like intellij idea will analyze these annotations and give hints>> the keyword is ""hints"" the annotations were mostly working for> java/android but kotlin no longer considers them as hints if there was a> ""i take my chances"" type/hint or you could disable the rxjava annotations> being considered that would make things simpler>> —> you are receiving this because you are subscribed to this thread> reply to this email directly view it on github> > or mute the thread> > > || afaik the problem with the non-annotated interfaces was that intellij/kotlin inferred all of them as nullable t and caused inconveniences || non-annotated types will be inferred as a ""platform type"" which hasambiguous nullability this allows the user to specify it as nullable ornon-nullable (with a runtime check in the latter case) based on what theyknow of the data and operatoron tue jun 27 2017 10:32 am david karnok wrote:> afaik the problem with the non-annotated interfaces was that> intellij/kotlin inferred all of them as nullable t and caused> inconveniences>> —> you are receiving this because you commented>>> reply to this email directly view it on github> > or mute the thread> > > || so far these were the cases that require the removal of annotations:1) `consumer` may be called with null (ie`doonevent`)2) `biconsumer` may be called with null (ie `subscribe`)3) `function` may return null in `groupby`s key selectorthe other functional types are never called with null and are not allowed to return null option 3 has no pr yet || @akarnokd i added a pr for 3 in #5449 || thanks @ansman ! || > the fact that just by upgrading to 113 compatiblity broke indicates there has to be work done on kotlins partit just indicates that there were ""holes"" in the type system which have been fixed ) anyway thanks to everybody that this issue has been resolved! ||"
544.0,5449,1,0,0,0,0,0,1,0,remove the @nonnull annotation from function as per per the discussion in #5447 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5449?srcpr&elh1) report> merging [#5449](https://codecovio/gh/reactivex/rxjava/pull/5449?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/31b41f8d4b0d0534a883a71491ad39f326ebff36?srcpr&eldesc) will **increase** coverage by `007%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5449/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5449?srcpr&eltree)```diff@@ coverage diff @@## 2x #5449 +/- ##+ coverage 9592% 96% +007% + complexity 5797 5795 -2 files 631 631 lines 41306 41306 branches 5745 5745 + hits 39624 39656 +32 + misses 664 640 -24 + partials 1018 1010 -8```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5449?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ternal/operators/flowable/flowablesubscribeonjava](https://codecovio/gh/reactivex/rxjava/pull/5449?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3vic2nyawjlt24uamf2yq) | `9152% (-678%)` | `2% (ø)` | || [/internal/operators/maybe/maybetakeuntilmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5449?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglstwf5ymuuamf2yq) | `9387% (-409%)` | `2% (ø)` | || [ernal/operators/maybe/maybetakeuntilpublisherjava](https://codecovio/gh/reactivex/rxjava/pull/5449?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglsuhvibglzagvylmphdme) | `96% (-4%)` | `2% (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/5449?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `913% (-363%)` | `2% (ø)` | || [vex/internal/operators/flowable/flowabletimerjava](https://codecovio/gh/reactivex/rxjava/pull/5449?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzxiuamf2yq) | `9285% (-358%)` | `2% (ø)` | || [activex/internal/operators/single/singlecachejava](https://codecovio/gh/reactivex/rxjava/pull/5449?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvdywnozs5qyxzh) | `9705% (-295%)` | `23% (-1%)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5449?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `6153% (-257%)` | `12% (-1%)` | || [main/java/io/reactivex/subjects/singlesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5449?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvu2luz2xlu3viamvjdc5qyxzh) | `9523% (-239%)` | `38% (-1%)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5449?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [activex/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5449?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9fegvjdxrvclnjagvkdwxlci5qyxzh) | `9459% (-203%)` | `9% (ø)` | || and [40 more](https://codecovio/gh/reactivex/rxjava/pull/5449?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5449?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5449?srcpr&elfooter) last update [31b41f8c91fea6](https://codecovio/gh/reactivex/rxjava/pull/5449?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5461.0,5466,1,0,0,0,0,0,1,0,2x: flowabletimeouttimed - replace atomicreference with mutable field as per discussion in #5461 the timer fields in the subscriber classes in [flowabletimeouttimed](https://githubcom/reactivex/rxjava/blob/4c22f969927a98bc35458645d373bcb94b7df622/src/main/java/io/reactivex/internal/operators/flowable/flowabletimeouttimedjava) are `atomicreference`s but this is not required as the fields are accessed synchronouslythe `timer` field in `timeouttimedothersubscriber` did require an `atomicreference` because of the dispose call [here](https://githubcom/reactivex/rxjava/blob/4c22f969927a98bc35458645d373bcb94b7df622/src/main/java/io/reactivex/internal/operators/flowable/flowabletimeouttimedjava#l173) but this call is not required if we just call `workerdispose()`no unit test additionsps 9321 unit tests in rxjava 2x! an outrageous amount of work thanks @akarnokd (and other contributors)! # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5466?srcpr&elh1) report> merging [#5466](https://codecovio/gh/reactivex/rxjava/pull/5466?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/08be74178a5725dc977b796384383ee38ae134d5?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5466/graphs/treesvg?srcpr&width650&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/5466?srcpr&eltree)```diff@@ coverage diff @@## 2x #5466 +/- ##- coverage 9594% 9591% -004% - complexity 5797 5801 +4 files 631 631 lines 41306 41297 -9 branches 5745 5743 -2 - hits 39633 39610 -23 - misses 656 669 +13 - partials 1017 1018 +1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5466?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ernal/operators/flowable/flowabletimeouttimedjava](https://codecovio/gh/reactivex/rxjava/pull/5466?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzw91dfrpbwvklmphdme) | `9322% (+109%)` | `4 (ø)` | :arrow_down: || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5466?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `923% (-599%)` | `2% (ø)` | || [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/pull/5466?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `8688% (-492%)` | `2% (ø)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5466?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9384% (-462%)` | `27% (-1%)` | || [ternal/operators/flowable/flowablesampletimedjava](https://codecovio/gh/reactivex/rxjava/pull/5466?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2ftcgxlvgltzwquamf2yq) | `9117% (-442%)` | `3% (ø)` | || [ernal/operators/maybe/maybetakeuntilpublisherjava](https://codecovio/gh/reactivex/rxjava/pull/5466?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglsuhvibglzagvylmphdme) | `96% (-4%)` | `2% (ø)` | || [internal/disposables/arraycompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5466?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvqxjyyxldb21wb3npdgveaxnwb3nhymxllmphdme) | `9642% (-358%)` | `15% (-1%)` | || [ex/internal/subscriptions/subscriptionarbiterjava](https://codecovio/gh/reactivex/rxjava/pull/5466?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9tdwjzy3jpchrpb25bcmjpdgvylmphdme) | `9576% (-339%)` | `45% (-2%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5466?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `913% (-327%)` | `2% (ø)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5466?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8281% (-313%)` | `56% (-1%)` | || and [42 more](https://codecovio/gh/reactivex/rxjava/pull/5466?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5466?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5466?srcpr&elfooter) last update [08be7412976482](https://codecovio/gh/reactivex/rxjava/pull/5466?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5480.0,5486,1,0,0,0,0,1,1,0,2x: small note on maybedefaultifempty regarding tosingle ths pr replaces #5485 regarding the issue of #5480 because our javadoc validation did not allow that type of wording (ie mentioning `single` when the method signature is not related to it) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&elh1) report> merging [#5486](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/46ec6a6365ded7f9d96674baf40f7342d76ebdda?srcpr&eldesc) will **increase** coverage by `007%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5486/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree)```diff@@ coverage diff @@## 2x #5486 +/- ##+ coverage 9601% 9608% +007% + complexity 5803 5799 -4 files 631 631 lines 41297 41297 branches 5743 5743 + hits 39650 39682 +32 + misses 655 634 -21 + partials 992 981 -11```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `168 (ø)` | :arrow_down: || [tivex/internal/schedulers/instantperiodictaskjava](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jbnn0yw50ugvyaw9kawnuyxnrlmphdme) | `6111% (-556%)` | `7% (-2%)` | || [/io/reactivex/internal/functions/objecthelperjava](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl09iamvjdehlbhblci5qyxzh) | `9473% (-527%)` | `20% (-1%)` | || [rnal/operators/completable/completabletimeoutjava](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvgltzw91dc5qyxzh) | `94% (-4%)` | `2% (ø)` | || [ernal/operators/maybe/maybetakeuntilpublisherjava](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglsuhvibglzagvylmphdme) | `96% (-4%)` | `2% (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9117% (-393%)` | `2% (ø)` | || [ternal/operators/completable/completablecachejava](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq2fjaguuamf2yq) | `9696% (-304%)` | `23% (-1%)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `924% (-254%)` | `6% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9456% (-218%)` | `2% (ø)` | || [rnal/operators/observable/observableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu9ic2vydmvpbi5qyxzh) | `9795% (-205%)` | `3% (ø)` | || and [40 more](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&elfooter) last update [46ec6a6f7c80e7](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5485.0,5486,1,0,0,0,0,1,1,0,2x: small note on maybedefaultifempty regarding tosingle ths pr replaces #5485 regarding the issue of #5480 because our javadoc validation did not allow that type of wording (ie mentioning `single` when the method signature is not related to it) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&elh1) report> merging [#5486](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/46ec6a6365ded7f9d96674baf40f7342d76ebdda?srcpr&eldesc) will **increase** coverage by `007%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5486/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree)```diff@@ coverage diff @@## 2x #5486 +/- ##+ coverage 9601% 9608% +007% + complexity 5803 5799 -4 files 631 631 lines 41297 41297 branches 5743 5743 + hits 39650 39682 +32 + misses 655 634 -21 + partials 992 981 -11```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `168 (ø)` | :arrow_down: || [tivex/internal/schedulers/instantperiodictaskjava](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jbnn0yw50ugvyaw9kawnuyxnrlmphdme) | `6111% (-556%)` | `7% (-2%)` | || [/io/reactivex/internal/functions/objecthelperjava](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl09iamvjdehlbhblci5qyxzh) | `9473% (-527%)` | `20% (-1%)` | || [rnal/operators/completable/completabletimeoutjava](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvgltzw91dc5qyxzh) | `94% (-4%)` | `2% (ø)` | || [ernal/operators/maybe/maybetakeuntilpublisherjava](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglsuhvibglzagvylmphdme) | `96% (-4%)` | `2% (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9117% (-393%)` | `2% (ø)` | || [ternal/operators/completable/completablecachejava](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq2fjaguuamf2yq) | `9696% (-304%)` | `23% (-1%)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `924% (-254%)` | `6% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9456% (-218%)` | `2% (ø)` | || [rnal/operators/observable/observableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu9ic2vydmvpbi5qyxzh) | `9795% (-205%)` | `3% (ø)` | || and [40 more](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&elfooter) last update [46ec6a6f7c80e7](https://codecovio/gh/reactivex/rxjava/pull/5486?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
3794.0,5507,1,0,0,1,0,1,1,1,2x: fix spsclaq nepotism flowablerefcounttesttestrefcountasync flaky this pr fixes the so-called gc nepotism (see #3794) in `spsclinkedarrayqueue` by not nulling out the previous buffers next pointer upon switching buffers in the `peek()`/`poll()` methodsin addition the flowablerefcounttesttestrefcountasync has been reworked to be more forgiving towards unexpected delays due to system load (reported in #5506) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&elh1) report> merging [#5507](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/09df08a93165895fb23fea2a39aeb8e00dfb1e3c?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5507/graphs/treesvg?srcpr&width650&height150&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree)```diff@@ coverage diff @@## 2x #5507 +/- ##- coverage 9604% 9602% -003% + complexity 5808 5797 -11 files 631 631 lines 41282 41285 +3 branches 5732 5732 - hits 39651 39645 -6 + misses 649 647 -2 - partials 982 993 +11```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [reactivex/internal/queue/spsclinkedarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0xpbmtlzefycmf5uxvldwuuamf2yq) | `9682% (-074%)` | `38 (-1)` | || [tivex/internal/schedulers/instantperiodictaskjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jbnn0yw50ugvyaw9kawnuyxnrlmphdme) | `6111% (-556%)` | `7% (-2%)` | || [ternal/operators/flowable/flowablesampletimedjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2ftcgxlvgltzwquamf2yq) | `9117% (-442%)` | `3% (ø)` | || [activex/internal/operators/single/singlecachejava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvdywnozs5qyxzh) | `9705% (-295%)` | `23% (-1%)` | || [rnal/operators/flowable/flowabletakelasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgfrzuxhc3ruaw1lzc5qyxzh) | `9629% (-278%)` | `2% (ø)` | || [java/io/reactivex/subjects/completablesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvq29tcgxldgfibgvtdwjqzwn0lmphdme) | `948% (-26%)` | `35% (-1%)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `6153% (-257%)` | `12% (-1%)` | || [main/java/io/reactivex/subjects/singlesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvu2luz2xlu3viamvjdc5qyxzh) | `9761% (-239%)` | `39% (-1%)` | || [/main/java/io/reactivex/subjects/maybesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvtwf5ymvtdwjqzwn0lmphdme) | `9565% (-218%)` | `46% (-1%)` | || [activex/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9fegvjdxrvclnjagvkdwxlci5qyxzh) | `9459% (-203%)` | `9% (ø)` | || and [41 more](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&elfooter) last update [09df08a59568ac](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5506.0,5507,1,0,0,1,0,1,1,1,2x: fix spsclaq nepotism flowablerefcounttesttestrefcountasync flaky this pr fixes the so-called gc nepotism (see #3794) in `spsclinkedarrayqueue` by not nulling out the previous buffers next pointer upon switching buffers in the `peek()`/`poll()` methodsin addition the flowablerefcounttesttestrefcountasync has been reworked to be more forgiving towards unexpected delays due to system load (reported in #5506) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&elh1) report> merging [#5507](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/09df08a93165895fb23fea2a39aeb8e00dfb1e3c?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5507/graphs/treesvg?srcpr&width650&height150&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree)```diff@@ coverage diff @@## 2x #5507 +/- ##- coverage 9604% 9602% -003% + complexity 5808 5797 -11 files 631 631 lines 41282 41285 +3 branches 5732 5732 - hits 39651 39645 -6 + misses 649 647 -2 - partials 982 993 +11```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [reactivex/internal/queue/spsclinkedarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0xpbmtlzefycmf5uxvldwuuamf2yq) | `9682% (-074%)` | `38 (-1)` | || [tivex/internal/schedulers/instantperiodictaskjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jbnn0yw50ugvyaw9kawnuyxnrlmphdme) | `6111% (-556%)` | `7% (-2%)` | || [ternal/operators/flowable/flowablesampletimedjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2ftcgxlvgltzwquamf2yq) | `9117% (-442%)` | `3% (ø)` | || [activex/internal/operators/single/singlecachejava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvdywnozs5qyxzh) | `9705% (-295%)` | `23% (-1%)` | || [rnal/operators/flowable/flowabletakelasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgfrzuxhc3ruaw1lzc5qyxzh) | `9629% (-278%)` | `2% (ø)` | || [java/io/reactivex/subjects/completablesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvq29tcgxldgfibgvtdwjqzwn0lmphdme) | `948% (-26%)` | `35% (-1%)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `6153% (-257%)` | `12% (-1%)` | || [main/java/io/reactivex/subjects/singlesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvu2luz2xlu3viamvjdc5qyxzh) | `9761% (-239%)` | `39% (-1%)` | || [/main/java/io/reactivex/subjects/maybesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvtwf5ymvtdwjqzwn0lmphdme) | `9565% (-218%)` | `46% (-1%)` | || [activex/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9fegvjdxrvclnjagvkdwxlci5qyxzh) | `9459% (-203%)` | `9% (ø)` | || and [41 more](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&elfooter) last update [09df08a59568ac](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5319.0,5524,1,0,0,0,0,0,1,0,2x: add/update observable marbles (07/30) this pr updates the marbles of the following `observable` operators:- `just` ([image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/justitempng)) by @leonardortlima - `rangelong` ([image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/rangelongpng)) by @leonardortlima - `startwith` ([image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/startwithitempng)) by @leonardortlima - `startwitharray` ([image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/startwitharraypng)) by @leonardortlima - `sorted` ([image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/sortedpng)) by @leonardortlima see #5319 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5524?srcpr&elh1) report> merging [#5524](https://codecovio/gh/reactivex/rxjava/pull/5524?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/e92822cd4e35f481e506ce7765d2eba67ed075e3?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5524/graphs/treesvg?height150&width650&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5524?srcpr&eltree)```diff@@ coverage diff @@## 2x #5524 +/- ##+ coverage 9611% 9612% +001% complexity 5804 5804 files 631 631 lines 41285 41285 branches 5732 5732 + hits 39680 39686 +6 + misses 636 627 -9 - partials 969 972 +3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5524?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5524?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `506 (ø)` | :arrow_down: || [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/pull/5524?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `8688% (-492%)` | `2% (ø)` | || [erators/completable/completableconcatiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5524?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0sxrlcmfibguuamf2yq) | `9591% (-409%)` | `2% (ø)` | || [io/reactivex/internal/util/backpressurehelperjava](https://codecovio/gh/reactivex/rxjava/pull/5524?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9cywnrchjlc3n1cmvizwxwzxiuamf2yq) | `9591% (-409%)` | `21% (-1%)` | || [reactivex/internal/operators/maybe/maybeusingjava](https://codecovio/gh/reactivex/rxjava/pull/5524?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvxnpbmcuamf2yq) | `9595% (-405%)` | `4% (ø)` | || [rnal/operators/completable/completabletimeoutjava](https://codecovio/gh/reactivex/rxjava/pull/5524?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvgltzw91dc5qyxzh) | `94% (-4%)` | `2% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5524?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9401% (-342%)` | `2% (ø)` | || [ternal/operators/completable/completablecachejava](https://codecovio/gh/reactivex/rxjava/pull/5524?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq2fjaguuamf2yq) | `9696% (-304%)` | `23% (-1%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5524?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-299%)` | `2% (ø)` | || [activex/internal/operators/single/singlecachejava](https://codecovio/gh/reactivex/rxjava/pull/5524?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvdywnozs5qyxzh) | `9705% (-295%)` | `23% (-1%)` | || and [36 more](https://codecovio/gh/reactivex/rxjava/pull/5524?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5524?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5524?srcpr&elfooter) last update [e92822ccbfe2b0](https://codecovio/gh/reactivex/rxjava/pull/5524?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5558.0,5560,1,0,0,0,0,0,1,0,2x: fix obscombinelatestdelayerror sync initial error not emitting this pr fixes the case reported in #5558 where a synchronous first non-empty source triggered an error completion immediately instead of giving a chance to the other sources to form combinationsthe fix also includes:- initialization of the `combineobserver`s now happen in the constructor- the `atomicreference ` of the inner observers are now inlined into `combineobserver`- cleaned up drain logic- unit tests verifying `flowablecombinelatest` (no changes required there) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&elh1) report> merging [#5560](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/357fac2ebe43029282ff356fa2dfb72b51982104?srcpr&eldesc) will **decrease** coverage by `016%`> the diff coverage is `935%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5560/graphs/treesvg?srcpr&tokenwtcc2htjm2&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree)```diff@@ coverage diff @@## 2x #5560 +/- ##- coverage 9632% 9615% -017% + complexity 5830 5820 -10 files 631 631 lines 41414 41417 +3 branches 5740 5739 -1 - hits 39890 39823 -67 - misses 596 635 +39 - partials 928 959 +31```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/operators/observable/observablecombinelatestjava](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunvbwjpbmvmyxrlc3quamf2yq) | `9693% (-182%)` | `6 (ø)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8697% (-573%)` | `57% (ø)` | || [tivex/internal/schedulers/instantperiodictaskjava](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jbnn0yw50ugvyaw9kawnuyxnrlmphdme) | `6111% (-556%)` | `7% (-2%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% (-523%)` | `2% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `8849% (-487%)` | `62% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% (-381%)` | `2% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `6153% (-257%)` | `12% (-1%)` | || [rnal/operators/observable/observableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu9ic2vydmvpbi5qyxzh) | `9795% (-205%)` | `3% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [a/io/reactivex/internal/queue/mpsclinkedqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvtxbzy0xpbmtlzff1zxvllmphdme) | `9803% (-197%)` | `17% (-1%)` | || and [19 more](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&elfooter) last update [357fac2fd46144](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5555.0,5568,1,0,0,0,0,1,1,1,2x: add assertvaluesonly to basetestconsumer adds `assertvaluesonly` that asserts that the testobserver/testsubscriber received only the specified values in the specified order without terminatingfixes #5555 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5568?srcpr&elh1) report> merging [#5568](https://codecovio/gh/reactivex/rxjava/pull/5568?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/ea7ca2c81573c56274163ad3e51d8cc07573e170?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5568/graphs/treesvg?height150&width650&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5568?srcpr&eltree)```diff@@ coverage diff @@## 2x #5568 +/- ##- coverage 9623% 962% -004% - complexity 5819 5824 +5 files 631 631 lines 41417 41421 +4 branches 5739 5739 - hits 39859 39849 -10 - misses 618 623 +5 - partials 940 949 +9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5568?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/java/io/reactivex/observers/basetestconsumerjava](https://codecovio/gh/reactivex/rxjava/pull/5568?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvb2jzzxj2zxjzl0jhc2vuzxn0q29uc3vtzxiuamf2yq) | `9965% (ø)` | `113 (+1)` | :arrow_up: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5568?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9029% (-523%)` | `2% (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/5568?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9117% (-393%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5568?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `942% (-29%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5568?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8954% (-197%)` | `2% (ø)` | || [ternal/operators/flowable/flowablesubscribeonjava](https://codecovio/gh/reactivex/rxjava/pull/5568?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3vic2nyawjlt24uamf2yq) | `9661% (-17%)` | `2% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5568?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `5886% (-142%)` | `31% (-1%)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5568?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9743% (-086%)` | `2% (ø)` | || [/operators/observable/observablesequenceequaljava](https://codecovio/gh/reactivex/rxjava/pull/5568?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnlcxvlbmnlrxf1ywwuamf2yq) | `9831% (-085%)` | `2% (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/5568?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `9492% (-073%)` | `2% (ø)` | || and [16 more](https://codecovio/gh/reactivex/rxjava/pull/5568?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5568?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5568?srcpr&elfooter) last update [ea7ca2cdc261cd](https://codecovio/gh/reactivex/rxjava/pull/5568?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
4544.0,5582,1,0,0,0,0,0,1,0,implement maybeswitchifempty(single) adds `maybeswitchifempty(single)` fixes #4544 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&elh1) report> merging [#5582](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/14bebc511b242d38f1956544a86265a6f48e489d?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `9736%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5582/graphs/treesvg?srcpr&width650&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree)```diff@@ coverage diff @@## 2x #5582 +/- ##- coverage 9615% 9613% -003% - complexity 5821 5825 +4 files 631 632 +1 lines 41421 41459 +38 branches 5739 5742 +3 + hits 39830 39858 +28 - misses 630 645 +15 + partials 961 956 -5```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `169 (+1)` | :arrow_up: || [rnal/operators/maybe/maybeswitchifemptysinglejava](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlu3dpdgnoswzfbxb0evnpbmdszs5qyxzh) | `9722% (ø)` | `2 (?)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `7948% (-1881%)` | `2% (ø)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8697% (-573%)` | `57% (ø)` | || [/io/reactivex/internal/functions/objecthelperjava](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl09iamvjdehlbhblci5qyxzh) | `9473% (-527%)` | `20% (-1%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9347% (-327%)` | `2% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `5886% (-284%)` | `31% (-2%)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `923% (-257%)` | `6% (ø)` | || [a/io/reactivex/internal/queue/mpsclinkedqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvtxbzy0xpbmtlzff1zxvllmphdme) | `9803% (-197%)` | `17% (-1%)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9846% (-154%)` | `28% (-1%)` | || and [27 more](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&elfooter) last update [14bebc54dadbb9](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || im only 50% convinced for the need of this overload || /cc @vanniktech @artem-zinnatullin ||
5569.0,5590,1,0,0,0,0,1,1,0,implement lambdaconsumerintrospection followup from #5569 and allows you to introspect if the resulting observer has missing error consumption and subsequently supplies a default (throwing) one wasnt sure how youd want to do the naming can work on adding some tests if this looks good wanted to get something up for api review early || the naming is fine with me || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5590?srcpr&elh1) report> merging [#5590](https://codecovio/gh/reactivex/rxjava/pull/5590?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/c43229b6793a698c03293cd35b7c8516029ef02b?srcpr&eldesc) will **increase** coverage by `008%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5590/graphs/treesvg?height150&width650&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5590?srcpr&eltree)```diff@@ coverage diff @@## 2x #5590 +/- ##+ coverage 9615% 9623% +008% - complexity 5827 5836 +9 files 632 632 lines 41459 41465 +6 branches 5742 5742 + hits 39863 39904 +41 + misses 638 621 -17 + partials 958 940 -18```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5590?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nternal/observers/callbackcompletableobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5590?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0nhbgxiywnrq29tcgxldgfibgvpynnlcnzlci5qyxzh) | `100% (ø)` | `11 (+2)` | :arrow_up: || [o/reactivex/internal/observers/lambdaobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5590?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0xhbwjkyu9ic2vydmvylmphdme) | `100% (ø)` | `14 (+2)` | :arrow_up: || [nternal/operators/maybe/maybecallbackobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5590?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlq2fsbgjhy2tpynnlcnzlci5qyxzh) | `100% (ø)` | `9 (+2)` | :arrow_up: || [vex/internal/observers/consumersingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5590?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0nvbnn1bwvyu2luz2xlt2jzzxj2zxiuamf2yq) | `100% (ø)` | `9 (+2)` | :arrow_up: || [x/internal/observers/emptycompletableobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5590?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0vtchr5q29tcgxldgfibgvpynnlcnzlci5qyxzh) | `100% (ø)` | `8 (+1)` | :arrow_up: || [activex/internal/subscribers/lambdasubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/5590?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyawjlcnmvtgftymrhu3vic2nyawjlci5qyxzh) | `100% (ø)` | `16 (+2)` | :arrow_up: || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5590?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `5886% (-426%)` | `31% (-3%)` | || [/internal/operators/flowable/flowableintervaljava](https://codecovio/gh/reactivex/rxjava/pull/5590?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlsw50zxj2ywwuamf2yq) | `9444% (-278%)` | `3% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5590?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `6153% (-257%)` | `12% (-1%)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5590?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9724% (-184%)` | `39% (-1%)` | || and [27 more](https://codecovio/gh/reactivex/rxjava/pull/5590?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5590?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5590?srcpr&elfooter) last update [c43229b500df33](https://codecovio/gh/reactivex/rxjava/pull/5590?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || should i add this to other types observers too? or do you want to start with this first? || > should i add this to other types observers too?that would be great! || btw @hzsweers you can solve this right now by overriding (via reflection) `ioreactivexinternalfunctionsfunctions#on_error_missing` with `consumer ` implementation thatll throw error instead of delivering it to the `rxjavaplugins`although current wip looks fine for the most part 👍 || yeah id prefer something in the public api :)@akarnokd should there be a separate `hasdefaulterrorconsumer` for lambdasubscriber for symmetry? or just reuse? || just reused for now let me know if you want me to make it separatei think ive covered the other observer possibilities let me know if theres any others i should cover || i agree the names could be better will update tomorrow || ok ive updated the tests and the naming based on cr the only remaining bit i think is whether or not to use a global introspection interface or make one per observer for better parity thoughts? || >use a global introspection interface or make one per observer for better parity thoughts?depends on which level of `per observer` youre talking about hopefully not about all internal implementations :)id create an interface per rx-type so you could hook into these `rxjavaplugins` callbacks: ie: `maybeobserverintrospection` `flowablesubscriberintrospection` `singleobserverintrospection` `observableobserverintrospection` `completableobserverintrospection`because if well decide to add introspection api for other callbacks like `onnext` and `oncomplete` in future some of them will not make sense for types like `completable` and `single` and naming wont match their callbacks if we go with same interface for all types`lambdaconsumerintrospection` seems too impl-specific name i realise that the only way rxjava can understand that ie error handler is default one is to rely on `subscribe()` calls that accept lambdas but name still feels kinda wrong and too specific just my 2 satoshis || yeah i meant per-type i think the name is fine as a specific thing since its only applicable to composed observers like lambdaobserver `lambda` itself might not be best since that naming convention seems to only exist for `observable` and `flowable` || i think there is no need to have 5 versions of the same interface there is always the subscriber/observer type discoverable:```javapublic static void errornotimplemented(object target) { if (target instanceof lambdaconsumerintrospection) { if (target instanceof singleobserver) { // } if (target instanceof subscriber) { // } }} || that works for me i think this pr is complete then || @akarnokd questionable decision about types `single` and `completable` might be inconsistent with future addition of `hasdefaultonnext()` and `hasdefaultoncomplete()` changes in the interfaceup2u of course || if you want to hijack those consumer types you already know the target type and which signal types it can deliver therefore if they implement the same broad interface the impossible methods can return false or throw an `unsupportedoperationexception` ||
5595.0,5600,1,0,0,0,0,0,1,0,updating javadoc with correct return types a small pr with updated javadoc mentioned in the issue #5595 (thanks to @roblewis for reporting it)updated documentation about return types where `observable` was incorrectly mentioned instead of `single` the `flowable` variants [are okay](http://reactivexio/rxjava/2x/javadoc/io/reactivex/flowablehtml#isempty--) || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5600?srcpr&elh1) report> merging [#5600](https://codecovio/gh/reactivex/rxjava/pull/5600?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/99a620a38c38e5010dc5bcc338a13555b3ccb727?srcpr&eldesc) will **decrease** coverage by `005%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5600/graphs/treesvg?tokenwtcc2htjm2&width650&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5600?srcpr&eltree)```diff@@ coverage diff @@## 2x #5600 +/- ##- coverage 962% 9615% -006% - complexity 5838 5840 +2 files 632 632 lines 41473 41473 branches 5745 5745 - hits 39898 39877 -21 - misses 632 637 +5 - partials 943 959 +16```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5600?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5600?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `506 (ø)` | :arrow_down: || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5600?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `8888% (-677%)` | `2% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5600?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `6028% (-426%)` | `32% (-3%)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5600?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/pull/5600?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `918% (-328%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5600?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9328% (-299%)` | `2% (ø)` | || [rnal/operators/observable/observableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/5600?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu9ic2vydmvpbi5qyxzh) | `9795% (-205%)` | `3% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/5600?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/5600?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-12%)` | `2% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5600?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% (-107%)` | `5% (ø)` | || and [22 more](https://codecovio/gh/reactivex/rxjava/pull/5600?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5600?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5600?srcpr&elfooter) last update [99a620a97ad2a2](https://codecovio/gh/reactivex/rxjava/pull/5600?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5608.0,5609,1,0,0,1,0,1,1,0,2x: fix observableconcatmapeager queueing of source items this pr fixes the wrong queue type in `observableconcatmapeager` to be the `spsclinkedarrayqueue` instead of the `spscarrayqueue` (the latter basically ignored items from the main source when it got full - a remt from its bounded `flowable` cousin) unit tests added that ensure both `flowable` and `observable` variants work properlyreported in: #5608 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5609?srcpr&elh1) report> merging [#5609](https://codecovio/gh/reactivex/rxjava/pull/5609?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/8c60d9d48f1d2aa4c37dc3c933ff616a3076ec20?srcpr&eldesc) will **increase** coverage by `007%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5609/graphs/treesvg?tokenwtcc2htjm2&width650&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5609?srcpr&eltree)```diff@@ coverage diff @@## 2x #5609 +/- ##+ coverage 9618% 9625% +007% + complexity 5837 5836 -1 files 632 632 lines 41473 41473 branches 5745 5745 + hits 39889 39920 +31 + misses 632 611 -21 + partials 952 942 -10```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5609?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [operators/observable/observableconcatmapeagerjava](https://codecovio/gh/reactivex/rxjava/pull/5609?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunvbmnhde1hcevhz2vylmphdme) | `9945% (ø)` | `2 (ø)` | :arrow_down: || [erators/flowable/flowableonbackpressurelatestjava](https://codecovio/gh/reactivex/rxjava/pull/5609?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlt25cywnrchjlc3n1cmvmyxrlc3quamf2yq) | `9459% (-541%)` | `2% (ø)` | || [/internal/operators/flowable/flowableintervaljava](https://codecovio/gh/reactivex/rxjava/pull/5609?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlsw50zxj2ywwuamf2yq) | `9444% (-278%)` | `3% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5609?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9347% (-218%)` | `2% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5609?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9724% (-184%)` | `39% (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/5609?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9122% (-176%)` | `11% (ø)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5609?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9846% (-154%)` | `28% (-1%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5609?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `6028% (-142%)` | `32% (-1%)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5609?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% (-107%)` | `5% (ø)` | || [/operators/observable/observablesequenceequaljava](https://codecovio/gh/reactivex/rxjava/pull/5609?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnlcxvlbmnlrxf1ywwuamf2yq) | `9831% (-085%)` | `2% (ø)` | || and [23 more](https://codecovio/gh/reactivex/rxjava/pull/5609?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5609?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5609?srcpr&elfooter) last update [8c60d9d5c57ae5](https://codecovio/gh/reactivex/rxjava/pull/5609?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5382.0,5616,1,0,0,1,0,1,1,0,2x: add singledelay overload that delays errors much like #5382 i discovered when trying to fake a slow/flaky backend that `singledelay` doesnt delay errorsthis pr adds an overload that does bringing `singledelay` in line with `observabledelay` it also corrects the javadoc for existing overloads (#5409 only updated 1/2) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5616?srcpr&elh1) report> merging [#5616](https://codecovio/gh/reactivex/rxjava/pull/5616?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/3e3300049dff23b15fa7f6639c844615a0b76f81?srcpr&eldesc) will **decrease** coverage by `005%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5616/graphs/treesvg?tokenwtcc2htjm2&srcpr&height150&width650)](https://codecovio/gh/reactivex/rxjava/pull/5616?srcpr&eltree)```diff@@ coverage diff @@## 2x #5616 +/- ##- coverage 9627% 9622% -006% + complexity 5844 5841 -3 files 632 632 lines 41473 41476 +3 branches 5745 5746 +1 - hits 39929 39910 -19 - misses 617 619 +2 - partials 927 947 +20```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5616?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [activex/internal/operators/single/singledelayjava](https://codecovio/gh/reactivex/rxjava/pull/5616?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvezwxhes5qyxzh) | `100% (ø)` | `2 (ø)` | :arrow_down: || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/5616?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `134 (+2)` | :arrow_up: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5616?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9029% (-523%)` | `2% (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5616?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/5616?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9298% (-351%)` | `11% (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5616?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% (-323%)` | `9% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5616?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `6153% (-257%)` | `12% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5616?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9371% (-242%)` | `2% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5616?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9456% (-218%)` | `2% (ø)` | || [rnal/operators/flowable/flowableskiplasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/5616?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2tpcexhc3ruaw1lzc5qyxzh) | `9591% (-205%)` | `2% (ø)` | || and [26 more](https://codecovio/gh/reactivex/rxjava/pull/5616?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5616?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5616?srcpr&elfooter) last update [3e330008005378](https://codecovio/gh/reactivex/rxjava/pull/5616?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5634.0,5637,1,0,0,1,0,0,1,0,2x: fixing javadoc warnings minor fixes for warnings reported by `javadoc` tool mentioned in #5634 nice could you also fix this:```:javadoc/home/travis/build/reactivex/rxjava/src/main/java/io/reactivex/observers/resourcemaybeobserverjava:60: error: bad use of > * subscribewith(new resourcemaybeobserver&ltinteger>() { ``` || sure amended! || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5637?srcpr&elh1) report> merging [#5637](https://codecovio/gh/reactivex/rxjava/pull/5637?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/126e7b52d0127d5e9c749f7e2c52a8de16ba9efc?srcpr&eldesc) will **increase** coverage by `011%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5637/graphs/treesvg?tokenwtcc2htjm2&srcpr&height150&width650)](https://codecovio/gh/reactivex/rxjava/pull/5637?srcpr&eltree)```diff@@ coverage diff @@## 2x #5637 +/- ##+ coverage 9614% 9626% +011% + complexity 5845 5843 -2 files 634 634 lines 41539 41539 branches 5752 5752 + hits 39938 39986 +48 + misses 647 608 -39 + partials 954 945 -9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5637?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5637?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `927% (+572%)` | `57 (ø)` | :arrow_down: || [io/reactivex/subscribers/disposablesubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/5637?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3vic2nyawjlcnmvrglzcg9zywjszvn1ynnjcmlizxiuamf2yq) | `100% (ø)` | `9 (ø)` | :arrow_down: || [a/io/reactivex/subscribers/resourcesubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/5637?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3vic2nyawjlcnmvumvzb3vyy2vtdwjzy3jpymvylmphdme) | `100% (ø)` | `10 (ø)` | :arrow_down: || [o/reactivex/observers/disposablemaybeobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5637?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvb2jzzxj2zxjzl0rpc3bvc2fibgvnyxlizu9ic2vydmvylmphdme) | `100% (ø)` | `7 (ø)` | :arrow_down: || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5637?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9336% (+486%)` | `62 (ø)` | :arrow_down: || [ava/io/reactivex/observers/disposableobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5637?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvb2jzzxj2zxjzl0rpc3bvc2fibgvpynnlcnzlci5qyxzh) | `100% (ø)` | `7 (ø)` | :arrow_down: || [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/5637?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `113 (ø)` | :arrow_down: || [ain/java/io/reactivex/subjects/publishsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5637?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvuhvibglzafn1ymply3quamf2yq) | `100% (ø)` | `41 (ø)` | :arrow_down: || [io/reactivex/observers/resourcesingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5637?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvb2jzzxj2zxjzl1jlc291cmnlu2luz2xlt2jzzxj2zxiuamf2yq) | `100% (ø)` | `8 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5637?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `506 (ø)` | :arrow_down: || and [49 more](https://codecovio/gh/reactivex/rxjava/pull/5637?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5637?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5637?srcpr&elfooter) last update [126e7b50734940](https://codecovio/gh/reactivex/rxjava/pull/5637?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5642.0,5647,1,0,0,0,0,0,1,0,2x: fix subscribewith documentation examples this pr improves a documentation of `subscribewith` functions in `single` `maybe` `completable` by making sure examples are compilable (by using classes which implement `disposable`)this should fix issue #5642 in that issue @akarnokd approved my idea to use `disposablemaybeobserver` in the example but as i looked in other classes i noticed that `observablesubscribewith()` documentation uses a `resourceobserver` (which implements `disposable`) so i thought that this is the way to go in all other top-classes?if you think that this is not the case and instead all of them should be switched to use `disposable*observer` in their examples let me know i will do it in this way theni think that all those example should use similar classes `resourcexobserver` is generally not necessary so `disposablexobserver` should be in the docs || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5647?srcpr&elh1) report> merging [#5647](https://codecovio/gh/reactivex/rxjava/pull/5647?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/748fb50f63b9239350d1d02c76667fde61a5f78b?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5647/graphs/treesvg?height150&width650&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5647?srcpr&eltree)```diff@@ coverage diff @@## 2x #5647 +/- ##- coverage 9619% 9616% -004% - complexity 5843 5847 +4 files 634 634 lines 41539 41539 branches 5752 5752 - hits 39960 39945 -15 - misses 626 642 +16 + partials 953 952 -1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5647?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/5647?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `135 (ø)` | :arrow_down: || [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/5647?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `169 (ø)` | :arrow_down: || [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/5647?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `113 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5647?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `506 (ø)` | :arrow_down: || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5647?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `7948% (-1539%)` | `2% (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/5647?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9189% (-541%)` | `9% (-1%)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5647?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [/internal/operators/flowable/flowableintervaljava](https://codecovio/gh/reactivex/rxjava/pull/5647?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlsw50zxj2ywwuamf2yq) | `9444% (-278%)` | `3% (ø)` | || [vex/internal/operators/flowable/flowablecachejava](https://codecovio/gh/reactivex/rxjava/pull/5647?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq2fjaguuamf2yq) | `9261% (-269%)` | `7% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5647?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9304% (-214%)` | `5% (ø)` | || and [26 more](https://codecovio/gh/reactivex/rxjava/pull/5647?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5647?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5647?srcpr&elfooter) last update [748fb5061216ac](https://codecovio/gh/reactivex/rxjava/pull/5647?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || got it will update soon is it ok to force push into pr branches? || pr branches are in your own repo so yes ||
4853.0,5649,1,0,0,0,0,0,1,0,2x add concatmapcompletable() to observable add `concatmapcompletable()` to `observable` as discussed in #4853i didnt think it made sense in other reactive typescode is mostly a copy of `observableconcatmap` let me know if there is a better style of code to base this off instead it also does not have the option to delay errors as concatmap() does not sure if that is needed # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5649?srcpr&elh1) report> merging [#5649](https://codecovio/gh/reactivex/rxjava/pull/5649?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/748fb50f63b9239350d1d02c76667fde61a5f78b?srcpr&eldesc) will **decrease** coverage by `004%`> the diff coverage is `9646%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5649/graphs/treesvg?tokenwtcc2htjm2&width650&srcpr&height150)](https://codecovio/gh/reactivex/rxjava/pull/5649?srcpr&eltree)```diff@@ coverage diff @@## 2x #5649 +/- ##- coverage 9619% 9615% -005% - complexity 5843 5849 +6 files 634 635 +1 lines 41539 41652 +113 branches 5752 5768 +16 + hits 39960 40050 +90 - misses 626 640 +14 - partials 953 962 +9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5649?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5649?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `508 (+2)` | :arrow_up: || [ors/observable/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5649?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunvbmnhde1hcenvbxbszxrhymxllmphdme) | `9633% (ø)` | `2 (?)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5649?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `7948% (-1539%)` | `2% (ø)` | || [/io/reactivex/internal/functions/objecthelperjava](https://codecovio/gh/reactivex/rxjava/pull/5649?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl09iamvjdehlbhblci5qyxzh) | `9473% (-527%)` | `20% (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5649?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `8849% (-487%)` | `62% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5649?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% (-458%)` | `2% (ø)` | || [/internal/operators/flowable/flowableintervaljava](https://codecovio/gh/reactivex/rxjava/pull/5649?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlsw50zxj2ywwuamf2yq) | `9444% (-278%)` | `3% (ø)` | || [vex/internal/operators/flowable/flowablecachejava](https://codecovio/gh/reactivex/rxjava/pull/5649?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq2fjaguuamf2yq) | `9261% (-269%)` | `7% (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5649?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `923% (-257%)` | `6% (ø)` | || [rnal/operators/flowable/flowableintervalrangejava](https://codecovio/gh/reactivex/rxjava/pull/5649?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlsw50zxj2ywxsyw5nzs5qyxzh) | `9591% (-205%)` | `3% (ø)` | || and [32 more](https://codecovio/gh/reactivex/rxjava/pull/5649?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5649?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5649?srcpr&elfooter) last update [748fb50783aab2](https://codecovio/gh/reactivex/rxjava/pull/5649?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || added to #5319 for the diagram ||
5657.0,5660,1,0,0,0,0,0,1,0,1x: fix timeout (timed selector) unsubscribe bug this pr fixes an unsubscribe bug somewhere in the timed `timeout` operator reported in #5657 by implementing it in a algorithmically fresh manner # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5660?srcpr&elh1) report> merging [#5660](https://codecovio/gh/reactivex/rxjava/pull/5660?srcpr&eldesc) into [1x](https://codecovio/gh/reactivex/rxjava/commit/81542cdc4278c8d4509a66441976d908a2197ea5?srcpr&eldesc) will **decrease** coverage by `014%`> the diff coverage is `887%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5660/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5660?srcpr&eltree)```diff@@ coverage diff @@## 1x #5660 +/- ##- coverage 8434% 842% -015% - complexity 2888 2889 +1 files 291 290 -1 lines 18199 18256 +57 branches 2480 2495 +15 + hits 15350 15372 +22 - misses 1983 2001 +18 - partials 866 883 +17```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5660?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/rx/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5660?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pynnlcnzhymxllmphdme) | `9964% (ø)` | `449 (+1)` | :arrow_up: || [rators/onsubscribetimeoutselectorwithfallbackjava](https://codecovio/gh/reactivex/rxjava/pull/5660?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt25tdwjzy3jpymvuaw1lb3v0u2vszwn0b3jxaxrormfsbgjhy2suamf2yq) | `8617% (ø)` | `2 (?)` | || [operators/onsubscribetimeouttimedwithfallbackjava](https://codecovio/gh/reactivex/rxjava/pull/5660?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt25tdwjzy3jpymvuaw1lb3v0vgltzwrxaxrormfsbgjhy2suamf2yq) | `9125% (ø)` | `2 (?)` | || [rx/internal/util/atomic/mpsclinkedatomicqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5660?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc91dglsl2f0b21pyy9nchnjtglua2vkqxrvbwljuxvldwuuamf2yq) | `7419% (-1291%)` | `7% (-1%)` | || [/java/rx/internal/util/unsafe/mpsclinkedqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5660?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc91dglsl3vuc2fmzs9nchnjtglua2vkuxvldwuuamf2yq) | `7575% (-1213%)` | `9% (-1%)` | || [java/rx/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5660?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9zy2hlzhvszxjzl0v4zwn1dg9yu2nozwr1bgvylmphdme) | `7746% (-705%)` | `2% (ø)` | || [ternal/operators/operatoronbackpressurelatestjava](https://codecovio/gh/reactivex/rxjava/pull/5660?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jpbkjhy2twcmvzc3vyzuxhdgvzdc5qyxzh) | `7884% (-385%)` | `3% (ø)` | || [src/main/java/rx/observers/serializedobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5660?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9vynnlcnzlcnmvu2vyawfsaxplze9ic2vydmvylmphdme) | `9782% (-218%)` | `19% (ø)` | || [x/internal/operators/deferredscalarsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/5660?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvrgvmzxjyzwrty2fsyxjtdwjzy3jpymvylmphdme) | `9827% (-173%)` | `24% (-1%)` | || [in/java/rx/internal/operators/operatorpublishjava](https://codecovio/gh/reactivex/rxjava/pull/5660?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jqdwjsaxnolmphdme) | `7791% (-084%)` | `8% (ø)` | || and [12 more](https://codecovio/gh/reactivex/rxjava/pull/5660?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5660?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5660?srcpr&elfooter) last update [81542cdab16779](https://codecovio/gh/reactivex/rxjava/pull/5660?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || posted fix for the selector version as well || thanks -- were using the new operators in our code base and they are working as expected || great! ||
5545.0,5669,1,0,0,0,0,1,1,1,2x: fix publishprocessor cancel/emission overflow bug this pr should fix the bug that caused the test failure in #5545the bug manifested itself when a cancellation was happening the same time a request 1 was being fulfilled since the same request accounting was used for cancellation indicator if the cancel happened between the `onnext()`s `get()` check and `decrementandget` this `decrementandget` decremented longmin_value unconditionally which lead to a state that would appear the subscriber still can receive events a concurrent `offer` which saves the current array of registered `subscriber`s then would emit an item and overflow the `subscriber`the fix is to use the cancellation-aware `backpressurehelperproducedcancel()` utilityunit test were added to verify the correct behavior on both `publishprocessor` and `behaviorprocessor` (the latter uses different cancellation mechanism via a dedicated field) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&elh1) report> merging [#5669](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/cd6bc08c5bf1faea7cd36800c4e85cedd2f684c5?srcpr&eldesc) will **decrease** coverage by `005%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5669/graphs/treesvg?width650&height150&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree)```diff@@ coverage diff @@## 2x #5669 +/- ##- coverage 9627% 9621% -006% - complexity 5815 5818 +3 files 633 633 lines 41553 41552 -1 branches 5752 5751 -1 - hits 40004 39981 -23 - misses 612 625 +13 - partials 937 946 +9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [java/io/reactivex/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9qdwjsaxnouhjvy2vzc29ylmphdme) | `9827% (-002%)` | `45 (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% (-85%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `8888% (-58%)` | `2% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9401% (-428%)` | `2% (ø)` | || [rnal/operators/flowable/flowabletakelasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgfrzuxhc3ruaw1lzc5qyxzh) | `9629% (-278%)` | `2% (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `9275% (-218%)` | `2% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% (-107%)` | `5% (ø)` | || [/operators/maybe/maybeflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlrmxhde1hcel0zxjhymxlrmxvd2fibguuamf2yq) | `9754% (-082%)` | `2% (ø)` | || [ernal/operators/flowable/flowabletimeouttimedjava](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzw91dfrpbwvklmphdme) | `9837% (-082%)` | `3% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-075%)` | `2% (ø)` | || and [19 more](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&elfooter) last update [cd6bc08678c62f](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5676.0,5677,1,0,0,0,0,1,1,0,2x: make parallel() a fusion-async-boundary the `parallel()` supports front-fusion but since the operator is almost always followed by the separate `runon` operator the parallel version of the `observeon` operator such front-fusion should be considered a `boundary`-type fusion just like with `observeon` a `requestfusion` with `boundary` tells the upstream operator(s) that when fused their actions would be executed behind an async boundary and possibly on an unwanted thread operators such as `map` and `doonnext` who are generally expected to be thread-confined can then refuse to fuse restoring the traditional queue hopping behavior (`source -> queue -> op -> queue -> op -> queue -> consumer`)reported in #5676/cc @smaldini & @simonbasle # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5677?srcpr&elh1) report> merging [#5677](https://codecovio/gh/reactivex/rxjava/pull/5677?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/1ad6647319e3a6ecfbf96d942611d253d58301ca?srcpr&eldesc) will **decrease** coverage by ` the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5677/graphs/treesvg?tokenwtcc2htjm2&srcpr&height150&width650)](https://codecovio/gh/reactivex/rxjava/pull/5677?srcpr&eltree)```diff@@ coverage diff @@## 2x #5677 +/- ##- coverage 9622% 9621% -001% + complexity 5813 5812 -1 files 633 633 lines 41552 41552 branches 5751 5751 - hits 39983 39980 -3 - misses 620 629 +9 + partials 949 943 -6```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5677?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rnal/operators/parallel/parallelfrompublisherjava](https://codecovio/gh/reactivex/rxjava/pull/5677?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsrnjvbvb1ymxpc2hlci5qyxzh) | `9431% (-143%)` | `4 (ø)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5677?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8697% (-573%)` | `57% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5677?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `8938% (-487%)` | `61% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5677?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9227% (-339%)` | `2% (ø)` | || [/internal/operators/flowable/flowableintervaljava](https://codecovio/gh/reactivex/rxjava/pull/5677?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlsw50zxj2ywwuamf2yq) | `9444% (-278%)` | `3% (ø)` | || [java/io/reactivex/subjects/completablesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5677?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvq29tcgxldgfibgvtdwjqzwn0lmphdme) | `974% (-26%)` | `36% (-1%)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5677?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `6153% (-257%)` | `12% (-1%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5677?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/5677?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [java/io/reactivex/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5677?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9qdwjsaxnouhjvy2vzc29ylmphdme) | `9827% (-173%)` | `45% (-1%)` | || and [27 more](https://codecovio/gh/reactivex/rxjava/pull/5677?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5677?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5677?srcpr&elfooter) last update [1ad664745a04ca](https://codecovio/gh/reactivex/rxjava/pull/5677?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5694.0,5696,1,0,0,0,0,1,1,0,1x: fix completableconcat to use replace (dont dispose old) fixes the same bug as with the 2x `completableandthen` and `completableconcat`see #5694 & #5695 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&elh1) report> merging [#5696](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eldesc) into [1x](https://codecovio/gh/reactivex/rxjava/commit/396b6104e419b80002c45faf76ac38f00d2ff64a?srcpr&eldesc) will **decrease** coverage by `005%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5696/graphs/treesvg?tokenwtcc2htjm2&srcpr&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree)```diff@@ coverage diff @@## 1x #5696 +/- ##- coverage 8424% 8419% -006% + complexity 2888 2886 -2 files 290 290 lines 18256 18256 branches 2495 2495 - hits 15380 15370 -10 - misses 1992 2002 +10 partials 884 884```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [l/operators/completableonsubscribeconcatarrayjava](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvq29tcgxldgfibgvpbln1ynnjcmlizunvbmnhdefycmf5lmphdme) | `875% (ø)` | `2 (ø)` | :arrow_down: || [perators/completableonsubscribeconcatiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvq29tcgxldgfibgvpbln1ynnjcmlizunvbmnhdel0zxjhymxllmphdme) | `9259% (ø)` | `3 (ø)` | :arrow_down: || [/java/rx/internal/util/unsafe/mpsclinkedqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc91dglsl3vuc2fmzs9nchnjtglua2vkuxvldwuuamf2yq) | `7272% (-1819%)` | `8% (-3%)` | || [rx/internal/util/atomic/mpsclinkedatomicqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc91dglsl2f0b21pyy9nchnjtglua2vkqxrvbwljuxvldwuuamf2yq) | `7419% (-1291%)` | `7% (-1%)` | || [java/rx/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9zy2hlzhvszxjzl0v4zwn1dg9yu2nozwr1bgvylmphdme) | `8169% (-282%)` | `2% (ø)` | || [n/java/rx/subscriptions/compositesubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9zdwjzy3jpchrpb25zl0nvbxbvc2l0zvn1ynnjcmlwdglvbi5qyxzh) | `7532% (-13%)` | `25% (ø)` | || [n/java/rx/subjects/subjectsubscriptionmanagerjava](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9zdwjqzwn0cy9tdwjqzwn0u3vic2nyaxb0aw9utwfuywdlci5qyxzh) | `80% (-072%)` | `15% (ø)` | || [in/java/rx/internal/operators/operatorgroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jhcm91cej5lmphdme) | `9081% (-071%)` | `5% (ø)` | || [main/java/rx/internal/operators/operatormergejava](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jnzxjnzs5qyxzh) | `8532% (-046%)` | `7% (ø)` | || [src/main/java/rx/completablejava](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9db21wbgv0ywjszs5qyxzh) | `8341% (+012%)` | `103% (+1%)` | :arrow_up: || and [4 more](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&elfooter) last update [396b610110e343](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5698.0,5705,1,0,0,0,1,1,1,1,2x: moved tests to fromcallabletest from fromcompletabletest fixes #5698 there was a test class named `observablefromcompletabletest` which actually was targeting `observablefromcallabletest` this was most likely just a naming issue copied all tests from `observablefromcompletabletest` to `observablefromcallabletest` and deleted the former class # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5705?srcpr&elh1) report> merging [#5705](https://codecovio/gh/reactivex/rxjava/pull/5705?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/98ee8bc7be8777c91252f525d46286414608b702?srcpr&eldesc) will **increase** coverage by `006%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5705/graphs/treesvg?height150&tokenwtcc2htjm2&width650&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5705?srcpr&eltree)```diff@@ coverage diff @@## 2x #5705 +/- ##+ coverage 9625% 9631% +006% complexity 5820 5820 files 634 634 lines 41604 41604 branches 5761 5761 + hits 40046 40072 +26 + misses 620 605 -15 + partials 938 927 -11```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5705?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5705?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8697% (-573%)` | `57% (ø)` | || [/io/reactivex/internal/functions/objecthelperjava](https://codecovio/gh/reactivex/rxjava/pull/5705?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl09iamvjdehlbhblci5qyxzh) | `9473% (-527%)` | `20% (-1%)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5705?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5705?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `923% (-257%)` | `6% (ø)` | || [vex/internal/subscribers/queuedrainsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/5705?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyawjlcnmvuxvldwvecmfpbln1ynnjcmlizxiuamf2yq) | `50% (-157%)` | `15% (-1%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5705?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9456% (-109%)` | `2% (ø)` | || [reactivex/internal/queue/spsclinkedarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5705?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0xpbmtlzefycmf5uxvldwuuamf2yq) | `9682% (-08%)` | `38% (-1%)` | || [operators/flowable/flowablewithlatestfrommanyjava](https://codecovio/gh/reactivex/rxjava/pull/5705?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlv2l0aexhdgvzdezyb21nyw55lmphdme) | `9924% (-076%)` | `7% (ø)` | || [x/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/5705?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlr3jvdxbces5qyxzh) | `9376% (-063%)` | `2% (ø)` | || [ain/java/io/reactivex/subjects/unicastsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5705?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvvw5py2fzdfn1ymply3quamf2yq) | `9813% (-063%)` | `64% (-1%)` | || and [23 more](https://codecovio/gh/reactivex/rxjava/pull/5705?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5705?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5705?srcpr&elfooter) last update [98ee8bc7b4c26c](https://codecovio/gh/reactivex/rxjava/pull/5705?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5716.0,5718,1,0,0,0,0,0,1,0,2x: add a sentence to documentation of take() operator #5716 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&elh1) report> merging [#5718](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/da380362afe82b9b77b14952309a156cfda0a152?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5718/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree)```diff@@ coverage diff @@## 2x #5718 +/- ##+ coverage 9623% 9627% +003% + complexity 5822 5821 -1 files 634 634 lines 41604 41604 branches 5761 5761 + hits 40039 40054 +15 - misses 624 625 +1 + partials 941 925 -16```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `525 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `508 (ø)` | :arrow_down: || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `90% (-742%)` | `6% (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `9247% (-216%)` | `9% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9565% (-164%)` | `2% (ø)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9846% (-154%)` | `28% (-1%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `6028% (-142%)` | `32% (-1%)` | || [ain/java/io/reactivex/subjects/unicastsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvvw5py2fzdfn1ymply3quamf2yq) | `9751% (-125%)` | `64% (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9026% (-089%)` | `61% (-1%)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9743% (-086%)` | `2% (ø)` | || and [29 more](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&elfooter) last update [da380367299fe3](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5716.0,5719,1,0,0,0,0,0,1,0,1x: add a sentence to documentation of take() operator #5716 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5719?srcpr&elh1) report> merging [#5719](https://codecovio/gh/reactivex/rxjava/pull/5719?srcpr&eldesc) into [1x](https://codecovio/gh/reactivex/rxjava/commit/5b2394c9ee91f298661fff5e043744c84b425808?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5719/graphs/treesvg?height150&width650&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5719?srcpr&eltree)```diff@@ coverage diff @@## 1x #5719 +/- ##+ coverage 8418% 842% +002% - complexity 2886 2887 +1 files 290 290 lines 18256 18256 branches 2495 2495 + hits 15368 15373 +5 misses 2000 2000 + partials 888 883 -5```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5719?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/rx/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5719?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pynnlcnzhymxllmphdme) | `9964% (ø)` | `449 (ø)` | :arrow_down: || [rx/internal/util/atomic/mpsclinkedatomicqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5719?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc91dglsl2f0b21pyy9nchnjtglua2vkqxrvbwljuxvldwuuamf2yq) | `7419% (-1291%)` | `7% (-1%)` | || [ternal/operators/operatoronbackpressurelatestjava](https://codecovio/gh/reactivex/rxjava/pull/5719?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jpbkjhy2twcmvzc3vyzuxhdgvzdc5qyxzh) | `7884% (-385%)` | `3% (ø)` | || [x/internal/operators/deferredscalarsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/5719?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvrgvmzxjyzwrty2fsyxjtdwjzy3jpymvylmphdme) | `9827% (-173%)` | `24% (-1%)` | || [in/java/rx/internal/operators/operatorgroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/5719?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jhcm91cej5lmphdme) | `9081% (-071%)` | `5% (ø)` | || [n/java/rx/internal/operators/cachedobservablejava](https://codecovio/gh/reactivex/rxjava/pull/5719?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvq2fjagvkt2jzzxj2ywjszs5qyxzh) | `8167% (+052%)` | `6% (ø)` | :arrow_down: || [main/java/rx/internal/operators/operatormergejava](https://codecovio/gh/reactivex/rxjava/pull/5719?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jnzxjnzs5qyxzh) | `8623% (+09%)` | `7% (ø)` | :arrow_down: || [ternal/operators/operatoronbackpressurebufferjava](https://codecovio/gh/reactivex/rxjava/pull/5719?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jpbkjhy2twcmvzc3vyzuj1zmzlci5qyxzh) | `95% (+125%)` | `8% (ø)` | :arrow_down: || [n/java/rx/subscriptions/compositesubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5719?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9zdwjzy3jpchrpb25zl0nvbxbvc2l0zvn1ynnjcmlwdglvbi5qyxzh) | `7662% (+129%)` | `25% (ø)` | :arrow_down: || [n/java/rx/subjects/subjectsubscriptionmanagerjava](https://codecovio/gh/reactivex/rxjava/pull/5719?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9zdwjqzwn0cy9tdwjqzwn0u3vic2nyaxb0aw9utwfuywdlci5qyxzh) | `8214% (+142%)` | `16% (+1%)` | :arrow_up: || and [3 more](https://codecovio/gh/reactivex/rxjava/pull/5719?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5719?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5719?srcpr&elfooter) last update [5b2394c24bb5ca](https://codecovio/gh/reactivex/rxjava/pull/5719?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5654.0,5729,1,0,0,0,0,1,1,1,"2x: implement as() this implement `as()` support as discussed in #5654i took the opportunity to try to standardize the docs and tests for it (which vary a little bit across implementations of `to()`)related: #5654 let me know if you want to add more tests some usages of `to()` were mixed in other tests and wasnt sure if they were specifically targeting testing it || im not sure i understand the remaining ci errors as the parameters have the nonnull annotation || some style checks failed: https://travis-ciorg/reactivex/rxjava/builds/302962901#l974please add `as` to `parallelflowable`please add a unit test that has a converter class which combines all interfaces and is applied to the 6 types of sources || could you explain what the style checks fix is? i didnt quite understand the message in the log || parallelflowable - 8adb583started on more converter tests in `convertertest` in c1f26ee composite converter test is in there only thing im stuck on is the `genericssignaturetest` tests (borrowed from `transformerstest`) currently they dont compile but im not sure what the goal is (or if it even makes sense to match the checks `transformerstest` does) let me know what you think || you have to extend the `paramvalidationcheckertest` with instances of your new converter types put something like the following into l562```javadefaultvaluesput(observableconverterclass new observableconverter() { @override public object apply(observable o) { return o }})``` || as for [these](https://travis-ciorg/reactivex/rxjava/builds/302995534#l495) you are using the wrong generic types~~`observableconverter b >` is applied to `observable ` in the test where `integer` is unrelated to `a `~~i overlooked the test using `a` ill check code locally || the wildcard definition in those compile errors and the wrong ` ` parameter confuses the compiler i suggest going raw-types with these converters and using `suppresswarnings({""unchecked"" ""rawtypes""})` on the problematic tests || posted a [patch](https://githubcom/hzsweers/rxjava/pull/2) for your pr || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5729?srcpr&elh1) report> merging [#5729](https://codecovio/gh/reactivex/rxjava/pull/5729?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/9521512c0f0c980f074ec5b0fbfe954b00c56f1d?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5729/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5729?srcpr&eltree)```diff@@ coverage diff @@## 2x #5729 +/- ##+ coverage 9624% 9629% +004% - complexity 5823 5831 +8 files 634 634 lines 41609 41615 +6 branches 5761 5761 + hits 40047 40073 +26 + misses 626 615 -11 + partials 936 927 -9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5729?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5729?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `509 (+1)` | :arrow_up: || [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/5729?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `526 (+1)` | :arrow_up: || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/5729?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `136 (+1)` | :arrow_up: || [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/5729?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `170 (+1)` | :arrow_up: || [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/5729?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `114 (+1)` | :arrow_up: || [n/java/io/reactivex/parallel/parallelflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5729?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcgfyywxszwwvugfyywxszwxgbg93ywjszs5qyxzh) | `100% (ø)` | `50 (+1)` | :arrow_up: || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5729?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8697% (-573%)` | `57% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5729?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% (-262%)` | `2% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5729?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `6153% (-257%)` | `12% (-1%)` | || [ex/internal/subscribers/innerqueuedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/5729?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyawjlcnmvsw5uzxjrdwv1zwrtdwjzy3jpymvylmphdme) | `9607% (-197%)` | `18% (-1%)` | || and [32 more](https://codecovio/gh/reactivex/rxjava/pull/5729?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5729?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5729?srcpr&elfooter) last update [9521512e0d793f](https://codecovio/gh/reactivex/rxjava/pull/5729?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || out of curiosity would this be a candidate for `@beta` in 220 since its so close? or would it stay `@experimental` for a time period after? || 220 is a bit in the future as id like to have #5319 finished before it an experimental component can be promoted to stable regardless || cool :+1: || thanks!! ||"
5319.0,5740,1,0,0,0,0,0,1,0,2x: marbles for observable all frompublisher ziparray this pr adds a marble diagram to `frompublisher` and updates the marbles of `all` and `ziparray` inside `observable`the images can be seen in [this comment](https://githubcom/reactivex/rxjava/issues/5319#issuecomment-346585222) of #5319 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&elh1) report> merging [#5740](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/ed5cd8bb69bf07bcec9c3e0107aae28d66d8e7a8?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5740/graphs/treesvg?width650&height150&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree)```diff@@ coverage diff @@## 2x #5740 +/- ##+ coverage 9624% 9629% +004% - complexity 5827 5830 +3 files 634 634 lines 41615 41615 branches 5761 5761 + hits 40054 40073 +19 + misses 626 611 -15 + partials 935 931 -4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `509 (ø)` | :arrow_down: || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `8888% (-435%)` | `2% (ø)` | || [rnal/operators/observable/observableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu9ic2vydmvpbi5qyxzh) | `9795% (-205%)` | `3% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `983% (-17%)` | `11% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `5886% (-142%)` | `31% (-1%)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9427% (-133%)` | `11% (+1%)` | || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `9677% (-097%)` | `6% (ø)` | || [tors/observable/observablesequenceequalsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnlcxvlbmnlrxf1ywxtaw5nbguuamf2yq) | `9829% (-086%)` | `3% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9829% (-086%)` | `2% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&elfooter) last update [ed5cd8bbb7bf6f](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5742.0,5743,1,0,0,0,1,1,1,1,2x: check isdisposed before emitting in singlefromcallable previously singlefromcallable did not check if the subscriber wasunsubscribed before emitting onsuccess or onerror this fixes thatbehavior and adds tests to singlefromcallable completablefromcallableand maybefromcallablefixes #5742 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5743?srcpr&elh1) report> merging [#5743](https://codecovio/gh/reactivex/rxjava/pull/5743?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/e25be7c048f874814e1f940fa5dcd62724cc95bd?srcpr&eldesc) will **decrease** coverage by `006%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5743/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5743?srcpr&eltree)```diff@@ coverage diff @@## 2x #5743 +/- ##- coverage 9629% 9622% -007% - complexity 5833 5836 +3 files 634 634 lines 41615 41620 +5 branches 5761 5763 +2 - hits 40073 40050 -23 - misses 611 634 +23 - partials 931 936 +5```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5743?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/internal/operators/single/singlefromcallablejava](https://codecovio/gh/reactivex/rxjava/pull/5743?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgcm9tq2fsbgfibguuamf2yq) | `100% (ø)` | `5 (+2)` | :arrow_up: || [/io/reactivex/internal/functions/objecthelperjava](https://codecovio/gh/reactivex/rxjava/pull/5743?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl09iamvjdehlbhblci5qyxzh) | `9473% (-527%)` | `20% (-1%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5743?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9029% (-448%)` | `2% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5743?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9316% (-428%)` | `2% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5743?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `6028% (-426%)` | `32% (-3%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5743?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9026% (-399%)` | `61% (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5743?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5743?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8758% (-262%)` | `2% (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5743?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `923% (-257%)` | `6% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5743?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9323% (-194%)` | `2% (ø)` | || and [26 more](https://codecovio/gh/reactivex/rxjava/pull/5743?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5743?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5743?srcpr&elfooter) last update [e25be7c8da1b86](https://codecovio/gh/reactivex/rxjava/pull/5743?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || could you please restore the code coverage of `singlefromcallable`? the new logic introduced a bunch of code paths that need testing || sounds good i added a few tests by copying the logic from `observablefromcallable` ||
5319.0,5745,1,0,0,0,0,0,1,0,2x: add/update observable marbles 11/28 this pr adds or updates mable diagrams of `observable`:- [`blockingfirst`](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/blockingfirstopng)- [`blockingfirst` with default](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/blockingfirstodefaultpng)- [`tofuture`](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/tofutureopng)- [`blockingsubscribe` no arguments](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/blockingsubscribeo0png)- [`blockingsubscribe` with 1 argument](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/blockingsubscribeo1png)- [`blockingsubscribe` with 2 arguments](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/blockingsubscribeo2png)- [`blockingsubscribe` with 3 arguments](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/blockingsubscribeopng)- [`collectinto`](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/collectintoopng)- [`dooncomplete`](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/dooncompleteopng)- [`doonerror`](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/doonerroropng)- [`doonlifecycle`](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/doonlifecycleopng)- [`doonnext`](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/doonnextopng)- [`doondispose`](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/doondisposepng)related #5319: [comment](https://githubcom/reactivex/rxjava/issues/5319#issuecomment-347482919) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5745?srcpr&elh1) report> merging [#5745](https://codecovio/gh/reactivex/rxjava/pull/5745?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/5f1542be404517a6deda109dd4493cdf5197a3f9?srcpr&eldesc) will **decrease** coverage by ` the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5745/graphs/treesvg?tokenwtcc2htjm2&srcpr&height150&width650)](https://codecovio/gh/reactivex/rxjava/pull/5745?srcpr&eltree)```diff@@ coverage diff @@## 2x #5745 +/- ##- coverage 9625% 9625% -001% - complexity 5833 5837 +4 files 634 634 lines 41644 41644 branches 5768 5768 - hits 40086 40083 -3 - misses 625 627 +2 - partials 933 934 +1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5745?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5745?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `509 (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5745?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% (-719%)` | `2% (ø)` | || [/operators/completable/completableconcatarrayjava](https://codecovio/gh/reactivex/rxjava/pull/5745?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0qxjyyxkuamf2yq) | `9375% (-625%)` | `2% (ø)` | || [erators/completable/completableconcatiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5745?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0sxrlcmfibguuamf2yq) | `9591% (-409%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5745?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9029% (-374%)` | `2% (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/5745?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `9275% (-218%)` | `2% (ø)` | || [ex/internal/subscribers/innerqueuedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/5745?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyawjlcnmvsw5uzxjrdwv1zwrtdwjzy3jpymvylmphdme) | `9607% (-197%)` | `18% (-1%)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5745?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9724% (-184%)` | `39% (-1%)` | || [vex/internal/operators/parallel/parallelrunonjava](https://codecovio/gh/reactivex/rxjava/pull/5745?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsunvut24uamf2yq) | `9565% (-145%)` | `8% (ø)` | || [vex/internal/operators/flowable/flowablecachejava](https://codecovio/gh/reactivex/rxjava/pull/5745?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq2fjaguuamf2yq) | `9395% (-135%)` | `7% (ø)` | || and [22 more](https://codecovio/gh/reactivex/rxjava/pull/5745?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5745?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5745?srcpr&elfooter) last update [5f1542b927eff6](https://codecovio/gh/reactivex/rxjava/pull/5745?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || the different colored stars in doonlifecycle werent obvious to me but the rest seems good ||
5319.0,5755,1,0,0,0,0,0,1,0,2x: add marbles for observable (12/06) this pr adds some missing marbles to `observable`:- [concatmapcompletable](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/concatmapcompletableopng)- [concatmapdelayerror](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/concatmapdelayerroropng)- [concatmapeager](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/concatmapeageropng)- [concatmapeagerdelayerror](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/concatmapeagerdelayerroropng)- [concatmapiterable](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/concatmapiterableopng)- [doafternext](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/doafternextopng)- [dofinally](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/dofinallyopng)tracked in #5319 images in [comment](https://githubcom/reactivex/rxjava/issues/5319#issuecomment-349595094) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5755?srcpr&elh1) report> merging [#5755](https://codecovio/gh/reactivex/rxjava/pull/5755?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/53d5a235f63ca143c11571cd538ad927c0f8f3ad?srcpr&eldesc) will **decrease** coverage by `007%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5755/graphs/treesvg?tokenwtcc2htjm2&srcpr&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/5755?srcpr&eltree)```diff@@ coverage diff @@## 2x #5755 +/- ##- coverage 9631% 9623% -008% + complexity 5840 5838 -2 files 634 634 lines 41650 41650 branches 5769 5769 - hits 40115 40083 -32 - misses 612 625 +13 - partials 923 942 +19```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5755?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `509 (ø)` | :arrow_down: || [/operators/completable/completableconcatarrayjava](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0qxjyyxkuamf2yq) | `9375% (-625%)` | `2% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% (-381%)` | `2% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9298% (-351%)` | `11% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8627% (-327%)` | `2% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `5886% (-284%)` | `31% (-2%)` | || [/internal/operators/flowable/flowableintervaljava](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlsw50zxj2ywwuamf2yq) | `9444% (-278%)` | `3% (ø)` | || [ex/internal/subscriptions/subscriptionarbiterjava](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9tdwjzy3jpchrpb25bcmjpdgvylmphdme) | `9745% (-255%)` | `47% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `942% (-242%)` | `2% (ø)` | || [rnal/operators/flowable/flowableskiplasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2tpcexhc3ruaw1lzc5qyxzh) | `9591% (-205%)` | `2% (ø)` | || and [25 more](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5755?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5755?srcpr&elfooter) last update [53d5a2390ea02c](https://codecovio/gh/reactivex/rxjava/pull/5755?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5762.0,5766,0,0,0,0,0,0,1,0,rename interface parameters #5762 signed-off-by: shaishavgandhi05 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5766?srcpr&elh1) report> merging [#5766](https://codecovio/gh/reactivex/rxjava/pull/5766?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/7ba9a3e04aeee3ab691002997e82e55fec40e495?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5766/graphs/treesvg?tokenwtcc2htjm2&width650&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5766?srcpr&eltree)```diff@@ coverage diff @@## 2x #5766 +/- ##+ coverage 9624% 9628% +003% - complexity 5805 5809 +4 files 634 634 lines 41607 41607 branches 5770 5770 + hits 40046 40062 +16 + misses 622 617 -5 + partials 939 928 -11```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5766?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9033% (-435%)` | `2% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9583% (-25%)` | `2% (ø)` | || [a/io/reactivex/internal/queue/mpsclinkedqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvtxbzy0xpbmtlzff1zxvllmphdme) | `9803% (-197%)` | `17% (-1%)` | || [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `983% (-17%)` | `11% (ø)` | || [nal/operators/flowable/flowableconcatmapeagerjava](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq29uy2f0twfwrwfnzxiuamf2yq) | `971% (-116%)` | `2% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `921% (-088%)` | `10% (-1%)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9829% (-086%)` | `2% (ø)` | || [main/java/io/reactivex/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvumvwbgf5u3viamvjdc5qyxzh) | `9667% (-067%)` | `48% (ø)` | || [ivex/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvssm9pbi5qyxzh) | `945% (-037%)` | `3% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% (ø)` | `2% (ø)` | :arrow_down: || and [17 more](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5766?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5766?srcpr&elfooter) last update [7ba9a3e03f27ce](https://codecovio/gh/reactivex/rxjava/pull/5766?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || good work +1 ||
5772.0,5773,1,0,0,0,0,0,1,0,2x: improve javadoc of retrywhen() operators this pr improves the javadoc of the `retrywhen` operators in the 5 base classes adds example to handling an asynchronous source with delay where an early `oncomplete` may cause unexpected terminations otherwiserelated: #5772 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5773?srcpr&elh1) report> merging [#5773](https://codecovio/gh/reactivex/rxjava/pull/5773?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/30960243f4bb8572cbfa1eeadfbd3f0ea063f1c2?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5773/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5773?srcpr&eltree)```diff@@ coverage diff @@## 2x #5773 +/- ##- coverage 9624% 9623% -002% - complexity 5811 5814 +3 files 634 634 lines 41607 41607 branches 5770 5770 - hits 40046 40041 -5 - misses 629 632 +3 - partials 932 934 +2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5773?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/5773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `526 (ø)` | :arrow_down: || [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/5773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `115 (ø)` | :arrow_down: || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/5773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `137 (ø)` | :arrow_down: || [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/5773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `170 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `509 (ø)` | :arrow_down: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-598%)` | `2% (ø)` | || [/internal/operators/flowable/flowableintervaljava](https://codecovio/gh/reactivex/rxjava/pull/5773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlsw50zxj2ywwuamf2yq) | `9444% (-278%)` | `3% (ø)` | || [ex/internal/subscribers/innerqueuedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/5773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyawjlcnmvsw5uzxjrdwv1zwrtdwjzy3jpymvylmphdme) | `9607% (-197%)` | `18% (-1%)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9724% (-184%)` | `39% (-1%)` | || [java/io/reactivex/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9qdwjsaxnouhjvy2vzc29ylmphdme) | `9823% (-177%)` | `43% (-1%)` | || and [25 more](https://codecovio/gh/reactivex/rxjava/pull/5773/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5773?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5773?srcpr&elfooter) last update [3096024fd31839](https://codecovio/gh/reactivex/rxjava/pull/5773?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || spotted a few other mistakes in there || just noticed in the `takewhile(e -> countergetandincrement() 3)` statements in the examples: that should probably be `! 3`? || indeed updated the pr and fixed the blockingx() calls in there as well ||
5779.0,5781,1,0,0,0,0,0,1,0,2x: describe merge() error handling this pr adds some clarifications about how `merge` handles (multiple) errors in a new *error handling* section in its ` ` javadoc entrythere exist several dozen variants of `merge` in the various base classes that could also include such javadoc addition once the wording has been reviewed the other places will receive a separate prrelated: #5779 #5780 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5781?srcpr&elh1) report> merging [#5781](https://codecovio/gh/reactivex/rxjava/pull/5781?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/7e503f0e8e51ecb92622f2e0e0547d7406a901de?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5781/graphs/treesvg?height150&srcpr&tokenwtcc2htjm2&width650)](https://codecovio/gh/reactivex/rxjava/pull/5781?srcpr&eltree)```diff@@ coverage diff @@## 2x #5781 +/- ##- coverage 9627% 9626% -002% - complexity 5807 5810 +3 files 634 634 lines 41607 41607 branches 5770 5770 - hits 40057 40052 -5 - misses 611 620 +9 + partials 939 935 -4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5781?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `526 (ø)` | :arrow_down: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-672%)` | `2% (ø)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8624% (-583%)` | `54% (ø)` | || [erators/completable/completableconcatiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0sxrlcmfibguuamf2yq) | `9591% (-409%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% (-393%)` | `2% (ø)` | || [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `918% (-328%)` | `2% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `618% (-278%)` | `35% (-2%)` | || [ain/java/io/reactivex/subjects/publishsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvuhvibglzafn1ymply3quamf2yq) | `978% (-22%)` | `38% (-1%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% (-218%)` | `2% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || and [30 more](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5781?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5781?srcpr&elfooter) last update [7e503f0c584452](https://codecovio/gh/reactivex/rxjava/pull/5781?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || no this acts as a testbed for the wording i hope @artem-zinnatulin can have a look at it too before i copy the text all over the place ||
578.0,5781,1,0,0,0,0,0,1,0,2x: describe merge() error handling this pr adds some clarifications about how `merge` handles (multiple) errors in a new *error handling* section in its ` ` javadoc entrythere exist several dozen variants of `merge` in the various base classes that could also include such javadoc addition once the wording has been reviewed the other places will receive a separate prrelated: #5779 #5780 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5781?srcpr&elh1) report> merging [#5781](https://codecovio/gh/reactivex/rxjava/pull/5781?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/7e503f0e8e51ecb92622f2e0e0547d7406a901de?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5781/graphs/treesvg?height150&srcpr&tokenwtcc2htjm2&width650)](https://codecovio/gh/reactivex/rxjava/pull/5781?srcpr&eltree)```diff@@ coverage diff @@## 2x #5781 +/- ##- coverage 9627% 9626% -002% - complexity 5807 5810 +3 files 634 634 lines 41607 41607 branches 5770 5770 - hits 40057 40052 -5 - misses 611 620 +9 + partials 939 935 -4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5781?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `526 (ø)` | :arrow_down: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-672%)` | `2% (ø)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8624% (-583%)` | `54% (ø)` | || [erators/completable/completableconcatiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0sxrlcmfibguuamf2yq) | `9591% (-409%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% (-393%)` | `2% (ø)` | || [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `918% (-328%)` | `2% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `618% (-278%)` | `35% (-2%)` | || [ain/java/io/reactivex/subjects/publishsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvuhvibglzafn1ymply3quamf2yq) | `978% (-22%)` | `38% (-1%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% (-218%)` | `2% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || and [30 more](https://codecovio/gh/reactivex/rxjava/pull/5781/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5781?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5781?srcpr&elfooter) last update [7e503f0c584452](https://codecovio/gh/reactivex/rxjava/pull/5781?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || no this acts as a testbed for the wording i hope @artem-zinnatulin can have a look at it too before i copy the text all over the place ||
5782.0,5783,1,0,0,0,0,0,1,0,2x: fix javadoc wording of onterminatedetach a missing `nulls` word from `flowableonterminatedetach` and `observableonterminatedetach` javadoc the other types have this word alreadyrelated: #5782 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5783?srcpr&elh1) report> merging [#5783](https://codecovio/gh/reactivex/rxjava/pull/5783?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/7e503f0e8e51ecb92622f2e0e0547d7406a901de?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5783/graphs/treesvg?tokenwtcc2htjm2&srcpr&height150&width650)](https://codecovio/gh/reactivex/rxjava/pull/5783?srcpr&eltree)```diff@@ coverage diff @@## 2x #5783 +/- ##- coverage 9627% 9625% -002% - complexity 5807 5808 +1 files 634 634 lines 41607 41607 branches 5770 5770 - hits 40057 40049 -8 - misses 611 627 +16 + partials 939 931 -8```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5783?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5783/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `509 (ø)` | :arrow_down: || [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/5783/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `526 (ø)` | :arrow_down: || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5783/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `7948% (-1624%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5783/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-672%)` | `2% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5783/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `6041% (-417%)` | `34% (-3%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5783/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9103% (-404%)` | `60% (+1%)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/5783/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5783/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [ex/internal/subscribers/innerqueuedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/5783/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyawjlcnmvsw5uzxjrdwv1zwrtdwjzy3jpymvylmphdme) | `9607% (-197%)` | `18% (-1%)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5783/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9724% (-184%)` | `39% (-1%)` | || and [27 more](https://codecovio/gh/reactivex/rxjava/pull/5783/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5783?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5783?srcpr&elfooter) last update [7e503f0591ac9d](https://codecovio/gh/reactivex/rxjava/pull/5783?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
579.0,5792,1,0,0,0,0,1,1,0,2x: fix flatmap inner fused poll crash not cancelling the upstream this pr fixes the lack of upstream `cancel()` call when an inner fused sources `queuepoll()` crashes in a non-delayed error modeunit tests were added to verify `observableflatmap` `flowableflatmapiterable` and `observableflatmapiterable` as well fixes #5791 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5792?srcpr&elh1) report> merging [#5792](https://codecovio/gh/reactivex/rxjava/pull/5792?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/709ccd6c6f0795ed81dda3432568c866911ced10?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `90%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5792/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5792?srcpr&eltree)```diff@@ coverage diff @@## 2x #5792 +/- ##- coverage 9629% 9626% -004% + complexity 5809 5806 -3 files 634 634 lines 41607 41609 +2 branches 5770 5771 +1 - hits 40066 40055 -11 + misses 614 612 -2 - partials 927 942 +15```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5792?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [x/internal/operators/flowable/flowableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/5792/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcc5qyxzh) | `8947% (+111%)` | `4 (ø)` | :arrow_down: || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5792/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8624% (-583%)` | `54% (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/5792/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9189% (-541%)` | `9% (-1%)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/5792/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9117% (-393%)` | `2% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/5792/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `921% (-351%)` | `10% (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5792/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% (-323%)` | `9% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5792/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-299%)` | `2% (ø)` | || [/internal/operators/flowable/flowableintervaljava](https://codecovio/gh/reactivex/rxjava/pull/5792/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlsw50zxj2ywwuamf2yq) | `9444% (-278%)` | `3% (ø)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5792/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [/main/java/io/reactivex/subjects/maybesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5792/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvtwf5ymvtdwjqzwn0lmphdme) | `9775% (-225%)` | `45% (-1%)` | || and [21 more](https://codecovio/gh/reactivex/rxjava/pull/5792/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5792?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5792?srcpr&elfooter) last update [709ccd60b70b05](https://codecovio/gh/reactivex/rxjava/pull/5792?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5319.0,5805,1,0,0,0,0,0,1,0,2x: final planned observable marble additions/fixes this is the final part of the `observable` marble fixes and additions as planned in #5319- [tolist(callable)](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/tolistocpng)- [toflowable(buffer)](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/toflowableobufferpng)- [toflowable(drop)](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/toflowableodroppng)- [toflowable(latest)](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/toflowableolatestpng)- [toflowable(error)](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/toflowableoerrorpng)- [toflowable(missing)](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/toflowableomissingpng)- [unsubscribeon](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/unsubscribeonopng)- fixed position and spacing of the marbles in the `zipwith` overloads (no image change)images in https://githubcom/reactivex/rxjava/issues/5319#issuecomment-356630375 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5805?srcpr&elh1) report> merging [#5805](https://codecovio/gh/reactivex/rxjava/pull/5805?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/31ab140360f8bd7b6d94ae2f40d1ba665f6fac01?srcpr&eldesc) will **increase** coverage by `005%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5805/graphs/treesvg?width650&srcpr&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/5805?srcpr&eltree)```diff@@ coverage diff @@## 2x #5805 +/- ##+ coverage 9629% 9634% +005% + complexity 5817 5814 -3 files 634 634 lines 41647 41647 branches 5776 5776 + hits 40103 40124 +21 + misses 612 591 -21 partials 932 932```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5805?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `509 (ø)` | :arrow_down: || [tivex/internal/schedulers/instantperiodictaskjava](https://codecovio/gh/reactivex/rxjava/pull/5805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jbnn0yw50ugvyaw9kawnuyxnrlmphdme) | `6111% (-556%)` | `7% (-2%)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/5805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9117% (-393%)` | `2% (ø)` | || [activex/internal/operators/single/singlecachejava](https://codecovio/gh/reactivex/rxjava/pull/5805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvdywnozs5qyxzh) | `9705% (-295%)` | `23% (-1%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9347% (-272%)` | `2% (ø)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/5805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9846% (-154%)` | `28% (-1%)` | || [java/io/reactivex/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9vbmljyxn0uhjvy2vzc29ylmphdme) | `9464% (-12%)` | `61% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9371% (-097%)` | `2% (ø)` | || and [29 more](https://codecovio/gh/reactivex/rxjava/pull/5805/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5805?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5805?srcpr&elfooter) last update [31ab14012a46c4](https://codecovio/gh/reactivex/rxjava/pull/5805?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
580.0,5811,1,0,0,0,0,1,1,1,2x: fix buffer(open close) not disposing indicators properly the pr fixes the resource management in the `buffer` operator that uses other reactive sources to indicate when a buffer starts and ends both `flowable` and `observable` implementations had to be fixedfixes: #5809 @akarnokd let me know if i understand the spirit of this pr on `flowablebufferboundary`:1 avoids keeping reference to / tracking buffers in subscribers other than the main2 cancel source on open subscriber completion (if it completes and the last buffers close publisher has completed subscribers will have size 0 and we can safely cancel upstream as no new buffer will open at this point)3 in main distinguish a open subscriber error from a close subscriber error (due to 1 the later needs associated buffer cleanup)is that correct/exhaustive? || > avoids keeping reference to / tracking buffers in subscribers other than the mainyes> cancel source on open subscriber completion (if it completes and the last buffers close publisher has completed subscribers will have size 0 and we can safely cancel upstream as no new buffer will open at this pointyes> in main distinguish a open subscriber error from a close subscriber error (due to 1 the later needs associated buffer cleanupno if the `openerror` or `closeerror` is fired both should cancel the main source cancel the subscribers other than themselves clean the buffer and then report the error they could be converted into a common method of `boundserror(disposable d throwable ex)` || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5811?srcpr&elh1) report> merging [#5811](https://codecovio/gh/reactivex/rxjava/pull/5811?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/aa3133091dc425cae54aae3002abdbba52dae675?srcpr&eldesc) will **increase** coverage by `011%`> the diff coverage is `9735%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5811/graphs/treesvg?tokenwtcc2htjm2&srcpr&height150&width650)](https://codecovio/gh/reactivex/rxjava/pull/5811?srcpr&eltree)```diff@@ coverage diff @@## 2x #5811 +/- ##+ coverage 9628% 9639% +011% + complexity 5817 5814 -3 files 634 634 lines 41647 41761 +114 branches 5776 5796 +20 + hits 40098 40255 +157 + misses 611 583 -28 + partials 938 923 -15```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5811?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nal/operators/flowable/flowablebufferboundaryjava](https://codecovio/gh/reactivex/rxjava/pull/5811/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqnvmzmvyqm91bmrhcnkuamf2yq) | `9605% (+1885%)` | `2 (ø)` | :arrow_down: || [operators/observable/observablebufferboundaryjava](https://codecovio/gh/reactivex/rxjava/pull/5811/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuj1zmzlckjvdw5kyxj5lmphdme) | `9831% (+2045%)` | `2 (ø)` | :arrow_down: || [/operators/completable/completableconcatarrayjava](https://codecovio/gh/reactivex/rxjava/pull/5811/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0qxjyyxkuamf2yq) | `9375% (-625%)` | `2% (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/5811/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9117% (-393%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5811/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% (-262%)` | `2% (ø)` | || [ain/java/io/reactivex/subjects/publishsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5811/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvuhvibglzafn1ymply3quamf2yq) | `978% (-22%)` | `38% (-1%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5811/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [ex/internal/subscribers/innerqueuedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/5811/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyawjlcnmvsw5uzxjrdwv1zwrtdwjzy3jpymvylmphdme) | `9607% (-197%)` | `18% (-1%)` | || [ternal/operators/flowable/flowablesampletimedjava](https://codecovio/gh/reactivex/rxjava/pull/5811/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2ftcgxlvgltzwquamf2yq) | `9558% (-148%)` | `3% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5811/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `6319% (-139%)` | `36% (-1%)` | || and [20 more](https://codecovio/gh/reactivex/rxjava/pull/5811/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5811?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5811?srcpr&elfooter) last update [aa3133004598ce](https://codecovio/gh/reactivex/rxjava/pull/5811?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5819.0,5820,1,0,0,1,0,1,1,0,1x: plugin lookup workaround for systemproperties access restrictions the pr adds a `try-catch` around the system property lookup inside the `rxjavaplugins` in case a security manager prevents reading arbitrary property entriesthis mainly affects the `rxjavaplugin[index]class` lookup which were introduced due to the 31 character key limit on androidhowever when running in a container such as tomcat a security manager may prevent reading these type of prefixed entries (where `[index]` cant be known upfront) crashing the initialization**update**:the `systemgetproperties()` can also fail therefore retrieving the properties has been factored out into a separate method that returns an empty propertiesfixes #5819 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5820?srcpr&elh1) report> merging [#5820](https://codecovio/gh/reactivex/rxjava/pull/5820?srcpr&eldesc) into [1x](https://codecovio/gh/reactivex/rxjava/commit/265fb484f504e093da508811c498e6241975950e?srcpr&eldesc) will **increase** coverage by `017%`> the diff coverage is `95%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5820/graphs/treesvg?tokenwtcc2htjm2&width650&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5820?srcpr&eltree)```diff@@ coverage diff @@## 1x #5820 +/- ##+ coverage 8407% 8425% +017% - complexity 2881 2891 +10 files 290 290 lines 18258 18264 +6 branches 2495 2495 + hits 15351 15388 +37 + misses 2013 1996 -17 + partials 894 880 -14```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5820?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/rx/plugins/rxjavapluginsjava](https://codecovio/gh/reactivex/rxjava/pull/5820/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9wbhvnaw5zl1j4smf2yvbsdwdpbnmuamf2yq) | `7474% (+162%)` | `29 (+1)` | :arrow_up: || [ain/java/rx/internal/schedulers/schedulerwhenjava](https://codecovio/gh/reactivex/rxjava/pull/5820/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9zy2hlzhvszxjzl1njagvkdwxlcldozw4uamf2yq) | `8378% (-406%)` | `4% (ø)` | || [src/main/java/rx/observers/serializedobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5820/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9vynnlcnzlcnmvu2vyawfsaxplze9ic2vydmvylmphdme) | `9782% (-218%)` | `19% (-1%)` | || [/rx/internal/schedulers/cachedthreadschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5820/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9zy2hlzhvszxjzl0nhy2hlzfrocmvhzfnjagvkdwxlci5qyxzh) | `8932% (-195%)` | `6% (ø)` | || [c/main/java/rx/observables/blockingobservablejava](https://codecovio/gh/reactivex/rxjava/pull/5820/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9vynnlcnzhymxlcy9cbg9ja2luz09ic2vydmfibguuamf2yq) | `8521% (-141%)` | `37% (-1%)` | || [ternal/operators/operatoronbackpressurebufferjava](https://codecovio/gh/reactivex/rxjava/pull/5820/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jpbkjhy2twcmvzc3vyzuj1zmzlci5qyxzh) | `9375% (-125%)` | `8% (ø)` | || [n/java/rx/internal/operators/cachedobservablejava](https://codecovio/gh/reactivex/rxjava/pull/5820/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvq2fjagvkt2jzzxj2ywjszs5qyxzh) | `8167% (-105%)` | `6% (ø)` | || [/rx/internal/operators/operatorwindowwithtimejava](https://codecovio/gh/reactivex/rxjava/pull/5820/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jxaw5kb3dxaxrovgltzs5qyxzh) | `4179% (+037%)` | `3% (ø)` | :arrow_down: || [ain/java/rx/internal/operators/operatorreplayjava](https://codecovio/gh/reactivex/rxjava/pull/5820/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jszxbsyxkuamf2yq) | `8277% (+039%)` | `15% (ø)` | :arrow_down: || [src/main/java/rx/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5820/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9zdwjqzwn0cy9szxbsyxltdwjqzwn0lmphdme) | `8791% (+043%)` | `30% (ø)` | :arrow_down: || and [12 more](https://codecovio/gh/reactivex/rxjava/pull/5820/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5820?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5820?srcpr&elfooter) last update [265fb48a8c72c9](https://codecovio/gh/reactivex/rxjava/pull/5820?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5827.0,5828,1,0,0,1,0,0,1,0,2x: document replay(n) emission retention caveat adds javadocs indicating a caveat regarding size-bounded replay operators subjects and processors see #5827 for details # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5828?srcpr&elh1) report> merging [#5828](https://codecovio/gh/reactivex/rxjava/pull/5828?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/b8380e21f6dcacfedefec273587e093e0026ed7a?srcpr&eldesc) will **decrease** coverage by `008%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5828/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5828?srcpr&eltree)```diff@@ coverage diff @@## 2x #5828 +/- ##- coverage 9644% 9635% -009% complexity 5817 5817 files 634 634 lines 41761 41761 branches 5796 5796 - hits 40276 40239 -37 - misses 570 592 +22 - partials 915 930 +15```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5828?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/5828/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `526 (ø)` | :arrow_down: || [main/java/io/reactivex/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5828/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvumvwbgf5u3viamvjdc5qyxzh) | `9733% (-023%)` | `49 (ø)` | || [/java/io/reactivex/processors/replayprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5828/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9szxbsyxlqcm9jzxnzb3iuamf2yq) | `9935% (ø)` | `51 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5828/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `509 (ø)` | :arrow_down: || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5828/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9103% (-494%)` | `60% (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/5828/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9117% (-393%)` | `2% (ø)` | || [internal/disposables/arraycompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5828/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvqxjyyxldb21wb3npdgveaxnwb3nhymxllmphdme) | `9642% (-358%)` | `15% (-1%)` | || [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/pull/5828/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `918% (-328%)` | `2% (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5828/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% (-323%)` | `9% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5828/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `618% (-278%)` | `35% (-2%)` | || and [29 more](https://codecovio/gh/reactivex/rxjava/pull/5828/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5828?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5828?srcpr&elfooter) last update [b8380e2dfb43f6](https://codecovio/gh/reactivex/rxjava/pull/5828?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5832.0,5833,1,0,0,0,0,1,1,1,2x: fix observableswitchmap main onerror not disposing the current inner source the `observableswitchmap` had bad logic in its main `onerror` handler which didnt dispose the current inner `observable`the `flowable` version didnt have this logic error both variants received an unit test to verify the correct behaviorfixes #5832 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5833?srcpr&elh1) report> merging [#5833](https://codecovio/gh/reactivex/rxjava/pull/5833?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/1fbc44fb81ec65f624cc98a318217dc031cf6d4e?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5833/graphs/treesvg?tokenwtcc2htjm2&srcpr&height150&width650)](https://codecovio/gh/reactivex/rxjava/pull/5833?srcpr&eltree)```diff@@ coverage diff @@## 2x #5833 +/- ##+ coverage 9642% 9644% +001% + complexity 5816 5815 -1 files 634 634 lines 41761 41760 -1 branches 5796 5796 + hits 40268 40275 +7 + misses 578 573 -5 + partials 915 912 -3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5833?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9062% (+18%)` | `3 (ø)` | :arrow_down: || [/operators/completable/completableconcatarrayjava](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0qxjyyxkuamf2yq) | `9375% (-625%)` | `2% (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9189% (-541%)` | `9% (-1%)` | || [/internal/operators/flowable/flowableintervaljava](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlsw50zxj2ywwuamf2yq) | `9444% (-278%)` | `3% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `6153% (-257%)` | `12% (-1%)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9346% (-197%)` | `2% (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9383% (-177%)` | `10% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `618% (-139%)` | `35% (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9561% (-088%)` | `10% (-1%)` | || and [21 more](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5833?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5833?srcpr&elfooter) last update [1fbc44fcfa17ae](https://codecovio/gh/reactivex/rxjava/pull/5833?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5350.0,5845,1,0,0,0,0,0,1,0,2x: add efficient concatwith(single|maybe|completable) overloads this pr adds specialized overloads to the `concatwith` operator in `flowable` and `observable`if accepted the marbles will be updated in a separate prrelated: #5350 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5845?srcpr&elh1) report> merging [#5845](https://codecovio/gh/reactivex/rxjava/pull/5845?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/363f0381c2fcc9df287d771ffd2826c64c998145?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5845/graphs/treesvg?srcpr&tokenwtcc2htjm2&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/5845?srcpr&eltree)```diff@@ coverage diff @@## 2x #5845 +/- ##+ coverage 9638% 9642% +004% - complexity 5812 5835 +23 files 634 640 +6 lines 41760 41944 +184 branches 5796 5804 +8 + hits 40251 40446 +195 + misses 591 580 -11 partials 918 918```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5845?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rators/flowable/flowableconcatwithcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq29uy2f0v2l0aenvbxbszxrhymxllmphdme) | `100% (ø)` | `2 (?)` | || [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/5845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `529 (+3)` | :arrow_up: || [rs/observable/observableconcatwithcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunvbmnhdfdpdghdb21wbgv0ywjszs5qyxzh) | `100% (ø)` | `2 (?)` | || [perators/observable/observableconcatwithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunvbmnhdfdpdghnyxlizs5qyxzh) | `100% (ø)` | `2 (?)` | || [erators/observable/observableconcatwithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunvbmnhdfdpdghtaw5nbguuamf2yq) | `100% (ø)` | `2 (?)` | || [al/operators/flowable/flowableconcatwithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq29uy2f0v2l0ae1hewjllmphdme) | `100% (ø)` | `2 (?)` | || [l/operators/flowable/flowableconcatwithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq29uy2f0v2l0afnpbmdszs5qyxzh) | `100% (ø)` | `2 (?)` | || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `512 (+3)` | :arrow_up: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% (-458%)` | `2% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/5845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9298% (-264%)` | `11% (+1%)` | || and [32 more](https://codecovio/gh/reactivex/rxjava/pull/5845/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5845?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5845?srcpr&elfooter) last update [363f03860341b1](https://codecovio/gh/reactivex/rxjava/pull/5845?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5350.0,5847,1,0,0,1,0,1,1,0,2x: add efficient mergewith(single|maybe|completable) overloads this pr adds specialized overloads to the `mergewith` operator in `flowable` and `observable`if accepted the marbles will be updated in a separate prrelated: #5350 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5847?srcpr&elh1) report> merging [#5847](https://codecovio/gh/reactivex/rxjava/pull/5847?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/12c0e3011726b15fc34ebc4dd1a4c67589210898?srcpr&eldesc) will **increase** coverage by `009%`> the diff coverage is `9984%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5847/graphs/treesvg?height150&width650&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5847?srcpr&eltree)```diff@@ coverage diff @@## 2x #5847 +/- ##+ coverage 964% 965% +009% - complexity 5834 5852 +18 files 640 646 +6 lines 41944 42608 +664 branches 5804 5906 +102 + hits 40438 41119 +681 + misses 582 576 -6 + partials 924 913 -11```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5847?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nal/operators/flowable/flowablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxltwvyz2vxaxrotwf5ymuuamf2yq) | `100% (ø)` | `2 (?)` | || [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `532 (+3)` | :arrow_up: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `515 (+3)` | :arrow_up: || [al/operators/flowable/flowablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxltwvyz2vxaxrou2luz2xllmphdme) | `100% (ø)` | `2 (?)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0afnpbmdszs5qyxzh) | `100% (ø)` | `2 (?)` | || [ors/observable/observablemergewithcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0aenvbxbszxrhymxllmphdme) | `100% (ø)` | `2 (?)` | || [erators/flowable/flowablemergewithcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxltwvyz2vxaxroq29tcgxldgfibguuamf2yq) | `100% (ø)` | `2 (?)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0ae1hewjllmphdme) | `991% (ø)` | `2 (?)` | || [/operators/completable/completableconcatarrayjava](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0qxjyyxkuamf2yq) | `9375% (-625%)` | `2% (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9189% (-541%)` | `9% (-1%)` | || and [40 more](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5847?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5847?srcpr&elfooter) last update [12c0e306bd71c9](https://codecovio/gh/reactivex/rxjava/pull/5847?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || conflict resolved there was an expected merge conflict with the `concatwith` pr as they both touched the same test file ||
5763.0,5860,1,0,0,0,0,1,1,1,2x: flowablegroupby add overload with evicting map factory as per discussion in #5763 this pr adds an overload for `flowablegroupby` that specifies an `evictingmapfactory` an example of usage taken from the new javadoc:```javafunction map > evictingmapfactory notify -> cachebuilder newbuilder() maximumsize(3) removallistener(entry -> { try { // emit the value not the key! notifyaccept(entrygetvalue()) } catch (exception e) { throw new runtimeexception(e) } }) build() asmap() // emit 1000 items but ensure that the // internal map never has more than 3 items in it flowable range(1 1000) // note that number of keys is 10 groupby(x -> x % 10 x-> x true 16 evictingmapfactory) flatmap(g -> g) foreach(systemout::println)```note that i based this operator on the 1x version which i think may have a bug that goes as far as the signature of that method the eviction consumer should not be given a key but rather the value from the map ill pursue the 1x issue after dealing with this # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5860?srcpr&elh1) report> merging [#5860](https://codecovio/gh/reactivex/rxjava/pull/5860?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/0f73283c0fb87979f383c4b7f358117c4ebcc034?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5860/graphs/treesvg?height150&width650&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5860?srcpr&eltree)```diff@@ coverage diff @@## 2x #5860 +/- ##+ coverage 9653% 9658% +004% - complexity 5857 5858 +1 files 646 646 lines 42608 42640 +32 branches 5906 5910 +4 + hits 41132 41183 +51 + misses 578 550 -28 - partials 898 907 +9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5860?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [x/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/5860/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlr3jvdxbces5qyxzh) | `954% (+038%)` | `3 (+1)` | :arrow_up: || [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/5860/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `533 (+1)` | :arrow_up: || [/io/reactivex/internal/functions/objecthelperjava](https://codecovio/gh/reactivex/rxjava/pull/5860/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl09iamvjdehlbhblci5qyxzh) | `9473% (-527%)` | `20% (-1%)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/5860/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9117% (-393%)` | `2% (ø)` | || [/internal/operators/flowable/flowableintervaljava](https://codecovio/gh/reactivex/rxjava/pull/5860/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlsw50zxj2ywwuamf2yq) | `9444% (-278%)` | `3% (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5860/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `923% (-257%)` | `6% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/5860/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-239%)` | `2% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5860/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% (-214%)` | `5% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/5860/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [a/io/reactivex/internal/queue/mpsclinkedqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5860/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvtxbzy0xpbmtlzff1zxvllmphdme) | `9803% (-197%)` | `17% (-1%)` | || and [24 more](https://codecovio/gh/reactivex/rxjava/pull/5860/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5860?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5860?srcpr&elfooter) last update [0f73283991efdb](https://codecovio/gh/reactivex/rxjava/pull/5860?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks @akarnokd ive addressed your comments and also added `@beta` and `@since 2111` || ive * updated the guava dependency to 240-jre* updated the cachebuilder link to point to guava 240 javadoc* set the since version to 2110 || added that missing space to javadoc (`x -> x`) and squashed commits thanks for the review @vanniktech ||
5862.0,5863,1,0,0,0,0,0,1,0,2x: expand the documentation of the flowablelift() operator this pr expands the documentation of the `flowablelift()` operator used for inserting custom operators into flows in a functional and fluent fashionthe other reactive base classes feature similar `lift()` operators for which the text can be adapted and contributed in a separate pr once the content of this pr is stabilized by review feedbackrelated: #5862 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5863?srcpr&elh1) report> merging [#5863](https://codecovio/gh/reactivex/rxjava/pull/5863?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/237084f1cdff7fcf7caefb4c80c14f2d2d052fb7?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5863/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5863?srcpr&eltree)```diff@@ coverage diff @@## 2x #5863 +/- ##+ coverage 9651% 9654% +002% + complexity 5856 5855 -1 files 646 646 lines 42640 42640 branches 5910 5910 + hits 41156 41166 +10 + misses 574 567 -7 + partials 910 907 -3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5863?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/5863/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `533 (ø)` | :arrow_down: || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/5863/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9117% (-393%)` | `2% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5863/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% (-381%)` | `2% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5863/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% (-214%)` | `5% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5863/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9724% (-184%)` | `39% (-1%)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5863/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9846% (-154%)` | `28% (-1%)` | || [vex/internal/operators/flowable/flowablecachejava](https://codecovio/gh/reactivex/rxjava/pull/5863/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq2fjaguuamf2yq) | `9261% (-135%)` | `7% (ø)` | || [ivex/internal/operators/maybe/maybemergearrayjava](https://codecovio/gh/reactivex/rxjava/pull/5863/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjltwvyz2vbcnjhes5qyxzh) | `9662% (-113%)` | `6% (ø)` | || [ex/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/5863/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvwbgf5lmphdme) | `9006% (-085%)` | `22% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5863/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `975% (-084%)` | `2% (ø)` | || and [19 more](https://codecovio/gh/reactivex/rxjava/pull/5863/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5863?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5863?srcpr&elfooter) last update [237084f3b753f7](https://codecovio/gh/reactivex/rxjava/pull/5863?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thank you i found the documentation much improved and was able to use it to build a working example operator (i may post it as a gist if anyone is interested) ||
4853.0,5870,1,0,0,0,0,1,1,0,2x: add flowableswitchmapcompletable{delayerror} operator this pr adds the `flowableswitchmapcompletable` and `flowableswitchmapcompletabledelayerror` operators as requested by #4853the associated new marbles are:![switchmapcompletable](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/switchmapcompletablefpng)![switchmapcompletabledelayerror](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/switchmapcompletabledelayerrorfpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5870?srcpr&elh1) report> merging [#5870](https://codecovio/gh/reactivex/rxjava/pull/5870?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/84004a617557946f9f64f7f362f0dcbe0b798530?srcpr&eldesc) will **increase** coverage by `007%`> the diff coverage is `9898%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5870/graphs/treesvg?tokenwtcc2htjm2&width650&srcpr&height150)](https://codecovio/gh/reactivex/rxjava/pull/5870?srcpr&eltree)```diff@@ coverage diff @@## 2x #5870 +/- ##+ coverage 9654% 9661% +007% - complexity 5862 5868 +6 files 647 648 +1 lines 42766 42865 +99 branches 5933 5952 +19 + hits 41289 41416 +127 + misses 568 552 -16 + partials 909 897 -12```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5870?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/5870/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `541 (+2)` | :arrow_up: || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5870/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `9894% (ø)` | `2 (?)` | || [/io/reactivex/internal/functions/objecthelperjava](https://codecovio/gh/reactivex/rxjava/pull/5870/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl09iamvjdehlbhblci5qyxzh) | `9473% (-527%)` | `20% (-1%)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5870/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `923% (-257%)` | `6% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5870/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9583% (-25%)` | `2% (ø)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5870/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/5870/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9117% (-197%)` | `2% (ø)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/5870/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9528% (-142%)` | `3% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5870/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9506% (-09%)` | `60% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5870/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9743% (-086%)` | `2% (ø)` | || and [25 more](https://codecovio/gh/reactivex/rxjava/pull/5870/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5870?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5870?srcpr&elfooter) last update [84004a675b7558](https://codecovio/gh/reactivex/rxjava/pull/5870?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || rebased and refactored due to `concatmapcompletable` introducing the `internalmixed` package ||
4853.0,5871,1,0,0,0,0,1,1,0,2x: add flowableconcatmapcompletable{delayerror} operator this pr adds the `flowableconcatmapcompletable` and `flowableconcatmapcompletabledelayerror` operators as requested by #4853the marbles will be updated in a separate pr # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5871?srcpr&elh1) report> merging [#5871](https://codecovio/gh/reactivex/rxjava/pull/5871?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/8068404179b0d2e07da6f0e10ea95110d98e118d?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5871/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5871?srcpr&eltree)```diff@@ coverage diff @@## 2x #5871 +/- ##- coverage 965% 9647% -003% - complexity 5852 5864 +12 files 646 647 +1 lines 42640 42766 +126 branches 5910 5933 +23 + hits 41148 41258 +110 - misses 579 593 +14 - partials 913 915 +2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5871?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/5871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `539 (+6)` | :arrow_up: || [/operators/mixed/flowableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwq29tcgxldgfibguuamf2yq) | `100% (ø)` | `2 (?)` | || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `90% (-742%)` | `6% (ø)` | || [/io/reactivex/internal/functions/objecthelperjava](https://codecovio/gh/reactivex/rxjava/pull/5871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl09iamvjdehlbhblci5qyxzh) | `9473% (-527%)` | `20% (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8823% (-327%)` | `2% (ø)` | || [/internal/operators/flowable/flowableintervaljava](https://codecovio/gh/reactivex/rxjava/pull/5871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlsw50zxj2ywwuamf2yq) | `9444% (-278%)` | `3% (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `923% (-257%)` | `6% (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/5871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9427% (-177%)` | `11% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9743% (-171%)` | `2% (ø)` | || [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/pull/5871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `983% (-17%)` | `11% (ø)` | || and [25 more](https://codecovio/gh/reactivex/rxjava/pull/5871/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5871?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5871?srcpr&elfooter) last update [8068404ece07c1](https://codecovio/gh/reactivex/rxjava/pull/5871?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
4853.0,5872,1,0,0,0,0,0,1,0,2x: add flowableconcatmap{maybesingle}{delayerror} operators this pr adds operators that allow concatenating a mapped sequence of `maybe`s or `single`s with or without delaying their errors:- `concatmapmaybe` (+1 overload with prefetch)- `concatmapmaybedelayerror` (+2 overloads with error mode and prefetch)- `concatmapsingle` (+1 overload with prefetch)- `concatmapsingledelayerror` (+2 overloads with error mode and prefetch)they are in the same pr as the `single` variants implementation is practically the `maybe` implementation minus the `oncomplete` casetheir marbles will be updated in a separate proriginally requested in #4853 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5872?srcpr&elh1) report> merging [#5872](https://codecovio/gh/reactivex/rxjava/pull/5872?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/84004a617557946f9f64f7f362f0dcbe0b798530?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5872/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5872?srcpr&eltree)```diff@@ coverage diff @@## 2x #5872 +/- ##+ coverage 9654% 9657% +003% - complexity 5862 5885 +23 files 647 650 +3 lines 42766 43156 +390 branches 5933 5994 +61 + hits 41289 41679 +390 - misses 568 572 +4 + partials 909 905 -4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5872?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `553 (+14)` | :arrow_up: || [ternal/operators/mixed/flowableconcatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwtwf5ymuuamf2yq) | `100% (ø)` | `2 (?)` | || [ernal/operators/mixed/flowableconcatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwu2luz2xllmphdme) | `100% (ø)` | `2 (?)` | || [/io/reactivex/internal/functions/objecthelperjava](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl09iamvjdehlbhblci5qyxzh) | `9473% (-527%)` | `20% (-1%)` | || [/internal/operators/flowable/flowableintervaljava](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlsw50zxj2ywwuamf2yq) | `9444% (-278%)` | `3% (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `923% (-257%)` | `6% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% (-214%)` | `5% (ø)` | || [a/io/reactivex/internal/queue/mpsclinkedqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvtxbzy0xpbmtlzff1zxvllmphdme) | `9803% (-197%)` | `17% (-1%)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9666% (-167%)` | `2% (ø)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9528% (-142%)` | `3% (ø)` | || and [27 more](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5872?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5872?srcpr&elfooter) last update [84004a6303e77a](https://codecovio/gh/reactivex/rxjava/pull/5872?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
4853.0,5873,1,0,0,0,0,1,1,0,2x: add flowableswitchmap{maybesingle}{delayerror} operators this pr adds `flowable` operators that allow switching between a mapped sequence of `maybe`s or `single`s with or without delaying their errors:- `switchmapmaybe`- `switchmapmaybedelayerror`- `switchmapsingle`- `switchmapsingledelayerror`they are in the same pr as the `single` variants implementation is practically the `maybe` implementation minus the `oncomplete` casetheir marbles will be updated in a separate proriginally requested in #4853 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5873?srcpr&elh1) report> merging [#5873](https://codecovio/gh/reactivex/rxjava/pull/5873?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/44fb7cd2dfbc0127e0734111431e5a693cafac6b?srcpr&eldesc) will **increase** coverage by `005%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5873/graphs/treesvg?height150&srcpr&tokenwtcc2htjm2&width650)](https://codecovio/gh/reactivex/rxjava/pull/5873?srcpr&eltree)```diff@@ coverage diff @@## 2x #5873 +/- ##+ coverage 9657% 9662% +005% - complexity 5881 5893 +12 files 650 652 +2 lines 43156 43403 +247 branches 5994 6033 +39 + hits 41677 41938 +261 + misses 567 557 -10 + partials 912 908 -4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5873?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/5873/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `557 (+4)` | :arrow_up: || [ernal/operators/mixed/flowableswitchmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5873/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwu2luz2xllmphdme) | `100% (ø)` | `2 (?)` | || [ternal/operators/mixed/flowableswitchmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5873/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwtwf5ymuuamf2yq) | `100% (ø)` | `2 (?)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5873/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9082% (-532%)` | `2% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5873/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `6153% (-257%)` | `12% (-1%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/5873/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-239%)` | `2% (ø)` | || [rnal/operators/flowable/flowableskiplasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/5873/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2tpcexhc3ruaw1lzc5qyxzh) | `9591% (-205%)` | `2% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/5873/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [ex/internal/subscribers/innerqueuedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/5873/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyawjlcnmvsw5uzxjrdwv1zwrtdwjzy3jpymvylmphdme) | `9607% (-197%)` | `18% (-1%)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5873/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9846% (-154%)` | `28% (-1%)` | || and [31 more](https://codecovio/gh/reactivex/rxjava/pull/5873/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5873?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5873?srcpr&elfooter) last update [44fb7cdbd6c41b](https://codecovio/gh/reactivex/rxjava/pull/5873?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || 1 `observableconcatmapcompletabledelayerror`2 `observableconcatmapmaybe`3 `observableconcatmapmaybedelayerror`4 `observableconcatmapsingle`5 `observableconcatmapsingledelayerror`6 `observableswitchmapcompletable`7 `observableswitchmapcompletabledelayerror`8 `observableswitchmapmaybe`9 `observableswitchmapmaybedelayerror`10 `observableswitchmapsingle` - dedicated implementation11 `observableswitchmapsingledelayerror` - dedicated implementationthese can be derived easily from their `flowable` counterparts ||
4853.0,5875,1,0,0,0,0,1,1,0,2x: add observable switchmapx and concatmapx operators this pr ports the various `switchmapx` and `concatmapx` operators from #5870 #5871 #5872 and #5873 to `observable`:- `concatmapcompletable` (replaced by the common implementation)- `concatmapcompletabledelayerror`- `concatmapmaybe`- `concatmapmaybedelayerror`- `concatmapsingle`- `concatmapsingledelayerror`- `switchmapcompletable`- `switchmapcompletabledelayerror`- `switchmapmaybe`- `switchmapmaybedelayerror`- `switchmapsingle` (dedicated implementation)- `switchmapsingledelayerror` (dedicated implementation)this pr concludes the requested set of operators in #4853marbles will be updated/adjusted in a separate pr # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5875?srcpr&elh1) report> merging [#5875](https://codecovio/gh/reactivex/rxjava/pull/5875?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/d3ed2690d5d7840b2ed190032f9324aec9a7d8a9?srcpr&eldesc) will **increase** coverage by `016%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5875/graphs/treesvg?srcpr&width650&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/5875?srcpr&eltree)```diff@@ coverage diff @@## 2x #5875 +/- ##+ coverage 9659% 9676% +016% - complexity 5893 5921 +28 files 652 657 +5 lines 43403 43986 +583 branches 6033 6132 +99 + hits 41926 42563 +637 + misses 567 544 -23 + partials 910 879 -31```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5875?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [operators/observable/observableinternalhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuludgvybmfssgvscgvylmphdme) | `8695% (-095%)` | `15 (-3)` | || [rnal/operators/mixed/observableconcatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbnyxlizs5qyxzh) | `100% (ø)` | `2 (?)` | || [nal/operators/mixed/observableswitchmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbtaw5nbguuamf2yq) | `100% (ø)` | `2 (?)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `100% (ø)` | `2 (?)` | || [ernal/operators/mixed/flowableconcatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwu2luz2xllmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || [nal/operators/mixed/observableconcatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbtaw5nbguuamf2yq) | `100% (ø)` | `2 (?)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `100% (ø)` | `2 (?)` | || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `535 (+20)` | :arrow_up: || [ernal/operators/mixed/flowableswitchmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwu2luz2xllmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || [rnal/operators/mixed/observableswitchmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbnyxlizs5qyxzh) | `100% (ø)` | `2 (?)` | || and [34 more](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5875?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5875?srcpr&elfooter) last update [d3ed269e6168be](https://codecovio/gh/reactivex/rxjava/pull/5875?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || reopening due to the travis/github service problems the build succeeded but the pr doesnt seem to pick up that state ||
5882.0,5886,1,0,0,0,1,1,1,1,2x: upgrade the algorithm of observabletimeout(time|selector) operators this pr improves the algorithms of the `observabletimeout(time)` and `observabletimeout(selector)` operators to match their `flowable` counterparts implemented in #5661in addition coverage of the `flowable` counterparts have been improved by synchronizing the unit testsnote that they were the last users of `observerfullarbiter` and `fullarbiterobserver` which are now removedcloses #5882 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5886?srcpr&elh1) report> merging [#5886](https://codecovio/gh/reactivex/rxjava/pull/5886?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/0ea2c957d753abd95bab725a29dcdb0356697a85?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `9948%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5886/graphs/treesvg?height150&width650&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5886?srcpr&eltree)```diff@@ coverage diff @@## 2x #5886 +/- ##+ coverage 9741% 9745% +004% + complexity 5976 5946 -30 files 657 655 -2 lines 43960 43877 -83 branches 6128 6109 -19 - hits 42824 42761 -63 + misses 346 343 -3 + partials 790 773 -17```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5886?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ternal/operators/observable/observabletimeoutjava](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvrpbwvvdxquamf2yq) | `100% (+347%)` | `3 (ø)` | :arrow_down: || [l/operators/observable/observabletimeouttimedjava](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvrpbwvvdxruaw1lzc5qyxzh) | `9915% (+555%)` | `3 (-1)` | :arrow_down: || [/io/reactivex/internal/functions/objecthelperjava](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl09iamvjdehlbhblci5qyxzh) | `9473% (-527%)` | `20% (-1%)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% (-364%)` | `9% (-1%)` | || [ernal/operators/observable/observableintervaljava](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuludgvydmfslmphdme) | `9642% (-358%)` | `3% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `913% (-29%)` | `2% (ø)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `9576% (-265%)` | `54% (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `923% (-257%)` | `6% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9583% (-25%)` | `2% (ø)` | || and [26 more](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5886?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5886?srcpr&elfooter) last update [0ea2c95e55dcd4](https://codecovio/gh/reactivex/rxjava/pull/5886?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5881.0,5887,1,0,0,0,0,1,1,1,2x: fix window(observable|callable) upstream handling this pr fixes the upstream handling in `observablewindow(observablesource)` and `observablewindow(callable )` operators to make sure if both the main output and the inner windows have been disposed the upstream is also disposedfixes #5881*remark:*there are a couple of `w ! null` checks showing up as partially covered in theory with the right interleaving `w` can become `null` but unfortunately the usual `testhelperrace()` testing is unlikely to trigger that case there would be a higher chance with 3 threads (one disposing one completing the main and one completing the inner window) but the current ci is effectively 15 - 2 cores/threads that tend to not produce a thorough interleaving # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5887?srcpr&elh1) report> merging [#5887](https://codecovio/gh/reactivex/rxjava/pull/5887?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/a267d7efdfe58b5727b5af22070ba3d953fe060a?srcpr&eldesc) will **increase** coverage by `007%`> the diff coverage is `9798%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5887/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5887?srcpr&eltree)```diff@@ coverage diff @@## 2x #5887 +/- ##+ coverage 9743% 9751% +007% - complexity 5946 5948 +2 files 655 655 lines 43877 43900 +23 branches 6109 6108 -1 + hits 42752 42807 +55 + misses 348 340 -8 + partials 777 753 -24```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5887?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [s/observable/observablewindowboundarysupplierjava](https://codecovio/gh/reactivex/rxjava/pull/5887/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvd0jvdw5kyxj5u3vwcgxpzxiuamf2yq) | `9795% (+832%)` | `2 (ø)` | :arrow_down: || [operators/observable/observablewindowboundaryjava](https://codecovio/gh/reactivex/rxjava/pull/5887/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvd0jvdw5kyxj5lmphdme) | `9921% (+1118%)` | `2 (ø)` | :arrow_down: || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5887/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `8888% (-532%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5887/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-523%)` | `2% (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/5887/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9117% (-393%)` | `2% (ø)` | || [java/io/reactivex/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5887/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9qdwjsaxnouhjvy2vzc29ylmphdme) | `9823% (-177%)` | `43% (-1%)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5887/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% (-107%)` | `5% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5887/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9596% (-09%)` | `59% (-1%)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5887/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9666% (-084%)` | `2% (ø)` | || [ernal/operators/flowable/flowabletimeouttimedjava](https://codecovio/gh/reactivex/rxjava/pull/5887/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzw91dfrpbwvklmphdme) | `9837% (-082%)` | `3% (ø)` | || and [15 more](https://codecovio/gh/reactivex/rxjava/pull/5887/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5887?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5887?srcpr&elfooter) last update [a267d7e1e476d3](https://codecovio/gh/reactivex/rxjava/pull/5887?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || the issue will get closed once this pr is merged but i dont see the flowable implementation here || the issue refers to `window(observable)` thus the `observable` variants ill post a separate pr once i checked the `flowable` variants || yes `flowablewindow(publisher)` is also incorrect ||
5881.0,5888,1,0,0,0,0,1,1,1,2x: fix flowablewindow(publisher|callable) upstream handling this pr fixes the upstream handling in `flowablewindow(publisher)` and `flowablewindow(callable )` operators to make sure if both the main output and the inner windows have been cancelled the upstream is also cancelledrelated: #5887 #5881in addition the jacoco code coverage has been updated to 080 mainly due to the [automatic filtering of difficult-to-impossible code paths](https://githubcom/jacoco/jacoco/releases/tag/v080) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5888?srcpr&elh1) report> merging [#5888](https://codecovio/gh/reactivex/rxjava/pull/5888?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/855153e7855f5aa1ebc3381126d0c6cc7cbf9628?srcpr&eldesc) will **increase** coverage by `006%`> the diff coverage is `9865%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5888/graphs/treesvg?height150&width650&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5888?srcpr&eltree)```diff@@ coverage diff @@## 2x #5888 +/- ##+ coverage 9749% 9755% +006% + complexity 5946 5941 -5 files 655 655 lines 43900 43862 -38 branches 6108 6100 -8 - hits 42799 42789 -10 + misses 339 328 -11 + partials 762 745 -17```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5888?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ators/flowable/flowablewindowboundarysupplierjava](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlv2luzg93qm91bmrhcnltdxbwbgllci5qyxzh) | `9874% (+723%)` | `2 (ø)` | :arrow_down: || [nal/operators/flowable/flowablewindowboundaryjava](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlv2luzg93qm91bmrhcnkuamf2yq) | `9928% (+755%)` | `2 (ø)` | :arrow_down: || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9391% (-524%)` | `2% (ø)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `9574% (-267%)` | `54% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% (-225%)` | `60% (ø)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9823% (-177%)` | `2% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9666% (-167%)` | `2% (ø)` | || [vex/internal/operators/flowable/flowablecachejava](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq2fjaguuamf2yq) | `9261% (-135%)` | `7% (ø)` | || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `961% (-132%)` | `6% (ø)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9893% (-107%)` | `2% (ø)` | || and [42 more](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5888?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5888?srcpr&elfooter) last update [855153e1b8de2d](https://codecovio/gh/reactivex/rxjava/pull/5888?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5894.0,5895,1,0,0,0,0,0,1,0,fix buffer() documentation to correctly describe onerror behaviour fixes #5894 i just copied the sentence from the fixed docs in 1x and updated to use observablesource/publisher naming # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5895?srcpr&elh1) report> merging [#5895](https://codecovio/gh/reactivex/rxjava/pull/5895?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/cb05a2614c11ebb7b86e723556f98e50546a50ed?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5895/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5895?srcpr&eltree)```diff@@ coverage diff @@## 2x #5895 +/- ##+ coverage 9792% 9794% +001% complexity 5985 5985 files 655 655 lines 43836 43836 branches 6072 6072 + hits 42926 42934 +8 + misses 278 277 -1 + partials 632 625 -7```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5895?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/5895/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `557 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5895/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `535 (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5895/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9084% (-393%)` | `2% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/5895/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9298% (-351%)` | `11% (ø)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5895/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `9623% (-269%)` | `54% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5895/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/5895/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-239%)` | `2% (ø)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5895/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [rnal/operators/observable/observableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/5895/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu9ic2vydmvpbi5qyxzh) | `9795% (-205%)` | `3% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5895/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || and [27 more](https://codecovio/gh/reactivex/rxjava/pull/5895/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5895?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5895?srcpr&elfooter) last update [cb05a268e56548](https://codecovio/gh/reactivex/rxjava/pull/5895?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5903.0,5904,1,0,0,0,0,1,1,1,2x: fix flowablesingleorerror()toflowable() not signalling nosuchelementexception when a `singleorerror` is followed by `toflowable()` the assembly process switches the `flowable->single` operator into a `flowable->flowable` operator implementing the `singleorerror` behavior (saving the back-and-forth type conversion) the backing implementation was shared with `singleelement` and as such did not properly handle the `orerror` case for an empty source the pr fixes the lack of `nosuchelementexception` in this casefixes #5903the `observable` variant doesnt have such optimization but the test has been converted to make sure `observable` is verified for this aspect in case the optimization is implemented with it in the future # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5904?srcpr&elh1) report> merging [#5904](https://codecovio/gh/reactivex/rxjava/pull/5904?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/5e5d5a27aa7b250ef1626dddf291c9243da2cc61?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5904/graphs/treesvg?srcpr&tokenwtcc2htjm2&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/5904?srcpr&eltree)```diff@@ coverage diff @@## 2x #5904 +/- ##+ coverage 9792% 9797% +004% - complexity 5987 5989 +2 files 655 655 lines 43925 43929 +4 branches 6087 6088 +1 + hits 43014 43039 +25 + misses 281 271 -10 + partials 630 619 -11```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5904?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ernal/operators/flowable/flowablesinglesinglejava](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2luz2xlu2luz2xllmphdme) | `9795% (ø)` | `3 (ø)` | :arrow_down: || [ex/internal/operators/flowable/flowablesinglejava](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2luz2xllmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || [ternal/operators/flowable/flowablesinglemaybejava](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2luz2xltwf5ymuuamf2yq) | `100% (ø)` | `3 (ø)` | :arrow_down: || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `2% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9565% (-261%)` | `2% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [internal/operators/observable/observablecachejava](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunhy2hllmphdme) | `937% (-158%)` | `9% (ø)` | || [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxauamf2yq) | `8658% (-128%)` | `3% (ø)` | || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `9894% (-106%)` | `2% (ø)` | || [/operators/maybe/maybeflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlrmxhde1hcel0zxjhymxlrmxvd2fibguuamf2yq) | `9754% (-082%)` | `2% (ø)` | || and [24 more](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5904?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5904?srcpr&elfooter) last update [5e5d5a29f1d846](https://codecovio/gh/reactivex/rxjava/pull/5904?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
590.0,5906,1,0,0,0,0,0,1,0,2x: add public constructor for testscheduler that takes the time - adds a time constructor to testscheduler- should i make it experimental or will it just be stable?fixes #5901 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5906?srcpr&elh1) report> merging [#5906](https://codecovio/gh/reactivex/rxjava/pull/5906?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/7646371a4960be54f015467a628dca6010026773?srcpr&eldesc) will **decrease** coverage by ` the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5906/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5906?srcpr&eltree)```diff@@ coverage diff @@## 2x #5906 +/- ##- coverage 9802% 9802% -001% - complexity 5993 5996 +3 files 655 655 lines 43924 43928 +4 branches 6086 6086 + hits 43056 43059 +3 - misses 256 266 +10 + partials 612 603 -9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5906?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [in/java/io/reactivex/schedulers/testschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc2nozwr1bgvycy9uzxn0u2nozwr1bgvylmphdme) | `100% (ø)` | `11 (ø)` | :arrow_down: || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `8993% (-78%)` | `6% (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% (-538%)` | `9% (ø)` | || [/io/reactivex/internal/functions/objecthelperjava](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl09iamvjdehlbhblci5qyxzh) | `9473% (-527%)` | `20% (-1%)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% (-26%)` | `6% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9739% (-174%)` | `2% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-12%)` | `2% (ø)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9893% (-107%)` | `2% (ø)` | || [main/java/io/reactivex/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvumvwbgf5u3viamvjdc5qyxzh) | `9748% (-063%)` | `50% (ø)` | || and [22 more](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5906?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5906?srcpr&elfooter) last update [764637121b4e30](https://codecovio/gh/reactivex/rxjava/pull/5906?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5916.0,5923,1,0,0,0,0,0,1,0,2x: fix javadoc warnings of buffer(publisher|callable) text is not allowed between ` ` and its child tagsfixes #5916 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5923?srcpr&elh1) report> merging [#5923](https://codecovio/gh/reactivex/rxjava/pull/5923?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/8a6bf14fc9a61f7c1c0016ca217be02ca86211d2?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5923/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5923?srcpr&eltree)```diff@@ coverage diff @@## 2x #5923 +/- ##+ coverage 9821% 9821% + (ø)` | `557 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5923/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `535 (ø)` | :arrow_down: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5923/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-598%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5923/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% (-523%)` | `2% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5923/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/5923/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/5923/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9528% (-189%)` | `3% (ø)` | || [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/5923/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxauamf2yq) | `8594% (-16%)` | `3% (ø)` | || [io/reactivex/subscribers/serializedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/5923/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3vic2nyawjlcnmvu2vyawfsaxplzfn1ynnjcmlizxiuamf2yq) | `9886% (-114%)` | `26% (-1%)` | || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5923/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `9894% (-106%)` | `2% (ø)` | || and [22 more](https://codecovio/gh/reactivex/rxjava/pull/5923/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5923?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5923?srcpr&elfooter) last update [8a6bf14a1d09e1](https://codecovio/gh/reactivex/rxjava/pull/5923?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5788.0,5924,1,0,0,0,0,0,1,0,2x: update singleflatmappublisher marble renamed the operator in the box for #5788![flatmappublisher](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleflatmappublisherpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5924?srcpr&elh1) report> merging [#5924](https://codecovio/gh/reactivex/rxjava/pull/5924?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/3a098c5e67274246b0b62018f0b92fd49b028359?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5924/graphs/treesvg?srcpr&tokenwtcc2htjm2&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/5924?srcpr&eltree)```diff@@ coverage diff @@## 2x #5924 +/- ## coverage 9821% 9821% + complexity 6020 6018 -2 files 656 656 lines 44040 44040 branches 6102 6102 hits 43255 43255 + misses 241 239 -2 - partials 544 546 +2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5924?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `142 (ø)` | :arrow_down: || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [activex/internal/schedulers/scheduledrunnablejava](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ty2hlzhvszwrsdw5uywjszs5qyxzh) | `9807% (-193%)` | `29% (-1%)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9744% (-171%)` | `11% (ø)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9849% (-151%)` | `3% (ø)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9528% (-142%)` | `3% (ø)` | || [java/io/reactivex/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9vbmljyxn0uhjvy2vzc29ylmphdme) | `988% (-12%)` | `67% (-1%)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0ae1hewjllmphdme) | `991% (-09%)` | `2% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9826% (-087%)` | `2% (ø)` | || and [15 more](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5924?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5924?srcpr&elfooter) last update [3a098c506d15bb](https://codecovio/gh/reactivex/rxjava/pull/5924?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
592.0,5928,1,0,0,0,0,1,1,0,2x: fix concatmapsingle & concatmapmaybe dispose-cleanup crash this pr fixes the accidental logical mistake in the `cancel`/`dispose` logic of the new `concatmapsingle` and `concatmapmaybe` operators of both `flowable` and `observable` where the internal queue cleanup should happen in a serialized fashion only which is the state when the work-in-progress counter changes from 0 to 1 ensured by a `` checkfixes #5927 this is severe enough to release **2112** as a hotfix version asap although the mistakes are in the newly introduced operators ive done a quick search for this pattern and doesnt happen in older code luckily also this is on the dispose path and doesnt really the performance in the normal operation mode (ie when data is allowed to flow through till the end without cancellation) || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5928?srcpr&elh1) report> merging [#5928](https://codecovio/gh/reactivex/rxjava/pull/5928?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/63572c792182f0c2446ceeb3262d843f28558459?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5928/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5928?srcpr&eltree)```diff@@ coverage diff @@## 2x #5928 +/- ##+ coverage 9822% 9825% +002% - complexity 6017 6019 +2 files 656 656 lines 44040 44040 branches 6102 6102 + hits 43260 43270 +10 + misses 237 231 -6 + partials 543 539 -4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5928?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ternal/operators/mixed/flowableconcatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5928/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwtwf5ymuuamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || [rnal/operators/mixed/observableconcatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5928/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbnyxlizs5qyxzh) | `100% (ø)` | `3 (ø)` | :arrow_down: || [nal/operators/mixed/observableconcatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5928/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbtaw5nbguuamf2yq) | `100% (ø)` | `3 (ø)` | :arrow_down: || [ernal/operators/mixed/flowableconcatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5928/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwu2luz2xllmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5928/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% (-323%)` | `9% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5928/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% (-272%)` | `2% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5928/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5928/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9304% (-214%)` | `5% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/5928/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [activex/internal/schedulers/scheduledrunnablejava](https://codecovio/gh/reactivex/rxjava/pull/5928/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ty2hlzhvszwrsdw5uywjszs5qyxzh) | `9807% (-193%)` | `29% (-1%)` | || and [26 more](https://codecovio/gh/reactivex/rxjava/pull/5928/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5928?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5928?srcpr&elfooter) last update [63572c72ffc416](https://codecovio/gh/reactivex/rxjava/pull/5928?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5933.0,5947,1,0,0,0,0,1,1,1,2x: fix groupby cancellation with evicting map factory fixes #5933when the outer stream is cancelled there may be evicted groups present in the queue to be completedive added code to complete the evicted groups in the `cancel` method as suggested by @akarnokd to protect against a race condition where the evictionaction is called just after the evicted groups are completed in `cancel` ive added a `cancelled` check to `evictionaction` however i am concerned about a race that ill place in the comments on the code below # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5947?srcpr&elh1) report> merging [#5947](https://codecovio/gh/reactivex/rxjava/pull/5947?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/43ceedf41839c7e2253c91f15204da8718b0c133?srcpr&eldesc) will **increase** coverage by `012%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5947/graphs/treesvg?srcpr&tokenwtcc2htjm2&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/5947?srcpr&eltree)```diff@@ coverage diff @@## 2x #5947 +/- ##+ coverage 9823% 9835% +012% - complexity 6169 6174 +5 files 665 665 lines 44717 44726 +9 branches 6205 6206 +1 + hits 43928 43992 +64 + misses 242 213 -29 + partials 547 521 -26```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5947?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [x/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/5947/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlr3jvdxbces5qyxzh) | `9551% (+011%)` | `3 (ø)` | :arrow_down: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5947/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-672%)` | `2% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5947/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5947/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0afnpbmdszs5qyxzh) | `9906% (-094%)` | `2% (ø)` | || [/operators/maybe/maybeflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5947/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlrmxhde1hcel0zxjhymxlrmxvd2fibguuamf2yq) | `9754% (-082%)` | `2% (ø)` | || [vex/internal/operators/parallel/parallelrunonjava](https://codecovio/gh/reactivex/rxjava/pull/5947/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsunvut24uamf2yq) | `9661% (-049%)` | `8% (ø)` | || [main/java/io/reactivex/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5947/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvumvwbgf5u3viamvjdc5qyxzh) | `9769% (-042%)` | `50% (ø)` | || [al/operators/observable/observablewindowtimedjava](https://codecovio/gh/reactivex/rxjava/pull/5947/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvd1rpbwvklmphdme) | `9073% (-028%)` | `4% (ø)` | || [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/5947/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxauamf2yq) | `8722% (ø)` | `3% (ø)` | :arrow_down: || [va/io/reactivex/processors/multicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5947/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9ndwx0awnhc3rqcm9jzxnzb3iuamf2yq) | `9867% (+044%)` | `84% (+1%)` | :arrow_up: || and [24 more](https://codecovio/gh/reactivex/rxjava/pull/5947/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5947?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5947?srcpr&elfooter) last update [43ceedfbd78a20](https://codecovio/gh/reactivex/rxjava/pull/5947?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || fixed imports || im thinking now that we need to complete evicted groups in the `onerror` and `oncomplete` methods as well (and deal with late arrivals to `evictedgroups`) || ive added a bit more code to complete evicted groups in the `onerror` and `oncomplete` methods as well ill keep pondering it a bit || excuse the delay busy times ill return to this soonish can close the pr and reopen later if desired || having a look now || ive redone this pr the test failure submitted in #5933 arose because `groupcount` needs to be decremented when groups are evicted from the map (im doing it when we complete evicted groups which happens before checking `groupcount` is 0 for the purpose of cancelling the source) we also needed to complete evictions when `cancel` is called as @akarnokd pointed outive also included a perf improvement (without stats!) where a volatile boolean `done` served both as post-terminal event protection and as a memory barrier in the `drain` method splitting those two functions into `boolean done` and `volatile boolean finished` means particularly that every source `onnext` emission will do one less volatile read for post-terminal event protection (and `oncomplete` and `onerror` benefit too) theres a slight allocation cost i suppose ||
5944.0,5948,1,0,0,0,0,0,1,0,"fix observable javadoc (#5944) * replace `dooncancel` by `doondispose` in observable javadocthank you for contributing to rxjava before pressing the ""create pull request"" button please consider the following points: - [x] please give a description about what and why you are contributing even if its trivialreplace `dooncancel` by `doondispose` in observable javadoc - [x] please include the issue list number(s) or other pr numbers in the description if you are contributing in response to those#5944 - [x] please include a reasonable set of unit tests if you contribute new code or change an existing one if you contribute an operator (if applicable) please make sure you have tests for working with an `empty` `just` `range` of values as well as an `error` source with and/or without backpressure and see if unsubscription/cancellation propagates correctlyjavadoc only # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5948?srcpr&elh1) report> merging [#5948](https://codecovio/gh/reactivex/rxjava/pull/5948?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/2770e4dd0ee663f66af4c198daa10367d6c2478b?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5948/graphs/treesvg?srcpr&width650&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/5948?srcpr&eltree)```diff@@ coverage diff @@## 2x #5948 +/- ##+ coverage 9825% 9828% +003% - complexity 6018 6020 +2 files 656 656 lines 44036 44036 branches 6100 6100 + hits 43266 43281 +15 + misses 230 221 -9 + partials 540 534 -6```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5948?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5948/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `535 (ø)` | :arrow_down: || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/5948/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-199%)` | `2% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5948/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% (-164%)` | `2% (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/5948/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9308% (-16%)` | `3% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5948/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9861% (-139%)` | `57% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5948/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `942% (-097%)` | `2% (ø)` | || [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/5948/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxauamf2yq) | `8626% (-096%)` | `3% (ø)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5948/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0ae1hewjllmphdme) | `991% (-09%)` | `2% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/5948/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9911% (-089%)` | `11% (ø)` | || [/operators/mixed/flowableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5948/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwq29tcgxldgfibguuamf2yq) | `9914% (-086%)` | `2% (ø)` | || and [22 more](https://codecovio/gh/reactivex/rxjava/pull/5948/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5948?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5948?srcpr&elfooter) last update [2770e4dc883e2b](https://codecovio/gh/reactivex/rxjava/pull/5948?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||"
5971.0,5972,1,0,0,0,0,1,1,0,2x: fix observableconcatmapsingle dropping upstream items the internal queue of `observableconcatmapsingle` was incorrectly the bounded one from its `flowable` counterpart causing it to drop upstream items if the current `single` was delayed the right queue for `observable`s is the `spsclinkedarrayqueue`added unit tests to both `concatmapsingle` and `concatmapmaybe` to verify the correct behaviorfixes: #5971 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5972?srcpr&elh1) report> merging [#5972](https://codecovio/gh/reactivex/rxjava/pull/5972?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/63877ae8499b8bc8152ec38246c4cbdf876b50be?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5972/graphs/treesvg?tokenwtcc2htjm2&width650&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5972?srcpr&eltree)```diff@@ coverage diff @@## 2x #5972 +/- ##+ coverage 9824% 9827% +003% + complexity 6018 6017 -1 files 656 656 lines 44037 44037 branches 6100 6100 + hits 43262 43279 +17 + misses 233 229 -4 + partials 542 529 -13```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5972?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nal/operators/mixed/observableconcatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5972/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbtaw5nbguuamf2yq) | `100% (ø)` | `3 (ø)` | :arrow_down: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/5972/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9189% (-541%)` | `9% (-1%)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5972/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5972/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9722% (-139%)` | `56% (-1%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/5972/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-12%)` | `2% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5972/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `982% (-09%)` | `59% (-1%)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5972/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `975% (-084%)` | `2% (ø)` | || [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/5972/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxauamf2yq) | `8658% (-064%)` | `3% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5972/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `8985% (-049%)` | `2% (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/5972/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9872% (-043%)` | `11% (ø)` | || and [17 more](https://codecovio/gh/reactivex/rxjava/pull/5972/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5972?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5972?srcpr&elfooter) last update [63877ae7fd542d](https://codecovio/gh/reactivex/rxjava/pull/5972?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
4856.0,5979,1,0,0,1,0,1,1,1,2x: add throttlelatest operator this pr adds the `throttlelatest` operator to `observable` and `flowable` also known as `conflate` (#4856): it is a combination of `throttlefirst` and `sample` whereby frequent items are sampled but the first item outside the sampling window will be emitted immediately:![throttlelatest](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/throttlelatestpng)![throttlelatest](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/throttlelatestsepng)resolves: #4856replaces: #5968 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5979?srcpr&elh1) report> merging [#5979](https://codecovio/gh/reactivex/rxjava/pull/5979?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/dc94f561abdc674462c42c5033e799340214d65c?srcpr&eldesc) will **increase** coverage by `01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5979/graphs/treesvg?srcpr&tokenwtcc2htjm2&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/5979?srcpr&eltree)```diff@@ coverage diff @@## 2x #5979 +/- ##+ coverage 982% 9831% +01% - complexity 6052 6062 +10 files 656 658 +2 lines 44077 44264 +187 branches 6118 6145 +27 + hits 43287 43517 +230 + misses 243 217 -26 + partials 547 530 -17```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5979?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/5979/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `561 (+4)` | :arrow_up: || [operators/observable/observablethrottlelatestjava](https://codecovio/gh/reactivex/rxjava/pull/5979/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvrocm90dgxltgf0zxn0lmphdme) | `100% (ø)` | `2 (?)` | || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5979/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `539 (+4)` | :arrow_up: || [nal/operators/flowable/flowablethrottlelatestjava](https://codecovio/gh/reactivex/rxjava/pull/5979/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvghyb3r0bgvmyxrlc3quamf2yq) | `100% (ø)` | `2 (?)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/pull/5979/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% (-364%)` | `9% (-1%)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5979/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/5979/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-239%)` | `2% (ø)` | || [rnal/operators/flowable/flowableskiplasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/5979/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2tpcexhc3ruaw1lzc5qyxzh) | `9591% (-205%)` | `2% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/5979/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5979/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9666% (-167%)` | `2% (ø)` | || and [28 more](https://codecovio/gh/reactivex/rxjava/pull/5979/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5979?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5979?srcpr&elfooter) last update [dc94f56074f7d6](https://codecovio/gh/reactivex/rxjava/pull/5979?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
601.0,6014,1,0,0,0,0,1,1,0,2x: fix & prevent null checks on primitives this pr removes the accidental null checks on primitives in two `observable` methods and adds a trap method to `objecthelper` to both highlight and fail the tests in case the null checks are still attempted the method is marked as deprecated so it will also show up in (eclipses) problems windowreplaces #6012 resolves #6013 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&elh1) report> merging [#6014](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/5f1ce20a1159a8464bfae2d8b2106039ac520eb2?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6014/graphs/treesvg?tokenwtcc2htjm2&width650&srcpr&height150)](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&eltree)```diff@@ coverage diff @@## 2x #6014 +/- ##+ coverage 9828% 983% +002% - complexity 6161 6162 +1 files 659 659 lines 44522 44519 -3 branches 6201 6201 + hits 43757 43763 +6 + misses 233 227 -6 + partials 532 529 -3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `539 (ø)` | :arrow_down: || [/io/reactivex/internal/functions/objecthelperjava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl09iamvjdehlbhblci5qyxzh) | `100% (ø)` | `22 (+1)` | :arrow_up: || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% (-323%)` | `9% (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% (-26%)` | `6% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9468% (-194%)` | `2% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9846% (-154%)` | `28% (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8954% (-131%)` | `2% (ø)` | || and [20 more](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&elfooter) last update [5f1ce203689fe5](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6012.0,6014,1,0,0,0,0,1,1,0,2x: fix & prevent null checks on primitives this pr removes the accidental null checks on primitives in two `observable` methods and adds a trap method to `objecthelper` to both highlight and fail the tests in case the null checks are still attempted the method is marked as deprecated so it will also show up in (eclipses) problems windowreplaces #6012 resolves #6013 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&elh1) report> merging [#6014](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/5f1ce20a1159a8464bfae2d8b2106039ac520eb2?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6014/graphs/treesvg?tokenwtcc2htjm2&width650&srcpr&height150)](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&eltree)```diff@@ coverage diff @@## 2x #6014 +/- ##+ coverage 9828% 983% +002% - complexity 6161 6162 +1 files 659 659 lines 44522 44519 -3 branches 6201 6201 + hits 43757 43763 +6 + misses 233 227 -6 + partials 532 529 -3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `539 (ø)` | :arrow_down: || [/io/reactivex/internal/functions/objecthelperjava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl09iamvjdehlbhblci5qyxzh) | `100% (ø)` | `22 (+1)` | :arrow_up: || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% (-323%)` | `9% (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% (-26%)` | `6% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9468% (-194%)` | `2% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9846% (-154%)` | `28% (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8954% (-131%)` | `2% (ø)` | || and [20 more](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&elfooter) last update [5f1ce203689fe5](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
601.0,6019,1,0,0,0,0,1,1,1,2x: fix singletakeuntil maybetakeuntil dispose behavior fix the dispose behavior of the `singletakeuntil` and `maybetakeuntil` operatorstests were also added to the other 3 `takeuntil` variants (for `completable` it is delegated to `amb`)fixes: #6018 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6019?srcpr&elh1) report> merging [#6019](https://codecovio/gh/reactivex/rxjava/pull/6019?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/b9f5ef81237b16cb3d30d404740fb3ebf0511ed3?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6019/graphs/treesvg?width650&srcpr&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/6019?srcpr&eltree)```diff@@ coverage diff @@## 2x #6019 +/- ##+ coverage 9827% 9828% + (ø)` | `2 (ø)` | :arrow_down: || [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/pull/6019/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6019/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9572% (-342%)` | `2% (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6019/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% (-26%)` | `6% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6019/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6019/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [java/io/reactivex/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6019/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9qdwjsaxnouhjvy2vzc29ylmphdme) | `9819% (-181%)` | `42% (-1%)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6019/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9666% (-167%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6019/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9402% (-15%)` | `2% (ø)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6019/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9528% (-142%)` | `3% (ø)` | || and [17 more](https://codecovio/gh/reactivex/rxjava/pull/6019/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6019?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6019?srcpr&elfooter) last update [b9f5ef8794cd19](https://codecovio/gh/reactivex/rxjava/pull/6019?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
601.0,6021,1,0,0,0,0,1,1,0,2x: singleflatmappublisher full implementation see discussion in #6015resolves: #6015 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6021?srcpr&elh1) report> merging [#6021](https://codecovio/gh/reactivex/rxjava/pull/6021?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/d24bfbd1e5e948de0e909304495aaea408b45117?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6021/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6021?srcpr&eltree)```diff@@ coverage diff @@## 2x #6021 +/- ##+ coverage 9829% 9829% + (ø)` | `2 (?)` | || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6021/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `146 (ø)` | :arrow_down: || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6021/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `2% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6021/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9646% (-354%)` | `11% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6021/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9722% (-278%)` | `56% (-2%)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6021/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9583% (-25%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6021/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9371% (-242%)` | `2% (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6021/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% (-216%)` | `9% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6021/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6021/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% (-107%)` | `5% (ø)` | || and [23 more](https://codecovio/gh/reactivex/rxjava/pull/6021/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6021?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6021?srcpr&elfooter) last update [d24bfbd377b6e2](https://codecovio/gh/reactivex/rxjava/pull/6021?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || ive made those changes ||
6015.0,6021,1,0,0,0,0,1,1,0,2x: singleflatmappublisher full implementation see discussion in #6015resolves: #6015 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6021?srcpr&elh1) report> merging [#6021](https://codecovio/gh/reactivex/rxjava/pull/6021?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/d24bfbd1e5e948de0e909304495aaea408b45117?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6021/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6021?srcpr&eltree)```diff@@ coverage diff @@## 2x #6021 +/- ##+ coverage 9829% 9829% + (ø)` | `2 (?)` | || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6021/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `146 (ø)` | :arrow_down: || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6021/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `2% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6021/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9646% (-354%)` | `11% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6021/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9722% (-278%)` | `56% (-2%)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6021/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9583% (-25%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6021/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9371% (-242%)` | `2% (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6021/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% (-216%)` | `9% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6021/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6021/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% (-107%)` | `5% (ø)` | || and [23 more](https://codecovio/gh/reactivex/rxjava/pull/6021/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6021?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6021?srcpr&elfooter) last update [d24bfbd377b6e2](https://codecovio/gh/reactivex/rxjava/pull/6021?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || ive made those changes ||
5988.0,6026,1,0,1,0,0,1,1,0,fix flowableblockingsubscribe is unbounded and can lead to oome create and bound new `blockingsubscribe` overloads to `buffersize`* create new overloads with `buffersize`* create a `boundedconsumer`* create a `boundedsubsciber`close: #5988 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6026?srcpr&elh1) report> merging [#6026](https://codecovio/gh/reactivex/rxjava/pull/6026?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/f3c88628440268c5cf8c0c880589d9ac411fd495?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `9444%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6026/graphs/treesvg?width650&height150&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6026?srcpr&eltree)```diff@@ coverage diff @@## 2x #6026 +/- ##- coverage 983% 9827% -004% - complexity 6175 6193 +18 files 665 666 +1 lines 44729 44801 +72 branches 6205 6206 +1 + hits 43973 44030 +57 - misses 222 233 +11 - partials 534 538 +4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6026?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ava/io/reactivex/internal/functions/functionsjava](https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl0z1bmn0aw9ucy5qyxzh) | `100% (ø)` | `36 (+1)` | :arrow_up: || [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `564 (+3)` | :arrow_up: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% (-428%)` | `10 (ø)` | || [ctivex/internal/subscribers/boundedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyawjlcnmvqm91bmrlzfn1ynnjcmlizxiuamf2yq) | `9259% (ø)` | `15 (?)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-598%)` | `2% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9646% (-354%)` | `11% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9722% (-278%)` | `56% (-2%)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% (-26%)` | `6% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || and [30 more](https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6026?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6026?srcpr&elfooter) last update [f3c88628bd5b13](https://codecovio/gh/reactivex/rxjava/pull/6026?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || also it would be great if you copied the unit tests that crash the callbacks so that the coverage on the new class gets very high || https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyawjlcnmvqm91bmrlzfn1ynnjcmlizxiuamf2yq || i created a `boundedsubscribertestjava` to trigger `consumer` and `action` exceptions but the code coverage remains unchanged did i miss a test? ||
6025.0,6036,1,0,0,0,0,1,1,0,2x: fix disposed lambdaobserver onerror to route to global error handler fix the behaviour of lambdaobserver when disposed to route to the global error handlerfixes #6025 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6036?srcpr&elh1) report> merging [#6036](https://codecovio/gh/reactivex/rxjava/pull/6036?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/f3c88628440268c5cf8c0c880589d9ac411fd495?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6036/graphs/treesvg?srcpr&tokenwtcc2htjm2&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/6036?srcpr&eltree)```diff@@ coverage diff @@## 2x #6036 +/- ##- coverage 983% 9828% -003% + complexity 6175 6172 -3 files 665 665 lines 44729 44730 +1 branches 6205 6205 - hits 43973 43964 -9 - misses 222 229 +7 - partials 534 537 +3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6036?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [o/reactivex/internal/observers/lambdaobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6036/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0xhbwjkyu9ic2vydmvylmphdme) | `100% (ø)` | `14 (ø)` | :arrow_down: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6036/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-598%)` | `2% (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6036/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `927% (-292%)` | `2% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6036/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6036/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6036/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% (-225%)` | `60% (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6036/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9702% (-213%)` | `11% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6036/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9861% (-139%)` | `57% (-1%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6036/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-12%)` | `2% (ø)` | || [java/io/reactivex/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6036/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9vbmljyxn0uhjvy2vzc29ylmphdme) | `988% (-12%)` | `67% (-1%)` | || and [21 more](https://codecovio/gh/reactivex/rxjava/pull/6036/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6036?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6036?srcpr&elfooter) last update [f3c8862309cd1e](https://codecovio/gh/reactivex/rxjava/pull/6036?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6043.0,6049,1,0,0,0,0,0,1,0,make it explicit that throttlewithtimout is an alias of debounce the documentation implies that these two methods are somewhat different fixing that confusion as discussed in #6043:- made the descriptions of these methods the same- mentioned that it is an alias in the first paragraphs of `throttlewithtimeout` javadoc comments- removed the links to third-party websites build warnings: please avoid dangling ` ` tags: https://travis-ciorg/reactivex/rxjava/builds/393285007#l476 || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6049?srcpr&elh1) report> merging [#6049](https://codecovio/gh/reactivex/rxjava/pull/6049?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/65c49561d90d2eb261bc91a512821ee57b076c16?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6049/graphs/treesvg?tokenwtcc2htjm2&width650&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6049?srcpr&eltree)```diff@@ coverage diff @@## 2x #6049 +/- ##- coverage 9827% 9825% -003% - complexity 6190 6192 +2 files 666 666 lines 44802 44802 branches 6206 6206 - hits 44030 44019 -11 - misses 236 239 +3 - partials 536 544 +8```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6049?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6049/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `564 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6049/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `539 (ø)` | :arrow_down: || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/pull/6049/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% (-364%)` | `9% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6049/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9227% (-339%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6049/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-299%)` | `2% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6049/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-239%)` | `2% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6049/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9456% (-218%)` | `2% (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6049/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% (-216%)` | `9% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6049/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6049/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9849% (-151%)` | `3% (ø)` | || and [21 more](https://codecovio/gh/reactivex/rxjava/pull/6049/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6049?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6049?srcpr&elfooter) last update [65c49564dc8b76](https://codecovio/gh/reactivex/rxjava/pull/6049?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5980.0,6052,1,0,0,0,0,0,1,0,#5980 made subscribeactual protected ### proposalchanged `subscribeactual` from `public` to `protected` as described in #5980### how i testedran tests locally please let me know if i missed part of the contributing guidelines 👼 fixes: #5980 /cc @vanniktech @artem-zinnatullin @davidmoten strictly speaking this is technically a breaking change on something that shouldnt be in use at all by external developers im fine with this change for 2115 || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6052?srcpr&elh1) report> merging [#6052](https://codecovio/gh/reactivex/rxjava/pull/6052?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/e6b852d5c3826421d351d8e02af890c2f99641a9?srcpr&eldesc) will **increase** coverage by `006%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6052/graphs/treesvg?height150&width650&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6052?srcpr&eltree)```diff@@ coverage diff @@## 2x #6052 +/- ##+ coverage 9824% 983% +006% - complexity 6188 6195 +7 files 666 666 lines 44802 44802 branches 6206 6206 + hits 44014 44044 +30 + misses 241 227 -14 + partials 547 531 -16```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6052?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ain/java/io/reactivex/subjects/publishsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/6052/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvuhvibglzafn1ymply3quamf2yq) | `100% (ø)` | `38 (ø)` | :arrow_down: || [java/io/reactivex/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6052/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9qdwjsaxnouhjvy2vzc29ylmphdme) | `100% (ø)` | `43 (ø)` | :arrow_down: || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6052/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% (-26%)` | `6% (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6052/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% (-216%)` | `9% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6052/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% (-214%)` | `5% (ø)` | || [rnal/operators/flowable/flowableskiplasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6052/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2tpcexhc3ruaw1lzc5qyxzh) | `9591% (-205%)` | `2% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6052/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9583% (-167%)` | `2% (ø)` | || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6052/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `9894% (-106%)` | `2% (ø)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6052/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9924% (-076%)` | `3% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6052/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9019% (-066%)` | `2% (ø)` | || and [23 more](https://codecovio/gh/reactivex/rxjava/pull/6052/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6052?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6052?srcpr&elfooter) last update [e6b852dc319722](https://codecovio/gh/reactivex/rxjava/pull/6052?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5806.0,6053,1,0,0,0,0,0,1,0,2x: add maybe marble diagrams 06/21/a resolved the following diagrams of #5806:#### amb: missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeambpng)#### ambarray: missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeambarraypng)#### concat(iterable): missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatipng)#### concat(publisher): missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatppng)#### concat(publisher int): missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatpnpng)#### concatarray: missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatarraypng)#### concatarraydelayerror: indicate error delayed 1 marble per source![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatarraydelayerrorpng)#### concatarrayeager: missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatarrayeagerpng)#### concatdelayerror(iterable): missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatdelayerroripng)#### concatdelayerror(publisher): missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatdelayerrorppng)#### concateager(iterable): missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcateageripng)#### concateager(publisher): missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcateagerppng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6053?srcpr&elh1) report> merging [#6053](https://codecovio/gh/reactivex/rxjava/pull/6053?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/cc186bc692de9a0a4b489db8cfdb24c798f6286f?srcpr&eldesc) will **decrease** coverage by `006%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6053/graphs/treesvg?srcpr&tokenwtcc2htjm2&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/6053?srcpr&eltree)```diff@@ coverage diff @@## 2x #6053 +/- ##- coverage 9834% 9827% -007% + complexity 6194 6191 -3 files 666 666 lines 44802 44802 branches 6206 6206 - hits 44059 44028 -31 - misses 222 232 +10 - partials 521 542 +21```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6053?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `171 (ø)` | :arrow_down: || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9275% (-387%)` | `2% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9646% (-354%)` | `11% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% (-272%)` | `2% (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% (-26%)` | `6% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% (-225%)` | `60% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% (-214%)` | `5% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [java/io/reactivex/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9qdwjsaxnouhjvy2vzc29ylmphdme) | `9819% (-181%)` | `42% (-1%)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6053?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6053?srcpr&elfooter) last update [cc186bc8fa6d9c](https://codecovio/gh/reactivex/rxjava/pull/6053?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
605.0,6060,1,0,0,0,0,1,1,0,2x: fix concatmap{single|maybe} null emission on dispose race this pr fixes a bug in all 4 specialized `concatmap` implementation that allows `null` to be emitted when the success signal of the inner source races with the dispose signal of the sequencelikely fixes: #6059 a very similar thing happened in #5927 just after a release but this bug was there between 2111 and 2114 || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6060?srcpr&elh1) report> merging [#6060](https://codecovio/gh/reactivex/rxjava/pull/6060?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/869c2aaefa2f6bd88265816992d5d1bf9fa10588?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6060/graphs/treesvg?height150&width650&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6060?srcpr&eltree)```diff@@ coverage diff @@## 2x #6060 +/- ##+ coverage 9826% 9829% +002% - complexity 6188 6194 +6 files 666 666 lines 44802 44806 +4 branches 6206 6206 + hits 44025 44041 +16 + misses 235 232 -3 + partials 542 533 -9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6060?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ternal/operators/mixed/flowableconcatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwtwf5ymuuamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || [ernal/operators/mixed/flowableconcatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwu2luz2xllmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || [nal/operators/mixed/observableconcatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbtaw5nbguuamf2yq) | `100% (ø)` | `3 (ø)` | :arrow_down: || [rnal/operators/mixed/observableconcatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbnyxlizs5qyxzh) | `100% (ø)` | `3 (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8692% (-916%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-747%)` | `2% (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% (-216%)` | `9% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% (-214%)` | `5% (ø)` | || [rnal/operators/flowable/flowableskiplasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2tpcexhc3ruaw1lzc5qyxzh) | `9591% (-205%)` | `2% (ø)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0ae1hewjllmphdme) | `991% (-09%)` | `2% (ø)` | || and [24 more](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6060?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6060?srcpr&elfooter) last update [869c2aa385e955](https://codecovio/gh/reactivex/rxjava/pull/6060?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5788.0,6074,1,0,0,0,0,0,1,0,add marble diagram to the singlenever method first of all im extremely grateful to open my first pr for rxjava i hope that ill be able to tick more of the marbles from #5788 but for now this should tick off the `never` operatorplease let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pr # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6074?srcpr&elh1) report> merging [#6074](https://codecovio/gh/reactivex/rxjava/pull/6074?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/909920a5f13f5acc6507d6de2b62370df7e86573?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6074/graphs/treesvg?height150&width650&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6074?srcpr&eltree)```diff@@ coverage diff @@## 2x #6074 +/- ##+ coverage 9824% 9828% +003% + complexity 6192 6190 -2 files 666 666 lines 44806 44806 branches 6206 6206 + hits 44020 44036 +16 + misses 239 236 -3 + partials 547 534 -13```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6074?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `146 (ø)` | :arrow_down: || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9583% (-278%)` | `55% (-2%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% (-225%)` | `60% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% (-214%)` | `5% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `942% (-145%)` | `2% (ø)` | || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `9894% (-106%)` | `2% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9829% (-086%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% (-066%)` | `2% (ø)` | || [ain/java/io/reactivex/subjects/unicastsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvvw5py2fzdfn1ymply3quamf2yq) | `9936% (-064%)` | `64% (-1%)` | || and [21 more](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6074?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6074?srcpr&elfooter) last update [909920a19cb68e](https://codecovio/gh/reactivex/rxjava/pull/6074?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || `https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleneverpng` || thank you! pr is updated :) ||
5788.0,6075,1,0,0,0,0,0,1,0,add marble diagram to the singlefilter method hopefully this should tick off the `filter` operator in #5788please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pralthough i had a doubt and wanted to double check operator `filter` returns `maybe` which essentially will call `onsuccess` or `oncomplete` by running junit tests i could observe that this is a behavior but if i use `testobserver` then both `assertvalue()` and `assertcomplete()` are invoked when there are elements that satisfy `filter` condition # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6075?srcpr&elh1) report> merging [#6075](https://codecovio/gh/reactivex/rxjava/pull/6075?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/e29b57b666954d37129da17430e592631ff17a79?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6075/graphs/treesvg?height150&width650&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6075?srcpr&eltree)```diff@@ coverage diff @@## 2x #6075 +/- ##- coverage 9825% 9823% -003% complexity 6191 6191 files 666 666 lines 44806 44806 branches 6206 6206 - hits 44026 44017 -9 - misses 234 242 +8 - partials 546 547 +1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6075?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6075/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `146 (ø)` | :arrow_down: || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6075/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `923% (-684%)` | `2% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6075/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9596% (-314%)` | `59% (-1%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6075/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-299%)` | `2% (ø)` | || [/operators/mixed/flowableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6075/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwq29tcgxldgfibguuamf2yq) | `9743% (-257%)` | `2% (ø)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6075/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6075/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6075/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9306% (-199%)` | `2% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6075/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6075/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% (-107%)` | `5% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6075/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6075?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6075?srcpr&elfooter) last update [e29b57b592fa5a](https://codecovio/gh/reactivex/rxjava/pull/6075?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || `https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlefilterpng``testobserver` implements multiple consumer types and an `onsuccess` is translated into `onnext`+`oncomplete` for an easier verification || pr is updated thanks for explanation 👍 ||
5788.0,6076,1,0,0,0,0,0,1,0,add marble diagrams to the singledelay method here are marbles for `delay` operator in #5788please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pr # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6076?srcpr&elh1) report> merging [#6076](https://codecovio/gh/reactivex/rxjava/pull/6076?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/c8a98520ee38152d8acce56bdb0a9e9127ccf7cc?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6076/graphs/treesvg?tokenwtcc2htjm2&srcpr&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/6076?srcpr&eltree)```diff@@ coverage diff @@## 2x #6076 +/- ##+ coverage 9826% 9827% + (ø)` | `146 (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6076/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% (-458%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6076/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `913% (-435%)` | `2% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6076/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9722% (-278%)` | `56% (-2%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6076/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9468% (-16%)` | `3% (ø)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6076/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9528% (-142%)` | `3% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6076/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-12%)` | `2% (ø)` | || [java/io/reactivex/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6076/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9vbmljyxn0uhjvy2vzc29ylmphdme) | `988% (-12%)` | `67% (-1%)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6076/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% (-106%)` | `3% (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6076/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `9489% (-073%)` | `2% (ø)` | || and [19 more](https://codecovio/gh/reactivex/rxjava/pull/6076/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6076?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6076?srcpr&elfooter) last update [c8a9852627af51](https://codecovio/gh/reactivex/rxjava/pull/6076?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || pr is updated with representation of error events || ive updated colors please take a look when you have time thanks! || https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledelaypnghttps://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledelayepnghttps://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledelayspnghttps://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledelaysepng || thanks updated ||
5788.0,6077,1,0,0,0,0,0,1,0,add marble diagram for singlehide operator this should complete `hide` operator in #5788please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pralthough i wasnt sure if i should represent somehow that `disposable` is hidden as well if so can you please tell me how to represent that on marble? # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6077?srcpr&elh1) report> merging [#6077](https://codecovio/gh/reactivex/rxjava/pull/6077?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/c8a98520ee38152d8acce56bdb0a9e9127ccf7cc?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6077/graphs/treesvg?width650&srcpr&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/6077?srcpr&eltree)```diff@@ coverage diff @@## 2x #6077 +/- ##+ coverage 9826% 9826% + (ø)` | `146 (ø)` | :arrow_down: || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6077/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `2% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6077/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% (-225%)` | `60% (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6077/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9744% (-171%)` | `11% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6077/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9861% (-139%)` | `57% (-1%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6077/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9521% (-107%)` | `3% (ø)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6077/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% (-106%)` | `3% (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6077/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0afnpbmdszs5qyxzh) | `9906% (-094%)` | `2% (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6077/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `9489% (-073%)` | `2% (ø)` | || [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6077/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxauamf2yq) | `8658% (-064%)` | `3% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6077/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6077?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6077?srcpr&elfooter) last update [c8a98521c179ae](https://codecovio/gh/reactivex/rxjava/pull/6077?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || i dont get it why is ci failing ive run tests locally and i dont get that error which ci is reporting || sometimes ci is a bit noisy and some of our millisecond-level tests can fail ive restarted the build ||
3708.0,6079,1,0,0,0,0,1,1,0,2x: add completabletakeuntil(completable) operator this pr adds the missing dedicated `takeuntil` operator to `completable`![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabletakeuntilcpng)previously the same effect could be achieved via the `ambwith` but there are two benefits of a dedicated operator:- easier to discover based on the `takeuntil` operator in other types- more direct implementation unlike `ambwith` which is built upon an n-ary `amb` operator with additional overheadthere was a feature request in #3708 some time ago but apparently the issue got closed off after `singletakeuntil` was implemented # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6079?srcpr&elh1) report> merging [#6079](https://codecovio/gh/reactivex/rxjava/pull/6079?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/fd76594dc7e19d4da889613f2d9afdf6043879b9?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6079/graphs/treesvg?tokenwtcc2htjm2&width650&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6079?srcpr&eltree)```diff@@ coverage diff @@## 2x #6079 +/- ##+ coverage 9823% 9826% +002% - complexity 6189 6194 +5 files 666 667 +1 lines 44806 44856 +50 branches 6206 6211 +5 + hits 44014 44076 +62 + misses 249 238 -11 + partials 543 542 -1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6079?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [s/completable/completabletakeuntilcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6079/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvgfrzvvudglsq29tcgxldgfibguuamf2yq) | `100% (ø)` | `2 (?)` | || [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6079/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `116 (+1)` | :arrow_up: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6079/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8888% (-458%)` | `2% (ø)` | || [/operators/mixed/flowableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6079/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwq29tcgxldgfibguuamf2yq) | `9743% (-257%)` | `2% (ø)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6079/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9774% (-226%)` | `3% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6079/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9456% (-218%)` | `2% (ø)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6079/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9575% (-142%)` | `3% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6079/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% (-107%)` | `5% (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6079/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0afnpbmdszs5qyxzh) | `9906% (-094%)` | `2% (ø)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6079/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0ae1hewjllmphdme) | `991% (-09%)` | `2% (ø)` | || and [16 more](https://codecovio/gh/reactivex/rxjava/pull/6079/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6079?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6079?srcpr&elfooter) last update [fd76594712a118](https://codecovio/gh/reactivex/rxjava/pull/6079?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || shouldnt there be a `completabletakeuntil(publisher)` operator too? `single` has overloads for both `publisher` and `completablesource` || @sailorpsy pr welcome ||
5788.0,6081,1,0,0,0,0,0,1,0,add marble diagrams for singlerepeat operators here are marbles for `repeat` `repeat(times)` and `repeatwhen` operator in #5788please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pri intentionally added two diagrams for `repeatwhen` as i would say its interesting case that people should be aware of**edit:**here are marbles`repeat` operator:![repeat](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/repeatpng)`repeat(count)` operator:![repeat with count](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/repeatcountpng)`repeatwhen` operator:![repeatwhen](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/repeatwhenpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6081?srcpr&elh1) report> merging [#6081](https://codecovio/gh/reactivex/rxjava/pull/6081?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/535ab3534851609e25750f50b9a1366f22a80ac9?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6081/graphs/treesvg?tokenwtcc2htjm2&width650&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6081?srcpr&eltree)```diff@@ coverage diff @@## 2x #6081 +/- ##- coverage 9825% 9824% -002% + complexity 6195 6194 -1 files 667 667 lines 44856 44856 branches 6211 6211 - hits 44074 44068 -6 - misses 237 244 +7 + partials 545 544 -1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6081?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6081/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `146 (ø)` | :arrow_down: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6081/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-672%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6081/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9082% (-435%)` | `2% (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6081/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `2% (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6081/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6081/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9361% (-266%)` | `3% (ø)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6081/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6081/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% (-225%)` | `60% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6081/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6081/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% (-106%)` | `3% (ø)` | || and [24 more](https://codecovio/gh/reactivex/rxjava/pull/6081/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6081?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6081?srcpr&elfooter) last update [535ab35a41b8ec](https://codecovio/gh/reactivex/rxjava/pull/6081?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || i see few errors timeline for flowables should end with error/complete event and should not continue beyond them ill update that tomorrow || it would be great if you linked the diagrams in the pr text || could you also add shadows to the marbles and x? || updated images and pr comment || - `https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlerepeatpng`- `https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlerepeatnpng`- `https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlerepeatwhenpng` || thanks! pr is now updated ||
5789.0,6083,1,0,0,0,0,0,1,0,2x: add completable marble diagrams (07/17a) this pr adds the following marble diagrams to `completable` operators (#5789):#### amb ambarray![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableambarraypng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableambpng)#### complete![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablecompletepng)#### concatarray concat![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableconcatarraypng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableconcatpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableconcatppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableconcatpnpng)#### defer![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabledeferpng)#### error![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableerrorpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableerrorfpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6083?srcpr&elh1) report> merging [#6083](https://codecovio/gh/reactivex/rxjava/pull/6083?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/535ab3534851609e25750f50b9a1366f22a80ac9?srcpr&eldesc) will **increase** coverage by `005%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6083/graphs/treesvg?tokenwtcc2htjm2&width650&srcpr&height150)](https://codecovio/gh/reactivex/rxjava/pull/6083?srcpr&eltree)```diff@@ coverage diff @@## 2x #6083 +/- ##+ coverage 9825% 9831% +005% + complexity 6195 6194 -1 files 667 667 lines 44856 44856 branches 6211 6211 + hits 44074 44098 +24 + misses 237 228 -9 + partials 545 530 -15```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6083?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `116 (ø)` | :arrow_down: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-672%)` | `2% (ø)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% (-364%)` | `9% (-1%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9308% (-32%)` | `3% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [java/io/reactivex/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9vbmljyxn0uhjvy2vzc29ylmphdme) | `988% (-12%)` | `67% (-1%)` | || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `9894% (-106%)` | `2% (ø)` | || [x/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlr3jvdxbces5qyxzh) | `9467% (-085%)` | `3% (ø)` | || [vex/internal/operators/parallel/parallelrunonjava](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsunvut24uamf2yq) | `9661% (-049%)` | `8% (ø)` | || [main/java/io/reactivex/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvumvwbgf5u3viamvjdc5qyxzh) | `9769% (-042%)` | `50% (ø)` | || and [20 more](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6083?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6083?srcpr&elfooter) last update [535ab35ada7ad3](https://codecovio/gh/reactivex/rxjava/pull/6083?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5788.0,6084,1,0,0,0,0,0,1,0,add marble diagram for singlerepeatuntil operator here is marble for `repeatuntil` operator in #5788![repeatuntil](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/repeatuntilpng)please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pr `https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlerepeatuntilpng` || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6084?srcpr&elh1) report> merging [#6084](https://codecovio/gh/reactivex/rxjava/pull/6084?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/53dd15fcb5c3e154b58ecb1768732d55aa49f5c9?srcpr&eldesc) will **decrease** coverage by `004%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6084/graphs/treesvg?height150&width650&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6084?srcpr&eltree)```diff@@ coverage diff @@## 2x #6084 +/- ##- coverage 9825% 982% -005% + complexity 6194 6193 -1 files 667 667 lines 44856 44858 +2 branches 6211 6211 - hits 44073 44054 -19 - misses 242 247 +5 - partials 541 557 +16```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6084?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `146 (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8954% (-458%)` | `2% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9596% (-314%)` | `59% (-1%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9583% (-278%)` | `55% (-2%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9646% (-266%)` | `11% (+1%)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% (-26%)` | `6% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `9548% (-194%)` | `6% (ø)` | || [io/reactivex/subscribers/serializedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3vic2nyawjlcnmvu2vyawfsaxplzfn1ynnjcmlizxiuamf2yq) | `9886% (-114%)` | `26% (-1%)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% (-107%)` | `5% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6084?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6084?srcpr&elfooter) last update [53dd15f836d0ea](https://codecovio/gh/reactivex/rxjava/pull/6084?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks! updated ||
5789.0,6085,1,0,0,0,0,1,1,0,2x: more completable marbles (+18) add completablefrommaybe this pr adds marble diagrams (#5789) to the following operators as well as adds the missing `completablefrommaybe` operator (`fromx` of other types were already there uses existing `maybeignoreelement`s underlying implementation)#### fromaction![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablefromactionpng)#### fromcallable![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablefromcallablepng)#### fromfuture![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablefromfuturepng)#### frommaybe![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablefrommaybepng)#### fromobservable![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablefromobservablepng)#### frompublisher![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablefrompublisherpng)#### fromsingle![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablefromsinglepng)#### mergearray & mergearraydelayerror![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablemergearraypng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablemergearraydelayerrorpng)#### merge(both `iterable` and `publisher` variants)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablemergepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablemergeppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablemergepnpng)#### mergedelayerror(both `iterable` and `publisher` variants)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablemergedelayerrorpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablemergedelayerrorppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablemergedelayerrorpnpng)#### never![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableneverpng)#### timer![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabletimerpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabletimerspng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6085?srcpr&elh1) report> merging [#6085](https://codecovio/gh/reactivex/rxjava/pull/6085?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/53dd15fcb5c3e154b58ecb1768732d55aa49f5c9?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6085/graphs/treesvg?tokenwtcc2htjm2&width650&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6085?srcpr&eltree)```diff@@ coverage diff @@## 2x #6085 +/- ##+ coverage 9825% 9829% +003% + complexity 6194 6193 -1 files 667 667 lines 44856 44858 +2 branches 6211 6211 + hits 44073 44091 +18 + misses 242 229 -13 + partials 541 538 -3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6085?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6085/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `117 (+1)` | :arrow_up: || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6085/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9596% (-314%)` | `59% (-1%)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6085/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% (-26%)` | `6% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6085/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [activex/internal/schedulers/scheduledrunnablejava](https://codecovio/gh/reactivex/rxjava/pull/6085/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ty2hlzhvszwrsdw5uywjszs5qyxzh) | `9807% (-193%)` | `29% (-1%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6085/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-12%)` | `2% (ø)` | || [io/reactivex/subscribers/serializedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/6085/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3vic2nyawjlcnmvu2vyawfsaxplzfn1ynnjcmlizxiuamf2yq) | `9886% (-114%)` | `26% (-1%)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6085/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% (-107%)` | `5% (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6085/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9361% (-107%)` | `3% (ø)` | || [ernal/operators/flowable/flowabletimeouttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6085/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzw91dfrpbwvklmphdme) | `9837% (-082%)` | `3% (ø)` | || and [20 more](https://codecovio/gh/reactivex/rxjava/pull/6085/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6085?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6085?srcpr&elfooter) last update [53dd15f34193f9](https://codecovio/gh/reactivex/rxjava/pull/6085?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5788.0,6086,1,0,0,0,0,0,1,0,single error operators marbles here are marbles for #5788 for `error(callable)`![errorcallable](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/errorcallablepng)for `error(throwable)` only added error event to be red:![errorthrowable](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/errorpng)for `onerrorreturn`![onerrorreturn](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/onerrorreturnpng)for `onerrorreturnitem`![onerrorreturnitem](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/onerrorreturnitempng)for `onerrorresumenext(singlesource)`![onerrorresumenext](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/onerrorresumenextpng)for `onerrorresumenext(function)`![onerrorresumenextfn](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/onerrorresumenextwithfnpng) for the `onerrorx` please indicate the normal case via different marble (ie the usual split diagram)btw you can save yourself a commit if you follow the following naming in the javadocs:`https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlexxxxpng`where `xxxx` is the name of the operator such as `error` and may contain argument indicator letters:- `s` is for `scheduler`s or `single`- `t` is for timed- `n` is for some numerical value- `f` is for function or `flowable`- `c` is for callable or `completable`- `p` is for `publisher`- `m` is for `maybe` or some other numerical valuethus the image naming of this pr will look like this:-`https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleerrorcpng`-`https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleerrorpng`-`https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleonerrorreturnpng`-`https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleonerrorreturnitempng`-`https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleonerrorresumenextpng`-`https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleonerrorresumenextfpng` || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6086?srcpr&elh1) report> merging [#6086](https://codecovio/gh/reactivex/rxjava/pull/6086?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/97ebd2c0ba3d1505631b844d2ff5000944be2ae6?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6086/graphs/treesvg?height150&srcpr&tokenwtcc2htjm2&width650)](https://codecovio/gh/reactivex/rxjava/pull/6086?srcpr&eltree)```diff@@ coverage diff @@## 2x #6086 +/- ##+ coverage 9825% 9826% +001% + complexity 6197 6195 -2 files 667 667 lines 44858 44858 branches 6211 6211 + hits 44076 44081 +5 + misses 239 231 -8 - partials 543 546 +3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6086?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6086/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `146 (ø)` | :arrow_down: || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6086/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6086/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% (-216%)` | `9% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6086/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-15%)` | `2% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6086/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9722% (-139%)` | `56% (-1%)` | || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6086/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `958% (-13%)` | `6% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6086/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-12%)` | `2% (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6086/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9521% (-107%)` | `3% (ø)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6086/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% (-106%)` | `3% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6086/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `982% (-09%)` | `59% (-1%)` | || and [16 more](https://codecovio/gh/reactivex/rxjava/pull/6086/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6086?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6086?srcpr&elfooter) last update [97ebd2c50265d1](https://codecovio/gh/reactivex/rxjava/pull/6086?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || images are now updated and pr as well with proper urls thanks for detailed explanation! ||
5788.0,6087,1,0,0,0,0,0,1,0,add marbles for singlefrom operators here are marbles for `fromcallable` `frompublisher` and `fromobservable` operators from #5788 marble for `fromcallable`![fromcallable](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/fromcallablepng)marble for `frompublisher`![frompublisher](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/frompublisherpng)marble for `fromobservable`![fromobservable](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/fromobservablepng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6087?srcpr&elh1) report> merging [#6087](https://codecovio/gh/reactivex/rxjava/pull/6087?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/97ebd2c0ba3d1505631b844d2ff5000944be2ae6?srcpr&eldesc) will **decrease** coverage by `006%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6087/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6087?srcpr&eltree)```diff@@ coverage diff @@## 2x #6087 +/- ##- coverage 9825% 9818% -007% + complexity 6197 6192 -5 files 667 667 lines 44858 44858 branches 6211 6211 - hits 44076 44046 -30 - misses 239 259 +20 - partials 543 553 +10```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6087?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `146 (ø)` | :arrow_down: || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `90% (-71%)` | `6% (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9596% (-314%)` | `59% (-1%)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9572% (-257%)` | `2% (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% (-216%)` | `9% (ø)` | || [rnal/operators/flowable/flowableskiplasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2tpcexhc3ruaw1lzc5qyxzh) | `9591% (-205%)` | `2% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% (-164%)` | `2% (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9468% (-16%)` | `3% (ø)` | || and [13 more](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6087?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6087?srcpr&elfooter) last update [97ebd2cb647e7c](https://codecovio/gh/reactivex/rxjava/pull/6087?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5788.0,6091,1,0,0,0,0,0,1,0,add marbles for singleamb operators here are operators for `amb` and `ambarray` from #5788 marble for `amb`:![amb](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/ambpng)marble for `ambarray`:![ambarray](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/ambarraypng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6091?srcpr&elh1) report> merging [#6091](https://codecovio/gh/reactivex/rxjava/pull/6091?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/4a744153e9cea4e32f4c88bc49893e0b13b85359?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6091/graphs/treesvg?tokenwtcc2htjm2&srcpr&height150&width650)](https://codecovio/gh/reactivex/rxjava/pull/6091?srcpr&eltree)```diff@@ coverage diff @@## 2x #6091 +/- ##- coverage 983% 9829% -002% complexity 6197 6197 files 667 667 lines 44858 44858 branches 6211 6211 - hits 44096 44091 -5 - misses 228 235 +7 + partials 534 532 -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6091?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6091/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `146 (ø)` | :arrow_down: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6091/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-672%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6091/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `8888% (-387%)` | `2% (ø)` | || [rnal/operators/flowable/flowableskiplasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6091/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2tpcexhc3ruaw1lzc5qyxzh) | `9591% (-205%)` | `2% (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6091/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9306% (-199%)` | `2% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6091/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [java/io/reactivex/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6091/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9qdwjsaxnouhjvy2vzc29ylmphdme) | `9819% (-181%)` | `42% (-1%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6091/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9861% (-139%)` | `57% (-1%)` | || [io/reactivex/subscribers/serializedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/6091/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3vic2nyawjlcnmvu2vyawfsaxplzfn1ynnjcmlizxiuamf2yq) | `9886% (-114%)` | `26% (-1%)` | || [ivex/internal/operators/maybe/maybemergearrayjava](https://codecovio/gh/reactivex/rxjava/pull/6091/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjltwvyz2vbcnjhes5qyxzh) | `9662% (-113%)` | `6% (ø)` | || and [19 more](https://codecovio/gh/reactivex/rxjava/pull/6091/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6091?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6091?srcpr&elfooter) last update [4a744158223050](https://codecovio/gh/reactivex/rxjava/pull/6091?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5788.0,6095,1,0,0,0,0,0,1,0,add marbles for singletimer singledefer and singletoxxx operators here are marbles for `defer` `timer(delay unit)` `timer(delay unit scheduler)` `toflowable` `tomaybe` `tofuture` operators in #5788 marble for `defer`:![defer](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/deferpng)marble for `timer(delay unit)`:![timer](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/timerpng)marble for `timer(delay unit scheduler)`:![timerscheduler](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/timerschedulerpng)marble for `tofuture` although for this one i believe we should add case when there is no event sent from single as there will be timeout exception thrown:![tofuture](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/tofuturepng)marble for `tomaybe`:![tomaybe](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/tomaybepng)marble for `toflowable` although here i didnt figured out what will happen if we request more than 1 event from flowable:![toflowable](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/toflowablepng) defer: i would have drawn it with a curly brace listing the 3 options below each other please add the subscribe() indicators as welltofuture: i indicate future with a 6-sided shape and indicate get() call and a return see completablefromfuture for an exampletoflowable: simply indicate request(n) any positive n has the same effect with this operator however an error is always pushed through even without a request just remove the request(1) from that side of the diagram || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6095?srcpr&elh1) report> merging [#6095](https://codecovio/gh/reactivex/rxjava/pull/6095?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/1aeac067ae3c9844f77d264e47de6a31f3eb1a53?srcpr&eldesc) will **decrease** coverage by ` the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6095/graphs/treesvg?tokenwtcc2htjm2&srcpr&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/6095?srcpr&eltree)```diff@@ coverage diff @@## 2x #6095 +/- ##- coverage 9826% 9826% -001% + complexity 6194 6190 -4 files 667 667 lines 44858 44861 +3 branches 6211 6213 +2 + hits 44081 44082 +1 misses 234 234 - partials 543 545 +2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6095?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6095/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `146 (ø)` | :arrow_down: || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/pull/6095/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% (-364%)` | `9% (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6095/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9084% (-327%)` | `2% (ø)` | || [ex/internal/subscriptions/subscriptionarbiterjava](https://codecovio/gh/reactivex/rxjava/pull/6095/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9tdwjzy3jpchrpb25bcmjpdgvylmphdme) | `9745% (-255%)` | `47% (-1%)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6095/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [o/reactivex/internal/schedulers/schedulerwhenjava](https://codecovio/gh/reactivex/rxjava/pull/6095/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ty2hlzhvszxjxagvulmphdme) | `9764% (-236%)` | `5% (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6095/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9702% (-213%)` | `11% (ø)` | || [activex/internal/schedulers/scheduledrunnablejava](https://codecovio/gh/reactivex/rxjava/pull/6095/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ty2hlzhvszwrsdw5uywjszs5qyxzh) | `9807% (-193%)` | `29% (-1%)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6095/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9629% (-186%)` | `38% (-1%)` | || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6095/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `958% (-162%)` | `6% (ø)` | || and [80 more](https://codecovio/gh/reactivex/rxjava/pull/6095/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6095?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6095?srcpr&elfooter) last update [1aeac06d337e9b](https://codecovio/gh/reactivex/rxjava/pull/6095?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || @umfsimke are you still around? || yes i have in plan to wrap it up today sorry for delay i was on vacation || @akarnokd are these ok now?im a bit confused by what you exactly had in mind for `defer` and `tofuture`please update me if they are fine as i do need to update image sizes in javadoc![tofuture](https://user-imagesgithubusercontentcom/10116857/43540948-631fcf64-95c9-11e8-970c-a2d4e8fa2e1cpng)![toflowable](https://user-imagesgithubusercontentcom/10116857/43540949-64817d58-95c9-11e8-9159-46153374f482png)![defer](https://user-imagesgithubusercontentcom/10116857/43540953-676efa5e-95c9-11e8-8678-47e6cb4d7a14png) || yes these are okay || thanks updated javadoc ||
5789.0,6097,1,0,0,0,0,0,1,0,2x: add missing completable marbles (+19 07/19a) this pr add even more missing marbles to `completable` (tracked by #5789):#### delay![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabledelaypng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabledelayspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabledelaysbpng)#### doonx![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabledooncompletepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabledoondisposepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabledooneventpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabledoonsubscribepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabledoonterminatepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabledoonerrorpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabledoafterterminatepng)#### dofinally![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabledofinallypng)#### onerrorcomplete![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableonerrorcompletepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableonerrorcompletefpng)#### onerrorresumenext![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableonerrorresumenextpng)#### onterminatedetach![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableonterminatedetachpng)#### mergewith![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablemergewithpng)#### concatwith![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableconcatwithpng)#### observeon![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableobserveonpng)#### hide![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablehidepng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6097?srcpr&elh1) report> merging [#6097](https://codecovio/gh/reactivex/rxjava/pull/6097?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/27c63b6a4c2074657aed4e7ee6e39a52173bbed5?srcpr&eldesc) will **decrease** coverage by `006%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6097/graphs/treesvg?tokenwtcc2htjm2&width650&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6097?srcpr&eltree)```diff@@ coverage diff @@## 2x #6097 +/- ##- coverage 983% 9823% -007% - complexity 6196 6199 +3 files 667 667 lines 44862 44862 branches 6213 6213 - hits 44102 44071 -31 - misses 231 242 +11 - partials 529 549 +20```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6097?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6097/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `117 (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6097/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% (-981%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6097/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-448%)` | `2% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6097/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9572% (-257%)` | `2% (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6097/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9744% (-128%)` | `11% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6097/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% (-107%)` | `5% (ø)` | || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6097/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `9894% (-106%)` | `2% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6097/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `982% (-09%)` | `59% (-1%)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6097/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0ae1hewjllmphdme) | `991% (-09%)` | `2% (ø)` | || [l/operators/observable/observabletimeouttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6097/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvrpbwvvdxruaw1lzc5qyxzh) | `9915% (-085%)` | `3% (ø)` | || and [14 more](https://codecovio/gh/reactivex/rxjava/pull/6097/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6097?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6097?srcpr&elfooter) last update [27c63b6982028c](https://codecovio/gh/reactivex/rxjava/pull/6097?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5789.0,6098,1,0,0,0,0,0,1,0,2x: several more completable marbles (7/19b) this pr adds a couple of more marble diagrams to `completable` (#5789):#### subscribeon![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablesubscribeonpng)#### unsubscribeon![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableunsubscribeonpng)#### tosingle tosingledefault![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabletosinglepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabletosingledefaultpng)#### toflowable![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabletoflowablepng)#### tomaybe![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabletomaybepng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6098?srcpr&elh1) report> merging [#6098](https://codecovio/gh/reactivex/rxjava/pull/6098?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/8b9740840f21d131595dac2115241b1f739b03f2?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6098/graphs/treesvg?tokenwtcc2htjm2&srcpr&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/6098?srcpr&eltree)```diff@@ coverage diff @@## 2x #6098 +/- ##- coverage 9827% 9825% -003% - complexity 6194 6197 +3 files 667 667 lines 44862 44862 branches 6213 6213 - hits 44087 44078 -9 - misses 232 234 +2 - partials 543 550 +7```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6098?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `117 (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8954% (-589%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9033% (-387%)` | `2% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% (-321%)` | `5% (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% (-216%)` | `9% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-12%)` | `2% (ø)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% (-106%)` | `3% (ø)` | || [ernal/operators/flowable/flowabletimeouttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzw91dfrpbwvklmphdme) | `9837% (-082%)` | `3% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9722% (-07%)` | `56% (ø)` | || [vex/internal/operators/flowable/flowablecachejava](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq2fjaguuamf2yq) | `9794% (-069%)` | `10% (-1%)` | || and [20 more](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6098?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6098?srcpr&elfooter) last update [8b97408f0b83c7](https://codecovio/gh/reactivex/rxjava/pull/6098?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5789.0,6101,1,0,0,0,0,0,1,0,2x: final set of missing completable marbles (+26) this pr contains the final set of missing `completable` marbles (#5789):#### repeat![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablerepeatpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablerepeatnpng)-------------------------#### repeatuntil![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablerepeatuntilpng)-------------------------#### repeatwhen![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablerepeatwhenpng)-------------------------#### retry![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableretrypng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableretrynpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableretryfpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableretryffpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableretrynfpng)-------------------------#### retrywhen![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableretrywhenpng)-------------------------#### startwith![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablestartwithcpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablestartwithopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablestartwithppng)-------------------------#### timeout![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabletimeoutpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabletimeoutspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabletimeoutcpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabletimeoutscpng)-------------------------#### create![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablecreatepng)-------------------------#### unsafecreate![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableunsafecreatepng)-------------------------#### lift![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableliftpng)-------------------------#### subscribe![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablesubscribepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablesubscribefpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablesubscribeffpng)-------------------------#### subscribewith![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablesubscribewithpng)-------------------------#### test![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabletestpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabletestbpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6101?srcpr&elh1) report> merging [#6101](https://codecovio/gh/reactivex/rxjava/pull/6101?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/ca5119cde5b5761d12d0c8071f17f1b2406971c4?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6101/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6101?srcpr&eltree)```diff@@ coverage diff @@## 2x #6101 +/- ##- coverage 983% 9829% -002% complexity 6197 6197 files 667 667 lines 44862 44862 branches 6213 6213 - hits 44100 44095 -5 - misses 228 230 +2 - partials 534 537 +3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6101?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6101/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `117 (ø)` | :arrow_down: || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6101/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6101/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9346% (-262%)` | `2% (ø)` | || [rnal/operators/flowable/flowableskiplasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6101/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2tpcexhc3ruaw1lzc5qyxzh) | `9591% (-205%)` | `2% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6101/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6101/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [java/io/reactivex/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6101/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9qdwjsaxnouhjvy2vzc29ylmphdme) | `9819% (-181%)` | `42% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6101/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `942% (-097%)` | `2% (ø)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6101/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0ae1hewjllmphdme) | `991% (-09%)` | `2% (ø)` | || [ernal/operators/flowable/flowabletimeouttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6101/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzw91dfrpbwvklmphdme) | `9837% (-082%)` | `3% (ø)` | || and [15 more](https://codecovio/gh/reactivex/rxjava/pull/6101/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6101?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6101?srcpr&elfooter) last update [ca5119c7282477](https://codecovio/gh/reactivex/rxjava/pull/6101?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5788.0,6137,1,0,0,0,0,0,1,0,2x: add marbles for singleconcat operator here are marbles for `concat(iterable)` `concat(publisher)` `concat(publisher prefetch)` `concat(observable)` `concat(source1 source2)` `concat(source1 source2 source3)` `concat(source1 source2 source3 source4)` and `concatarray` operators that should close them at #5788 marble for `concat(iterable)`![concatiterable](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/concatiterablepng)marble for `concat(publisher)`![concatpublisher](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/concatpublisherpng)marble for `concat(publisher prefetch)`![concatpublishern](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/concatpublisherprefetchpng)marble for `concat(observable)`![concatobservable](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/concatobservablepng)marble for `concat(source1 source2)`![concat2](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/concattwopng)marble for `concat(source1 source2 source3)`![concat3](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/concatthreepng)marble for `concat(source1 source2 source3 source4)`![concat4](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/concatfourpng)marble for `concatarray`![concatarray](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/concatarraypng)please pay attention to file names in javadoc as i was not sure how to name `concat(iterable)` so ive added at the end `i` for `concat(observable)` ive added `o` for `concat(source1 source2 source3)` and `concat(source1 source2 source3 source4)` ive used `n` and `m` as they are numerical valuesalso is there an error in `concat(publisher)` and `concat(publisher prefetch)` with `request()` commands? i did used as a reference `completableconcat(publisher)` marble but i do not understand why do we have `request(1)` after first event as we already requested prefetching of multiple ones is it because others are still not produced?thanks # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6137?srcpr&elh1) report> merging [#6137](https://codecovio/gh/reactivex/rxjava/pull/6137?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/c146374e210caf0b4982825034c0ec51d5505c00?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6137/graphs/treesvg?tokenwtcc2htjm2&srcpr&height150&width650)](https://codecovio/gh/reactivex/rxjava/pull/6137?srcpr&eltree)```diff@@ coverage diff @@## 2x #6137 +/- ##+ coverage 9825% 9826% +001% + complexity 6197 6194 -3 files 667 667 lines 44853 44853 branches 6213 6213 + hits 44069 44074 +5 + misses 237 236 -1 + partials 547 543 -4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6137?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6137/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `146 (ø)` | :arrow_down: || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/pull/6137/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% (-364%)` | `9% (-1%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6137/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9722% (-278%)` | `56% (-2%)` | || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6137/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `9894% (-106%)` | `2% (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6137/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0afnpbmdszs5qyxzh) | `9906% (-094%)` | `2% (ø)` | || [/operators/maybe/maybeflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6137/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlrmxhde1hcel0zxjhymxlrmxvd2fibguuamf2yq) | `9754% (-082%)` | `2% (ø)` | || [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6137/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxauamf2yq) | `8722% (-064%)` | `3% (ø)` | || [x/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6137/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlr3jvdxbces5qyxzh) | `9551% (-057%)` | `3% (ø)` | || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6137/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `9741% (-033%)` | `6% (ø)` | || [x/internal/operators/flowable/flowableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6137/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcc5qyxzh) | `8947% (-027%)` | `4% (ø)` | || and [12 more](https://codecovio/gh/reactivex/rxjava/pull/6137/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6137?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6137?srcpr&elfooter) last update [c1463744f5004b](https://codecovio/gh/reactivex/rxjava/pull/6137?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || - please color the marbles in the sequences differently to each other- since some inputs and outputs are `observable`s and `flowable`s their terminal event idicator is a pass-throug arrow: `----|----->` and `----x----->` please update these diagrams accordingly- use `singleconcato3png` and `singleconcato4png` - the `x` in the middle of the left side of `concat(publisher prefetch)` is misaligned- multiple requests are there to reinforce those are `flowable`s and thus more requests may come even if there was some initial request before keep them in the diagram || thanks for explanation!marbles are now updated per comments || the `concat(publisher)` and `concat(publisher int)` diagrams input side and inside the box are still `---->|` || based on a comment i thought that only `observable`s and `flowable`s should be updated those images are now updated with `----|---->` ||
5788.0,6141,1,0,0,0,0,0,1,0,add marble diagrams for various single operators here are marble diagrams for various single operators that will close some of the #5788 marble for `concateager(publisher)`![concateeagerp](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/concateagerpublisherpng)marble for `concateager(iterable)`![concateeageri](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/concateageriterablepng)marble for `create`![create](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/createpng)marble for `ambwith`![ambwith](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/ambwithpng)marble for `equals`![equals](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/equalspng)marble for `merge(source1 source2)`![merge](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/mergetwopng)marble for `merge(source1 source2 source3)`![mergethree](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/mergethreepng)marble for `merge(source1 source2 source3 source4)`![mergefour](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/mergefourpng)marble for `merge(singlesource )`![mergesinglesource](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/mergesinglesourcepng)marble for `mergewith`![mergewith](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/mergewithpng)marble for `doafterterminate`![doafterterminate](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/doafterterminatepng)marble for `to`![to](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/topng)marble for `as`![as](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/aspng)marble for `compose`![compose](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/composepng)marble for `doaftersuccess`![doaftersuccess](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/doaftersuccesspng)marble for `merge(publisher)`![mergepublisher](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/mergepublisherpng)marble for `merge(iterable)`![mergeiterable](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/mergeiterablepng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6141?srcpr&elh1) report> merging [#6141](https://codecovio/gh/reactivex/rxjava/pull/6141?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/579e90dc21937b900877a8baf3918cdca22d3a91?srcpr&eldesc) will **decrease** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6141/graphs/treesvg?width650&srcpr&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/6141?srcpr&eltree)```diff@@ coverage diff @@## 2x #6141 +/- ##- coverage 9828% 9823% -005% complexity 6193 6193 files 667 667 lines 44853 44853 branches 6213 6213 - hits 44082 44061 -21 - misses 235 244 +9 - partials 536 548 +12```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6141?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `146 (ø)` | :arrow_down: || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `2% (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9646% (-354%)` | `11% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9572% (-342%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9323% (-339%)` | `2% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9596% (-314%)` | `59% (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9019% (-262%)` | `2% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `983% (-17%)` | `2% (ø)` | || and [21 more](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6141?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6141?srcpr&elfooter) last update [579e90d7a6b390](https://codecovio/gh/reactivex/rxjava/pull/6141?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || @akarnokd `create` marble is not valid i havent pushed correct version to the repo sorry for thishere is proper `create`:![create](https://rawgithubusercontentcom/umfsimke/rxjava/6a8d7b43f255f84727376fb34763d47ba7b5410d/images/createpng) || thanks updated the image in the repo http://reactivexio/rxjava/2x/javadoc/snapshot/io/reactivex/singlehtml#create-ioreactivexsingleonsubscribe- ||
6082.0,6143,1,0,0,0,0,0,1,0,2x: add concatarrayeagerdelayerror operator (expose feature) this pr exposes the existing `delayerror` capability of the `concatmapeager` operator as `concatarrayeagerdelayerror` for both `flowable` and `observable`in addition the `concatarrayeager` and these new methods receive marble diagrams:#### observable![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/concatarrayeagerpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/concatarrayeagernnpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/concatarrayeagerdelayerrorpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/concatarrayeagerdelayerrornnpng)#### flowable![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableconcatarrayeagerpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableconcatarrayeagernnpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableconcatarrayeagerdelayerrorpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableconcatarrayeagerdelayerrornnpng)resolves: #6082 *(sidenote: one of the validators had to be adjusted due to false positive it produced)* # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6143?srcpr&elh1) report> merging [#6143](https://codecovio/gh/reactivex/rxjava/pull/6143?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/3562dfc5d2529efa5de41a7b8689f6847b3fb616?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6143/graphs/treesvg?height150&width650&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6143?srcpr&eltree)```diff@@ coverage diff @@## 2x #6143 +/- ##- coverage 9826% 9825% -002% - complexity 6191 6192 +1 files 667 667 lines 44853 44857 +4 branches 6213 6213 - hits 44077 44074 -3 - misses 239 241 +2 - partials 537 542 +5```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6143?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `566 (+2)` | :arrow_up: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `541 (+2)` | :arrow_up: || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% (-364%)` | `9% (-1%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9583% (-278%)` | `55% (-2%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9084% (-262%)` | `2% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% (-164%)` | `2% (ø)` | || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `9894% (-106%)` | `2% (ø)` | || [ernal/operators/flowable/flowabletimeouttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzw91dfrpbwvklmphdme) | `9837% (-082%)` | `3% (ø)` | || and [21 more](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6143?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6143?srcpr&elfooter) last update [3562dfc34b88a4](https://codecovio/gh/reactivex/rxjava/pull/6143?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
614.0,6145,1,0,0,0,0,1,1,0,2x: fix boundary fusion of concatmap and publish operator this pr fixes the lack of boundary fusion marker in the `concatmap` and `publish` operators that can break the thread-confinement expectation when using `observeon` upstream and a thread-sensitive operator:```javasourceobserveon(scheduler) map(/* some thread-sensitive operation */) publish() // or concatmap```by default these operators may call `poll` from any of the participating threads which would otherwise dequeue `observeon` and execute `map` on that threadthe fix adds the necessary flag to both operators `onsubscribe` logic for a temporary workaround one should use `hide()` before such operators to make sure fusion doesnt happenfixes: #6144 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6145?srcpr&elh1) report> merging [#6145](https://codecovio/gh/reactivex/rxjava/pull/6145?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/1ad606b71f3ebb45282cabe0c7377b0908f3b582?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6145/graphs/treesvg?tokenwtcc2htjm2&srcpr&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/6145?srcpr&eltree)```diff@@ coverage diff @@## 2x #6145 +/- ##- coverage 9824% 9823% -002% - complexity 6195 6198 +3 files 667 667 lines 44857 44857 branches 6213 6213 - hits 44072 44067 -5 - misses 242 256 +14 + partials 543 534 -9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6145?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6145/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9957% (+255%)` | `11 (ø)` | :arrow_down: || [internal/operators/flowable/flowableconcatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6145/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq29uy2f0twfwlmphdme) | `9812% (+037%)` | `6 (ø)` | :arrow_down: || [/internal/operators/flowable/flowabledooneachjava](https://codecovio/gh/reactivex/rxjava/pull/6145/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrg9pbkvhy2guamf2yq) | `9534% (-466%)` | `3% (ø)` | || [rnal/operators/flowable/flowablecombinelatestjava](https://codecovio/gh/reactivex/rxjava/pull/6145/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq29tymluzuxhdgvzdc5qyxzh) | `8884% (-399%)` | `8% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6145/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `8985% (-29%)` | `2% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6145/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9646% (-266%)` | `11% (+1%)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6145/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [java/io/reactivex/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6145/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9qdwjsaxnouhjvy2vzc29ylmphdme) | `9819% (-181%)` | `42% (-1%)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6145/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9528% (-142%)` | `3% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6145/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9761% (-12%)` | `2% (ø)` | || and [25 more](https://codecovio/gh/reactivex/rxjava/pull/6145/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6145?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6145?srcpr&elfooter) last update [1ad606b547868f](https://codecovio/gh/reactivex/rxjava/pull/6145?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6151.0,6152,1,0,0,0,0,0,1,0,2x: clarify testobserverassertvalueset in docs and via tests clarify that `{testobserver|testsubscriber}assertvalueset` checks for all received items to be in the provided set but that set can contain additional elements that could have been received unit tests have been added to demonstrate the expected behaviorresolves: #6151 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6152?srcpr&elh1) report> merging [#6152](https://codecovio/gh/reactivex/rxjava/pull/6152?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/0e7b8eaa61f9cac0538ef6a59bfbd0b119b87732?srcpr&eldesc) will **decrease** coverage by `006%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6152/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6152?srcpr&eltree)```diff@@ coverage diff @@## 2x #6152 +/- ##- coverage 9826% 982% -007% + complexity 6199 6197 -2 files 667 667 lines 44857 44857 branches 6213 6213 - hits 44078 44051 -27 - misses 246 263 +17 - partials 533 543 +10```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6152?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/java/io/reactivex/observers/basetestconsumerjava](https://codecovio/gh/reactivex/rxjava/pull/6152/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvb2jzzxj2zxjzl0jhc2vuzxn0q29uc3vtzxiuamf2yq) | `100% (ø)` | `116 (ø)` | :arrow_down: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6152/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% (-466%)` | `10% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6152/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `8888% (-435%)` | `2% (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6152/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `2% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6152/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9646% (-354%)` | `11% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6152/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6152/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9528% (-142%)` | `3% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6152/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9861% (-139%)` | `57% (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6152/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8823% (-131%)` | `2% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6152/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% (-107%)` | `5% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6152/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6152?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6152?srcpr&elfooter) last update [0e7b8ea2dd535b](https://codecovio/gh/reactivex/rxjava/pull/6152?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
580.0,6155,1,0,0,0,0,0,1,0,2x: fix marble of maybeflatmap events to maybesource fix the marble diagram of the event-mapping [`maybeflatmap`](http://reactivexio/rxjava/2x/javadoc/io/reactivex/maybehtml#flatmap-ioreactivexfunctionsfunction-ioreactivexfunctionsfunction-javautilconcurrentcallable-) operator:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeflatmapmmmpng)tracked in: #5806 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6155?srcpr&elh1) report> merging [#6155](https://codecovio/gh/reactivex/rxjava/pull/6155?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/a16f63fa9030dc7ed4a5b9e2b8c948e02d92e557?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6155/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6155?srcpr&eltree)```diff@@ coverage diff @@## 2x #6155 +/- ##+ coverage 982% 9822% +001% + complexity 6198 6197 -1 files 667 667 lines 44857 44857 branches 6213 6213 + hits 44053 44059 +6 + misses 259 255 -4 + partials 545 543 -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6155?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `171 (ø)` | :arrow_down: || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9646% (-354%)` | `11% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% (-272%)` | `2% (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9361% (-266%)` | `3% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [java/io/reactivex/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9qdwjsaxnouhjvy2vzc29ylmphdme) | `9819% (-181%)` | `42% (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9281% (-131%)` | `2% (ø)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% (-106%)` | `3% (ø)` | || and [19 more](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6155?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6155?srcpr&elfooter) last update [a16f63fcee20b9](https://codecovio/gh/reactivex/rxjava/pull/6155?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
614.0,6167,1,0,0,0,0,1,1,0,2x: make observeon not let workerdispose() called prematurely some operators may call `dispose()`/`cancel` from `onerror`/`oncomplete` which could trigger a permature call to `workerdispose()` that was about to happen anyway this pr prevents this by moving the operator into its disposed/cancelled state before signaling the terminal event thus a downstream `cancel()`/`dispose()` call wont trigger this premature cleanupsuch premature cleanups may cause unwanted `schedulersio()` reuse in some scenariosrelated: #6146 there are 2 x 2 tests that were relying on a race that the previous behavior always allowed ive updated those tests to avoid the inherent termination-cancel race in them || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6167?srcpr&elh1) report> merging [#6167](https://codecovio/gh/reactivex/rxjava/pull/6167?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/592b991dd8d148351fe4d52de6e8512f274285de?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6167/graphs/treesvg?srcpr&tokenwtcc2htjm2&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/6167?srcpr&eltree)```diff@@ coverage diff @@## 2x #6167 +/- ##- coverage 9823% 9821% -003% - complexity 6198 6199 +1 files 667 667 lines 44860 44879 +19 branches 6214 6214 + hits 44070 44076 +6 - misses 249 259 +10 - partials 541 544 +3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6167?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [internal/operators/flowable/flowableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/6167/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlt2jzzxj2zu9ulmphdme) | `9665% (-046%)` | `3 (ø)` | || [operators/completable/completablefromcallablejava](https://codecovio/gh/reactivex/rxjava/pull/6167/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlrnjvbunhbgxhymxllmphdme) | `100% (ø)` | `4 (ø)` | :arrow_down: || [rnal/operators/observable/observableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/6167/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu9ic2vydmvpbi5qyxzh) | `100% (ø)` | `3 (ø)` | :arrow_down: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6167/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% (-466%)` | `10% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6167/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9082% (-435%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6167/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8954% (-262%)` | `2% (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6167/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% (-26%)` | `6% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6167/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9572% (-161%)` | `5% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6167/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-12%)` | `2% (ø)` | || [/operators/mixed/flowableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6167/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwq29tcgxldgfibguuamf2yq) | `9914% (-086%)` | `2% (ø)` | || and [20 more](https://codecovio/gh/reactivex/rxjava/pull/6167/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6167?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6167?srcpr&elfooter) last update [592b991be80d4d](https://codecovio/gh/reactivex/rxjava/pull/6167?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || for me the situation in #6146 is an anti-pattern (having more than one blocking subscribe in a flowable chain) so i hope to avoid it entirely having said that i understand that this pr helps the situation described in #6146 @akarnokd would you say the window of opportunity for unwanted `schedulersio()` reuse has been narrowed or completely closed with the changes in this pr? || it is definitely narrowed but i cant prove it is eliminated or that we arent back to state where excess io creation happens it is better to confine blocking to its own io scheduler via subscribeon so that such oncomplete blocking doesnt elongate the schedulers life and also doesnt keep the previous operators stack ||
6172.0,6175,1,0,0,0,0,1,1,0,"2x: explain null observer/subscriber error reports in detail from rxjavaplugins this pr is related to issue [#6172](https://githubcom/reactivex/rxjava/issues/6172)with these changes all reactive types will emit detailed error message when `onsubscribe` hook installed using rxjavaplugins returns null `observer/subscriber`:**observable**> ""the rxjavapluginsonsubscribe hook returned a null observer please check the handler provided to rxjavapluginssetonobservablesubscribe for invalid null returns further reading: https://githubcom/reactivex/rxjava/wiki/plugins""**flowable**> the rxjavapluginsonsubscribe hook returned a null flowablesubscriber please check the handler provided to rxjavapluginssetonflowablesubscribe for invalid null returns further reading: https://githubcom/reactivex/rxjava/wiki/plugins**single**> the rxjavapluginsonsubscribe hook returned a null singleobserver please check the handler provided to rxjavapluginssetonsinglesubscribe for invalid null returns further reading: https://githubcom/reactivex/rxjava/wiki/plugins**maybe**> the rxjavapluginsonsubscribe hook returned a null maybeobserver please check the handler provided to rxjavapluginssetonmaybesubscribe for invalid null returns further reading: https://githubcom/reactivex/rxjava/wiki/plugins**completable**> the rxjavapluginsonsubscribe hook returned a null completableobserver please check the handler provided to rxjavapluginssetoncompletablesubscribe for invalid null returns further reading: https://githubcom/reactivex/rxjava/wiki/plugins**note :** there was no null check on `observer` returned from `rxjavapluginsonsubscribe(this observer)` method call in `completable`s subscribe() method so ive added it in this pr is that fine? # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6175?srcpr&elh1) report> merging [#6175](https://codecovio/gh/reactivex/rxjava/pull/6175?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/ba7bbb497d43a1353a3e5f81b0887b26bf4cadfb?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6175/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6175?srcpr&eltree)```diff@@ coverage diff @@## 2x #6175 +/- ##- coverage 9823% 9822% -002% - complexity 6196 6199 +3 files 667 667 lines 44879 44880 +1 branches 6214 6214 - hits 44089 44085 -4 + misses 253 252 -1 - partials 537 543 +6```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6175?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `566 (ø)` | :arrow_down: || [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `171 (ø)` | :arrow_down: || [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `117 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `541 (ø)` | :arrow_down: || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `146 (ø)` | :arrow_down: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% (-466%)` | `10% (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9646% (-354%)` | `11% (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% (-216%)` | `9% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9743% (-171%)` | `2% (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9787% (-171%)` | `11% (ø)` | || and [25 more](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6175?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6175?srcpr&elfooter) last update [ba7bbb4894bb48](https://codecovio/gh/reactivex/rxjava/pull/6175?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||"
6185.0,6187,1,0,0,0,0,0,1,0,"2x: fix refcount termination-reconnect race this pr modifies the `refcount` operator (in both `flowable` and `observable` types) to avoid certain termination-reconnection racesthe original race could happen when the refcounted source terminated at the same time as new observers arrived leaving those new observers hanging as they practically joined a dying connection and got possibly undercut by the `dispose` callthe change involve a new internal interface `resettableconnection` that will allow resetting the connection object inside the connectable source if it is equal to the connection object known by the initiator of the original `connect` callfixes #6185 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6187?srcpr&elh1) report> merging [#6187](https://codecovio/gh/reactivex/rxjava/pull/6187?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/2e566fbc34e47de59cf76d862e5bfb631e36215c?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6187/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6187?srcpr&eltree)```diff@@ coverage diff @@## 2x #6187 +/- ##- coverage 9826% 9824% -002% - complexity 6197 6203 +6 files 667 667 lines 44880 44888 +8 branches 6214 6218 +4 hits 44100 44100 - misses 245 251 +6 - partials 535 537 +2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6187?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ex/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvwbgf5lmphdme) | `9511% (+061%)` | `20 (-3)` | :arrow_down: || [nternal/operators/observable/observablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlcgxhes5qyxzh) | `9917% (+054%)` | `20 (-3)` | :arrow_down: || [ernal/operators/observable/observablerefcountjava](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlzknvdw50lmphdme) | `100% (ø)` | `27 (+5)` | :arrow_up: || [/internal/operators/flowable/flowablerefcountjava](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvmq291bnquamf2yq) | `100% (ø)` | `27 (+5)` | :arrow_up: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-672%)` | `2% (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9646% (-354%)` | `11% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% (-225%)` | `60% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% (-214%)` | `5% (ø)` | || and [24 more](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6187?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6187?srcpr&elfooter) last update [2e566fb05ac5d1](https://codecovio/gh/reactivex/rxjava/pull/6187?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks for the fix @akarnokd and the report @bernhardreu a release in the next couple of weeks with this change would be very welcome (`share` is a critical path for me) /cc @superevensteven @philipgroom || @davidmoten sure #6194 || @akarnokd this seems to fix the issue for `replay()refcount()` but im seeing the same test fail intermittently with `publish()refcount()` (aka `share()`):``` @test fun `test refcount race conditions`() { for (i in 0 until 10_000) { val observable observablejust(1)publish()refcount() val observer1 observable subscribeon(schedulersio()) test() val observer2 observable subscribeon(schedulersio()) test() observer1 withtag(""observer1 $i"") awaitdone(5 timeunitseconds) assertresult(1) observer2 withtag(""observer2 $i"") awaitdone(5 timeunitseconds) assertresult(1) } }```the actual failure is obviously unpredictable due to the race conditions but it usually fails pretty early in this case it failed at `i14`:```javalangassertionerror: value count differs expected: 1 [1] but was: 0 [] (latch 1 values 0 errors 0 completions 0 timeout! disposed! tag observer2 14)expected :1 [1] actual :0 [] (latch 1 values 0 errors 0 completions 0 timeout! disposed! tag observer2 14)``` || @jhansche it is possible one of the observers connect right between onnext and oncomplete thus it may not receive the value however they should both complete no timeout i put in a fresh issue #6501 and will investigate further tomorrow ||"
6179.0,6193,1,0,0,0,0,0,1,0,"add ""error handling"" java docs section to from callable & co resolves #6179added javadocs describing the regular and canceled/disposed behavior for- `observablefromcallable()`- `singlefromcallable()`- `maybefromaction()`- `completablefromcallable()`- `completablefromaction()`- `flowablefromcallable()`did not alter `maybefromcallable()` because the existing javadoc appears to be adequate # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6193?srcpr&elh1) report> merging [#6193](https://codecovio/gh/reactivex/rxjava/pull/6193?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/c7d91c68ef8011f9d753111a8c839297850aeb66?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6193/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6193?srcpr&eltree)```diff@@ coverage diff @@## 2x #6193 +/- ##- coverage 9822% 9821% -002% - complexity 6197 6199 +2 files 667 667 lines 44888 44888 branches 6218 6218 - hits 44091 44086 -5 - misses 253 259 +6 + partials 544 543 -1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6193?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6193/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `566 (ø)` | :arrow_down: || [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6193/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `117 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6193/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `541 (ø)` | :arrow_down: || [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6193/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `171 (ø)` | :arrow_down: || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6193/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `146 (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6193/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8627% (-981%)` | `2% (ø)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/pull/6193/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% (-364%)` | `9% (-1%)` | || [rnal/operators/flowable/flowableskiplasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6193/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2tpcexhc3ruaw1lzc5qyxzh) | `9591% (-205%)` | `2% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6193/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% (-107%)` | `5% (ø)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6193/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% (-106%)` | `3% (ø)` | || and [23 more](https://codecovio/gh/reactivex/rxjava/pull/6193/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6193?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6193?srcpr&elfooter) last update [c7d91c65c1eeb9](https://codecovio/gh/reactivex/rxjava/pull/6193?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || i noticed that theres quite a bit more of the ""cancellation"" language in the other areas for example: - singlejava:833 `and all other source {@code singlesource}s are cancelled`- completablejava:1588 ` * @param onfinally the action called when this completable terminates or gets cancelled`should this be added to #4535? || post a separate pr for those || should i create a separate issue as well? also is there anything else you need from me to get this pr merged (unsure of the process at this point)? || no need to open an issue for thatwe are waiting for another approval and this will be merged ||"
6195.0,6197,1,0,0,0,0,0,1,0,#6195 fix flowablereduce(bifunction) javadoc empty source does not signal nosuchelementexceptionresolves #6195 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6197?srcpr&elh1) report> merging [#6197](https://codecovio/gh/reactivex/rxjava/pull/6197?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/c7d91c68ef8011f9d753111a8c839297850aeb66?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6197/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6197?srcpr&eltree)```diff@@ coverage diff @@## 2x #6197 +/- ##+ coverage 9822% 9824% +001% - complexity 6197 6205 +8 files 667 667 lines 44888 44888 branches 6218 6218 + hits 44091 44099 +8 + misses 253 249 -4 + partials 544 540 -4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6197?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `566 (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9084% (-523%)` | `2% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9646% (-354%)` | `11% (ø)` | || [rnal/operators/flowable/flowableskiplasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2tpcexhc3ruaw1lzc5qyxzh) | `9591% (-205%)` | `2% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% (-106%)` | `3% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9275% (-097%)` | `2% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9743% (-086%)` | `2% (ø)` | || [/operators/maybe/maybeflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlrmxhde1hcel0zxjhymxlrmxvd2fibguuamf2yq) | `9754% (-082%)` | `2% (ø)` | || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `9741% (-033%)` | `6% (ø)` | || and [21 more](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6197?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6197?srcpr&elfooter) last update [c7d91c6d2f1ca3](https://codecovio/gh/reactivex/rxjava/pull/6197?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6196.0,6199,1,0,0,0,0,0,1,0,fix terminology of cancel/dispose in the javadocs resolves #6196changing terminology from cancel -> dispose wherever appropriate in the following classes:- `observablejava`- `singlejava`- `maybejava`- `completablejava`areas where i did _not_ change from cancel -> disposal include: - where the cancellation was in reference to a `flowable` `publisher` or a `future`- `test()` methods where the `testobserver` returned actually has a `cancel()` method # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6199?srcpr&elh1) report> merging [#6199](https://codecovio/gh/reactivex/rxjava/pull/6199?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/e0532b71f7eb6e2973b8c9b155b53a671caa0e9f?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6199/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6199?srcpr&eltree)```diff@@ coverage diff @@## 2x #6199 +/- ##+ coverage 9823% 9825% +002% + complexity 6202 6201 -1 files 667 667 lines 44888 44888 branches 6218 6218 + hits 44095 44106 +11 + misses 253 245 -8 + partials 540 537 -3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6199?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `146 (ø)` | :arrow_down: || [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `117 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `541 (ø)` | :arrow_down: || [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `171 (ø)` | :arrow_down: || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% (-364%)` | `9% (-1%)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% (-214%)` | `5% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9521% (-107%)` | `3% (ø)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% (-106%)` | `3% (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0afnpbmdszs5qyxzh) | `9906% (-094%)` | `2% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6199?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6199?srcpr&elfooter) last update [e0532b72eaba8a](https://codecovio/gh/reactivex/rxjava/pull/6199?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6198.0,6200,1,0,0,0,0,0,1,0,2x: fix tofuture marbles and descriptions this pr fixes the marble diagrams of `flowabletofuture` and `observabletofuture` to indicate:- multi-valued sources signal `indexoutofboundsexception`- source has to be finite for the `future` to terminate![image](https://githubcom/reactivex/rxjava/wiki/images/rx-operators/flowabletofuturepng)![image](https://githubcom/reactivex/rxjava/wiki/images/rx-operators/tofutureopng)resolves #6198(also fixes the diagram for #5813) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6200?srcpr&elh1) report> merging [#6200](https://codecovio/gh/reactivex/rxjava/pull/6200?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/e0532b71f7eb6e2973b8c9b155b53a671caa0e9f?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6200/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6200?srcpr&eltree)```diff@@ coverage diff @@## 2x #6200 +/- ##- coverage 9823% 9822% -002% + complexity 6202 6199 -3 files 667 667 lines 44888 44888 branches 6218 6218 - hits 44095 44090 -5 misses 253 253 - partials 540 545 +5```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6200?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `566 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `541 (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8888% (-393%)` | `2% (ø)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9787% (-171%)` | `11% (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9468% (-16%)` | `3% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9722% (-139%)` | `56% (-1%)` | || [java/io/reactivex/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9vbmljyxn0uhjvy2vzc29ylmphdme) | `988% (-12%)` | `67% (-1%)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% (-106%)` | `3% (ø)` | || and [20 more](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6200?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6200?srcpr&elfooter) last update [e0532b7d255138](https://codecovio/gh/reactivex/rxjava/pull/6200?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
623.0,6232,1,0,0,0,0,1,1,1,2x: cleanup observableflatmap drain logic cleanup the drain logic of `observableflatmap` by removing unnecessary loops and fixing the index management in case of a fused failure in one of the sources triggering another round over the same source unnecessarilyresolves: #6231 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6232?srcpr&elh1) report> merging [#6232](https://codecovio/gh/reactivex/rxjava/pull/6232?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/fd48d56266bf0664568226160516b182e046a62a?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `5555%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6232/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6232?srcpr&eltree)```diff@@ coverage diff @@## 2x #6232 +/- ##+ coverage 9822% 9826% +003% + complexity 6202 6201 -1 files 667 667 lines 44888 44883 -5 branches 6218 6216 -2 + hits 44093 44104 +11 + misses 256 241 -15 + partials 539 538 -1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6232?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6232/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxauamf2yq) | `8863% (+077%)` | `3 (ø)` | :arrow_down: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6232/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% (-466%)` | `10% (-1%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6232/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% (-381%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6232/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9346% (-197%)` | `2% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6232/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [internal/operators/flowable/flowablefromarrayjava](https://codecovio/gh/reactivex/rxjava/pull/6232/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbufycmf5lmphdme) | `9491% (-17%)` | `3% (ø)` | || [ternal/operators/flowable/flowablesubscribeonjava](https://codecovio/gh/reactivex/rxjava/pull/6232/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3vic2nyawjlt24uamf2yq) | `9661% (-17%)` | `2% (ø)` | || [ivex/internal/operators/maybe/maybemergearrayjava](https://codecovio/gh/reactivex/rxjava/pull/6232/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjltwvyz2vbcnjhes5qyxzh) | `9662% (-113%)` | `6% (ø)` | || [l/operators/observable/observabletimeouttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6232/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvrpbwvvdxruaw1lzc5qyxzh) | `9915% (-085%)` | `3% (ø)` | || and [22 more](https://codecovio/gh/reactivex/rxjava/pull/6232/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6232?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6232?srcpr&elfooter) last update [fd48d562de431f](https://codecovio/gh/reactivex/rxjava/pull/6232?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6253.0,6254,1,0,0,0,0,1,1,1,2x: fix flaky sample() backpressure test improve coverage use processors to trigger the `missingbackpressureexception` case instead of the timer which could fire prematurely and stop the sequence before the first item was sent by the `behaviorprocessor`also small improvements to the code coverage of `flowablesample`fixes #6253 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6254?srcpr&elh1) report> merging [#6254](https://codecovio/gh/reactivex/rxjava/pull/6254?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/f78bd953e6d09792d2ba2aa1c3fce0f7c9110810?srcpr&eldesc) will **increase** coverage by `007%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6254/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6254?srcpr&eltree)```diff@@ coverage diff @@## 2x #6254 +/- ##+ coverage 982% 9828% +007% - complexity 6202 6206 +4 files 667 667 lines 44889 44889 branches 6216 6216 + hits 44082 44117 +35 + misses 260 247 -13 + partials 547 525 -22```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6254?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ex/internal/subscriptions/subscriptionarbiterjava](https://codecovio/gh/reactivex/rxjava/pull/6254/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9tdwjzy3jpchrpb25bcmjpdgvylmphdme) | `9491% (-255%)` | `46% (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6254/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% (-225%)` | `60% (ø)` | || [java/io/reactivex/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6254/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9qdwjsaxnouhjvy2vzc29ylmphdme) | `9819% (-181%)` | `42% (-1%)` | || [tivex/internal/operators/single/singletimeoutjava](https://codecovio/gh/reactivex/rxjava/pull/6254/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuaw1lb3v0lmphdme) | `9833% (-167%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6254/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-15%)` | `2% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6254/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9743% (-086%)` | `2% (ø)` | || [l/operators/observable/observabletimeouttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6254/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvrpbwvvdxruaw1lzc5qyxzh) | `9915% (-085%)` | `3% (ø)` | || [internal/operators/flowable/flowableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/6254/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlt2jzzxj2zu9ulmphdme) | `9665% (-056%)` | `3% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6254/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% (-055%)` | `2% (ø)` | || [main/java/io/reactivex/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/pull/6254/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvumvwbgf5u3viamvjdc5qyxzh) | `9769% (-042%)` | `50% (ø)` | || and [25 more](https://codecovio/gh/reactivex/rxjava/pull/6254/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6254?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6254?srcpr&elfooter) last update [f78bd956ff0cbe](https://codecovio/gh/reactivex/rxjava/pull/6254?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
625.0,6258,1,0,0,1,0,1,1,1,2x: fix cancel/dispose upon upstream switch for some operators this pr extends the `subscriptionarbiter` to optionally allow or disallow cancelling the current `subscription` if it is replaced by a new one some operators do not need to cancel the current `subscription`: `concat` `concatmap` `repeat` `repeatwhen` `retry` and `retrywhen` in addition `repeatwhen` and `retrywhen` were cancelling when the handler sequence itself terminated the code has been updated to disconnect the upstream upon the completion/failure but before signaling the handlerthe reactive streams specification also disallows synchronous cancellation after the terminal event anywayothers may actually need to cancel such as `timeout` `observable`s dont have a specific arbiter they use the `disposablehelper` methods and the relevant ones were changed to `replace()` instead of the disposing `set` callsome tests actually checking if the dispose/cancel happens and had to be updatedthe `flowabledelaysubscription(publisher)` also used `subscriptionarbiter` but it was unnecessary the code has been replaced with a more apt deferred requesting scheme as the downstream requests need to be delayed until the main subscription happens the other publisher is always consumed unboundedresolves: #6259 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6258?srcpr&elh1) report> merging [#6258](https://codecovio/gh/reactivex/rxjava/pull/6258?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/be0353cc6334fbb60a285f2f4f4ba88150f099e6?srcpr&eldesc) will **increase** coverage by `005%`> the diff coverage is `9655%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6258/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6258?srcpr&eltree)```diff@@ coverage diff @@## 2x #6258 +/- ##+ coverage 9822% 9828% +005% - complexity 6203 6210 +7 files 667 667 lines 44889 44898 +9 branches 6216 6219 +3 + hits 44093 44126 +33 + misses 254 242 -12 + partials 542 530 -12```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6258?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nal/operators/flowable/flowableretrypredicatejava](https://codecovio/gh/reactivex/rxjava/pull/6258/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumv0cnlqcmvkawnhdguuamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || [l/operators/flowable/flowableretrybipredicatejava](https://codecovio/gh/reactivex/rxjava/pull/6258/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumv0cnlcavbyzwrpy2f0zs5qyxzh) | `100% (ø)` | `2 (ø)` | :arrow_down: || [nternal/operators/flowable/flowablerepeatwhenjava](https://codecovio/gh/reactivex/rxjava/pull/6258/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvwzwf0v2hlbi5qyxzh) | `100% (ø)` | `2 (ø)` | :arrow_down: || [ternal/operators/flowable/flowablerepeatuntiljava](https://codecovio/gh/reactivex/rxjava/pull/6258/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvwzwf0vw50awwuamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || [ex/internal/subscriptions/subscriptionarbiterjava](https://codecovio/gh/reactivex/rxjava/pull/6258/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9tdwjzy3jpchrpb25bcmjpdgvylmphdme) | `100% (+254%)` | `51 (+4)` | :arrow_up: || [ternal/operators/flowable/flowableonerrornextjava](https://codecovio/gh/reactivex/rxjava/pull/6258/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlt25fcnjvck5lehquamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || [nal/operators/observable/observablerepeatwhenjava](https://codecovio/gh/reactivex/rxjava/pull/6258/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlcgvhdfdozw4uamf2yq) | `9843% (+002%)` | `2 (ø)` | :arrow_down: || [ernal/operators/flowable/flowabletimeouttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6258/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzw91dfrpbwvklmphdme) | `9837% (ø)` | `3 (ø)` | :arrow_down: || [internal/operators/flowable/flowableconcatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6258/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq29uy2f0twfwlmphdme) | `9774% (-038%)` | `6 (ø)` | || [rnal/operators/observable/observableretrywhenjava](https://codecovio/gh/reactivex/rxjava/pull/6258/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjldhj5v2hlbi5qyxzh) | `9843% (+002%)` | `2 (ø)` | :arrow_down: || and [44 more](https://codecovio/gh/reactivex/rxjava/pull/6258/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6258?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6258?srcpr&elfooter) last update [be0353c465daea](https://codecovio/gh/reactivex/rxjava/pull/6258?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || david can you please allow 2-3 days window for review on this one? im smashed by work but would really like to check this pr carefully || sure artem ||
6268.0,6269,1,0,0,1,0,1,1,1,2x: call the doon{dispose|cancel} handler at most once this pr makes sure the `doondispose` `dooncancel` and `doonlifecycle` execute their cancellation handler onceresolves: #6268 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6269?srcpr&elh1) report> merging [#6269](https://codecovio/gh/reactivex/rxjava/pull/6269?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/45c0d98105de88bbf73ced44b73acfc3761a6dd1?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6269/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6269?srcpr&eltree)```diff@@ coverage diff @@## 2x #6269 +/- ##- coverage 9824% 982% -004% + complexity 6210 6207 -3 files 667 667 lines 44897 44905 +8 branches 6226 6228 +2 - hits 44108 44098 -10 - misses 252 253 +1 - partials 537 554 +17```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6269?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6269/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `541 (ø)` | :arrow_down: || [x/internal/observers/disposablelambdaobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6269/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0rpc3bvc2fibgvmyw1izgfpynnlcnzlci5qyxzh) | `100% (ø)` | `11 (+1)` | :arrow_up: || [rnal/operators/flowable/flowabledoonlifecyclejava](https://codecovio/gh/reactivex/rxjava/pull/6269/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrg9pbkxpzmvjewnszs5qyxzh) | `100% (ø)` | `2 (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6269/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% (-916%)` | `2% (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6269/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% (-466%)` | `10% (-1%)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6269/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% (-26%)` | `6% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6269/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6269/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-224%)` | `2% (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6269/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9702% (-171%)` | `11% (ø)` | || [tivex/internal/operators/single/singletimeoutjava](https://codecovio/gh/reactivex/rxjava/pull/6269/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuaw1lb3v0lmphdme) | `9833% (-167%)` | `2% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6269/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6269?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6269?srcpr&elfooter) last update [45c0d98579ddf1](https://codecovio/gh/reactivex/rxjava/pull/6269?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
627.0,6275,1,0,0,0,0,1,1,1,2x: improve the observable/flowable cache() operators this pr rewrites the `observablecache` and `flowablecache` operators to allocate less and be more up-to-date algorithmicallyive also added comments to help understand its inner workings in case someone is interestedresolves: #6270 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6275?srcpr&elh1) report> merging [#6275](https://codecovio/gh/reactivex/rxjava/pull/6275?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/fba8b61b08f3f11e588ed2e7f7b3c183eb71eab8?srcpr&eldesc) will **decrease** coverage by ` the diff coverage is `9825%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6275/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6275?srcpr&eltree)```diff@@ coverage diff @@## 2x #6275 +/- ##- coverage 9822% 9822% -001% - complexity 6213 6257 +44 files 667 667 lines 44905 44887 -18 branches 6228 6213 -15 - hits 44110 44089 -21 - misses 251 255 +4 + partials 544 543 -1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6275?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6275/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `541 (ø)` | :arrow_down: || [internal/operators/observable/observablecachejava](https://codecovio/gh/reactivex/rxjava/pull/6275/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunhy2hllmphdme) | `959% (+22%)` | `34 (+25)` | :arrow_up: || [vex/internal/operators/flowable/flowablecachejava](https://codecovio/gh/reactivex/rxjava/pull/6275/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq2fjaguuamf2yq) | `9848% (-015%)` | `38 (+27)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6275/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% (-466%)` | `10% (-1%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6275/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9583% (-417%)` | `55% (-3%)` | || [va/io/reactivex/internal/util/linkedarraylistjava](https://codecovio/gh/reactivex/rxjava/pull/6275/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9maw5rzwrbcnjheuxpc3quamf2yq) | `9722% (-278%)` | `8% (-1%)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6275/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9572% (-257%)` | `2% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6275/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6275/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% (-214%)` | `5% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6275/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || and [19 more](https://codecovio/gh/reactivex/rxjava/pull/6275/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6275?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6275?srcpr&elfooter) last update [fba8b610dc6be2](https://codecovio/gh/reactivex/rxjava/pull/6275?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
627.0,6278,1,0,0,0,0,1,1,0,2x: add materialize() and dematerialize() this pr adds the `materialize` operator to `maybe` `single` and `completable` to turn their signals into the corresponding `notification` object this operator has been available for `observable`s (and `flowable`s) from the beginning of the rx api the methods return `single >`to complement the `dematerialize` operator is only defined for `single` and results in a `maybe`if accepted ill draw the correct marble diagrams for them in a separate prresolves: #6272 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6278?srcpr&elh1) report> merging [#6278](https://codecovio/gh/reactivex/rxjava/pull/6278?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/c3cfb5ac774a6e08e0d1fdd42dd8c483329f4f23?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6278/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6278?srcpr&eltree)```diff@@ coverage diff @@## 2x #6278 +/- ##- coverage 9825% 9822% -003% - complexity 6259 6277 +18 files 667 672 +5 lines 44887 44954 +67 branches 6213 6216 +3 + hits 44104 44158 +54 - misses 247 258 +11 - partials 536 538 +2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6278?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nal/operators/mixed/materializesingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6278/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl01hdgvyawfsaxplu2luz2xlt2jzzxj2zxiuamf2yq) | `100% (ø)` | `8 (?)` | || [/operators/completable/completablematerializejava](https://codecovio/gh/reactivex/rxjava/pull/6278/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwf0zxjpywxpemuuamf2yq) | `100% (ø)` | `2 (?)` | || [vex/internal/operators/maybe/maybematerializejava](https://codecovio/gh/reactivex/rxjava/pull/6278/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjltwf0zxjpywxpemuuamf2yq) | `100% (ø)` | `2 (?)` | || [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6278/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `120 (+1)` | :arrow_up: || [x/internal/operators/single/singlematerializejava](https://codecovio/gh/reactivex/rxjava/pull/6278/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvnyxrlcmlhbgl6zs5qyxzh) | `100% (ø)` | `2 (?)` | || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6278/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `148 (+2)` | :arrow_up: || [internal/operators/single/singledematerializejava](https://codecovio/gh/reactivex/rxjava/pull/6278/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvezw1hdgvyawfsaxpllmphdme) | `100% (ø)` | `2 (?)` | || [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6278/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `172 (+1)` | :arrow_up: || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6278/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `9032% (-742%)` | `6% (ø)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/pull/6278/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% (-364%)` | `9% (-1%)` | || and [30 more](https://codecovio/gh/reactivex/rxjava/pull/6278/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6278?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6278?srcpr&elfooter) last update [c3cfb5a1ffb12d](https://codecovio/gh/reactivex/rxjava/pull/6278?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || /cc @artem-zinnatullin @davidmoten ||
627.0,6287,1,0,0,0,0,0,1,0,2x: expose the keep-alive value of the io scheduler as system property (#6279) configuring keep-alive through system propertyresolves: #6279 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6287?srcpr&elh1) report> merging [#6287](https://codecovio/gh/reactivex/rxjava/pull/6287?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/3281b027c7e46c1f0ab9ec7719b5029285920e37?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6287/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6287?srcpr&eltree)```diff@@ coverage diff @@## 2x #6287 +/- ##+ coverage 9825% 9829% +003% + complexity 6262 6261 -1 files 667 667 lines 44888 44889 +1 branches 6214 6214 + hits 44105 44122 +17 + misses 249 236 -13 + partials 534 531 -3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6287?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/schedulers/schedulersjava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc2nozwr1bgvycy9ty2hlzhvszxjzlmphdme) | `100% (ø)` | `10 (ø)` | :arrow_down: || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `9148% (+116%)` | `9 (ø)` | :arrow_down: || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9659% (-213%)` | `11% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9323% (-194%)` | `2% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% (-106%)` | `3% (ø)` | || [/operators/mixed/flowableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwq29tcgxldgfibguuamf2yq) | `9914% (-086%)` | `2% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9743% (-086%)` | `2% (ø)` | || [vex/internal/operators/flowable/flowablecachejava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq2fjaguuamf2yq) | `9772% (-076%)` | `37% (-1%)` | || and [22 more](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6287?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6287?srcpr&elfooter) last update [3281b021fb3977](https://codecovio/gh/reactivex/rxjava/pull/6287?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6279.0,6287,1,0,0,0,0,0,1,0,2x: expose the keep-alive value of the io scheduler as system property (#6279) configuring keep-alive through system propertyresolves: #6279 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6287?srcpr&elh1) report> merging [#6287](https://codecovio/gh/reactivex/rxjava/pull/6287?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/3281b027c7e46c1f0ab9ec7719b5029285920e37?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6287/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6287?srcpr&eltree)```diff@@ coverage diff @@## 2x #6287 +/- ##+ coverage 9825% 9829% +003% + complexity 6262 6261 -1 files 667 667 lines 44888 44889 +1 branches 6214 6214 + hits 44105 44122 +17 + misses 249 236 -13 + partials 534 531 -3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6287?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/schedulers/schedulersjava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc2nozwr1bgvycy9ty2hlzhvszxjzlmphdme) | `100% (ø)` | `10 (ø)` | :arrow_down: || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `9148% (+116%)` | `9 (ø)` | :arrow_down: || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9659% (-213%)` | `11% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9323% (-194%)` | `2% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% (-106%)` | `3% (ø)` | || [/operators/mixed/flowableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwq29tcgxldgfibguuamf2yq) | `9914% (-086%)` | `2% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9743% (-086%)` | `2% (ø)` | || [vex/internal/operators/flowable/flowablecachejava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq2fjaguuamf2yq) | `9772% (-076%)` | `37% (-1%)` | || and [22 more](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6287?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6287?srcpr&elfooter) last update [3281b021fb3977](https://codecovio/gh/reactivex/rxjava/pull/6287?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
629.0,6297,1,0,0,1,0,1,1,1,2x: fix refcount eager disconnect not resetting the connection this pr fixes the case when an observer/subscriber disposes/cancels immediately upon subscribing to a `refcount` operator before it establishes the connection and ends up with a disposed but non-reset connection preventing further interactions with the connectable sourcethe fix is to detect this case and reset the connection when the `connect()` method signals the dispose handlerboth `connectableflowablerefcount` and `connectableflowablerefcount` is affectedfixes: #6296 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6297?srcpr&elh1) report> merging [#6297](https://codecovio/gh/reactivex/rxjava/pull/6297?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/acd5466c4440961da905d0c1c0e78752bda155ef?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6297/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6297?srcpr&eltree)```diff@@ coverage diff @@## 2x #6297 +/- ##+ coverage 9824% 9828% +004% - complexity 6281 6286 +5 files 672 672 lines 44980 44992 +12 branches 6219 6223 +4 + hits 44189 44221 +32 + misses 251 241 -10 + partials 540 530 -10```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6297?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ernal/operators/observable/observablerefcountjava](https://codecovio/gh/reactivex/rxjava/pull/6297/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlzknvdw50lmphdme) | `100% (ø)` | `28 (+1)` | :arrow_up: || [/internal/operators/flowable/flowablerefcountjava](https://codecovio/gh/reactivex/rxjava/pull/6297/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvmq291bnquamf2yq) | `100% (ø)` | `28 (+1)` | :arrow_up: || [/operators/mixed/flowableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6297/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwq29tcgxldgfibguuamf2yq) | `9743% (-257%)` | `2% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6297/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6297/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9178% (-242%)` | `2% (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6297/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9659% (-213%)` | `11% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6297/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6297/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9528% (-142%)` | `3% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6297/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% (-107%)` | `5% (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6297/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9361% (-107%)` | `3% (ø)` | || and [26 more](https://codecovio/gh/reactivex/rxjava/pull/6297/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6297?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6297?srcpr&elfooter) last update [acd5466f60c09f](https://codecovio/gh/reactivex/rxjava/pull/6297?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6302.0,6303,1,0,0,0,0,0,1,0,javadoc: fix incorrect image placement add ` ` before image elements in javadocresolves: #6302 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6303?srcpr&elh1) report> merging [#6303](https://codecovio/gh/reactivex/rxjava/pull/6303?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/55f3bb2a366c5667c682021fe56726479f29bc3b?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6303/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6303?srcpr&eltree)```diff@@ coverage diff @@## 2x #6303 +/- ##- coverage 9826% 9823% -003% - complexity 6281 6285 +4 files 672 672 lines 44980 44980 branches 6219 6219 - hits 44200 44187 -13 - misses 244 247 +3 - partials 536 546 +10```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6303?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6303/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `567 (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6303/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8954% (-523%)` | `2% (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6303/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `2% (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6303/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6303/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `927% (-219%)` | `2% (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6303/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9659% (-213%)` | `11% (ø)` | || [rnal/operators/flowable/flowableskiplasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6303/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2tpcexhc3ruaw1lzc5qyxzh) | `9591% (-205%)` | `2% (ø)` | || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6303/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `9548% (-194%)` | `6% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6303/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-12%)` | `2% (ø)` | || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6303/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `9894% (-106%)` | `2% (ø)` | || and [19 more](https://codecovio/gh/reactivex/rxjava/pull/6303/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6303?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6303?srcpr&elfooter) last update [55f3bb2561cdc0](https://codecovio/gh/reactivex/rxjava/pull/6303?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6299.0,6305,1,0,0,0,0,0,1,0,javadoc : explain explicitly about using emitter interface methods synchronously add note in javadoc explicitly explaining about using emitter interface methods synchronously- add notes for `generate` methods in observable and flowable- plus add the similar note to emitter interfaceresolves: #6299 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6305?srcpr&elh1) report> merging [#6305](https://codecovio/gh/reactivex/rxjava/pull/6305?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/6afd2b8d6c96ae9f76f5dc4802b9e8385c7b12ee?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6305/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6305?srcpr&eltree)```diff@@ coverage diff @@## 2x #6305 +/- ##+ coverage 9825% 9826% + (ø)` | `567 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6305/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `542 (ø)` | :arrow_down: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6305/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-523%)` | `2% (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6305/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% (-26%)` | `6% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6305/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6305/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9468% (-16%)` | `3% (ø)` | || [io/reactivex/subscribers/serializedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/6305/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3vic2nyawjlcnmvu2vyawfsaxplzfn1ynnjcmlizxiuamf2yq) | `9886% (-114%)` | `26% (-1%)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6305/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% (-107%)` | `5% (ø)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6305/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0ae1hewjllmphdme) | `991% (-09%)` | `2% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6305/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `975% (-084%)` | `2% (ø)` | || and [22 more](https://codecovio/gh/reactivex/rxjava/pull/6305/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6305?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6305?srcpr&elfooter) last update [6afd2b8b971d56](https://codecovio/gh/reactivex/rxjava/pull/6305?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6289.0,6308,1,0,0,0,0,0,1,0,javadoc updates for rxjava issue 6289 updates to ioreactivexflowable javadocs as per #6289 updated docs for all 6 flowablegroupby() methods # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6308?srcpr&elh1) report> merging [#6308](https://codecovio/gh/reactivex/rxjava/pull/6308?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/e82b82edf874e69ed51896987a4c987d3f5af9f2?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6308/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6308?srcpr&eltree)```diff@@ coverage diff @@## 2x #6308 +/- ##+ coverage 9823% 9823% + (ø)` | `567 (ø)` | :arrow_down: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6308/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% (-466%)` | `10% (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6308/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `938% (-443%)` | `10% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6308/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9033% (-339%)` | `2% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6308/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6308/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6308/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% (-164%)` | `2% (ø)` | || [java/io/reactivex/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6308/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9vbmljyxn0uhjvy2vzc29ylmphdme) | `988% (-12%)` | `67% (-1%)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6308/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9625% (-107%)` | `5% (ø)` | || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6308/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `9894% (-106%)` | `2% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6308/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6308?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6308?srcpr&elfooter) last update [e82b82e00d7158](https://codecovio/gh/reactivex/rxjava/pull/6308?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6290.0,6311,1,0,0,0,0,1,1,1,javadoc: explain that distinctuntilchanged requires non-mutating data to work as expected - add note in javadoc for all `distinctuntilchanged()` methods in `flowable` and `observable` class explaining about unexpected results to expect when using mutable data sources like **mutable charsequence** or **lists**resolves: #6290 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6311?srcpr&elh1) report> merging [#6311](https://codecovio/gh/reactivex/rxjava/pull/6311?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/e82b82edf874e69ed51896987a4c987d3f5af9f2?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6311/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6311?srcpr&eltree)```diff@@ coverage diff @@## 2x #6311 +/- ##- coverage 9823% 982% -003% + complexity 6284 6283 -1 files 672 672 lines 44992 44992 branches 6223 6223 - hits 44196 44183 -13 - misses 252 267 +15 + partials 544 542 -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6311?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6311/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `567 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6311/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `542 (ø)` | :arrow_down: || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6311/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `90% (-678%)` | `6% (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6311/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% (-466%)` | `10% (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6311/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `938% (-443%)` | `10% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6311/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `8937% (-435%)` | `2% (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6311/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6311/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6311/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% (-164%)` | `2% (ø)` | || [io/reactivex/subscribers/serializedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/6311/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3vic2nyawjlcnmvu2vyawfsaxplzfn1ynnjcmlizxiuamf2yq) | `9886% (-114%)` | `26% (-1%)` | || and [20 more](https://codecovio/gh/reactivex/rxjava/pull/6311/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6311?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6311?srcpr&elfooter) last update [e82b82e42b56e4](https://codecovio/gh/reactivex/rxjava/pull/6311?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
630.0,6313,1,0,0,0,0,0,1,0,adding nonnull annotations to observable & single adding nonnull annotations in factory methods for improved code compilationresolves: #6309 #6309 @akarnokd can you pls take a look at this and review ? || thanks for contributing a few points:- you dont have to keep the welcome text of the pr thats for telling contributors what to do see the updated text for future reference- didnt you mean to add `@nonnull` to the arguments rather than to the return value? || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6313?srcpr&elh1) report> merging [#6313](https://codecovio/gh/reactivex/rxjava/pull/6313?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/6ae765a899969682263acef757480df95b026783?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6313/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6313?srcpr&eltree)```diff@@ coverage diff @@## 2x #6313 +/- ##+ coverage 9823% 9826% +003% - complexity 6284 6285 +1 files 672 672 lines 44992 44992 branches 6223 6223 + hits 44198 44213 +15 + misses 253 244 -9 + partials 541 535 -6```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6313?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6313/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `567 (ø)` | :arrow_down: || [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6313/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `120 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6313/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `542 (ø)` | :arrow_down: || [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6313/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `172 (ø)` | :arrow_down: || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6313/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `148 (ø)` | :arrow_down: || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6313/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6313/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9456% (-164%)` | `2% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6313/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-12%)` | `2% (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6313/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8936% (-107%)` | `9% (ø)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6313/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0ae1hewjllmphdme) | `991% (-09%)` | `2% (ø)` | || and [20 more](https://codecovio/gh/reactivex/rxjava/pull/6313/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6313?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6313?srcpr&elfooter) last update [6ae765ac8ad9c4](https://codecovio/gh/reactivex/rxjava/pull/6313?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || non-null by default came up in #5341 but not sure what happened id think it was a jsr 305 annotation instead of just a convention thus the ides simply wouldnt have supported them@freakomonk did you also want to add these to `maybe` `flowable` and `completable` static methods? || @vanniktech can you elaborate `nonnull by default` ? || @akarnokd thanks for the suggestions will keep in mind henceforth i added the `@nonnull` annotation to methods with ` objecthelperrequirenonnull` check in them as the input params are being checked for `null` i am checking for the return valuei have updated the `flowable` static methods but do not see any `maybe` `completable` that do not have already have this annotation || > non-null by default came up in #5341 but not sure what happened id think it was a jsr 305 annotation instead of just a convention thus the ides simply wouldnt have supported themthis @freakomonk im not sure though which annotations works where and what needs to be enabled/disabled or not either we look into this or we just use rxjavas nonnull annotation which does the job || @akarnokd hi david is there something else to do to get this pr merged ? || @freakomonk i was waiting for you to add them to the other reactive base classes || @akarnokd added annotation to further methods now can you pls check ? || @akarnokd is this now okay to be merged ? your review pls ||
632.0,6321,1,0,0,0,0,0,1,0,fix flowable#toobservable backpressure support resolves #6320 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6321?srcpr&elh1) report> merging [#6321](https://codecovio/gh/reactivex/rxjava/pull/6321?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/ac3b5b195b8abf6086c21c7601ff5d054e0041d4?srcpr&eldesc) will **decrease** coverage by ` the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6321/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6321?srcpr&eltree)```diff@@ coverage diff @@## 2x #6321 +/- ##- coverage 9826% 9826% -001% + complexity 6284 6283 -1 files 672 672 lines 44992 44992 branches 6223 6223 - hits 44212 44211 -1 + misses 244 238 -6 - partials 536 543 +7```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6321?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6321/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `567 (ø)` | :arrow_down: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6321/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% (-466%)` | `10% (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6321/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9469% (-354%)` | `11% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6321/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9456% (-218%)` | `2% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6321/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [activex/internal/schedulers/scheduledrunnablejava](https://codecovio/gh/reactivex/rxjava/pull/6321/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ty2hlzhvszwrsdw5uywjszs5qyxzh) | `9807% (-193%)` | `29% (-1%)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6321/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6321/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9861% (-139%)` | `57% (-1%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6321/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-12%)` | `2% (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6321/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0afnpbmdszs5qyxzh) | `9906% (-094%)` | `2% (ø)` | || and [19 more](https://codecovio/gh/reactivex/rxjava/pull/6321/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6321?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6321?srcpr&elfooter) last update [ac3b5b152e6f7f](https://codecovio/gh/reactivex/rxjava/pull/6321?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6358.0,6359,1,0,0,0,0,1,1,1,2x: fix the error/race in observablerepeatwhen due to flooding repeat signal this pr fixes a race condition in the `observablerepeatwhen` operator for the case when the repeat signal is not 1-for-1 and a new subscription may race with the clearing of the previous disposable because `active` is set to `false` too early the fix is to swap the two operations `observableretrywhen` and the `flowable` versions do not have this bug unit tests were added to all 4 operators to verify the correct behavior regardlessfixes: #6358 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6359?srcpr&elh1) report> merging [#6359](https://codecovio/gh/reactivex/rxjava/pull/6359?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/2e0c8b585e467f94a0cc47d5792b6eb8e7f51262?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6359/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6359?srcpr&eltree)```diff@@ coverage diff @@## 2x #6359 +/- ##+ coverage 9824% 9826% +001% - complexity 6281 6283 +2 files 672 672 lines 44990 44990 branches 6223 6223 + hits 44202 44210 +8 + misses 247 241 -6 + partials 541 539 -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6359?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nal/operators/observable/observablerepeatwhenjava](https://codecovio/gh/reactivex/rxjava/pull/6359/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlcgvhdfdozw4uamf2yq) | `100% (+156%)` | `2 (ø)` | :arrow_down: || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6359/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% (-26%)` | `6% (ø)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6359/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6359/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9774% (-226%)` | `3% (ø)` | || [rnal/operators/flowable/flowableskiplasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6359/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2tpcexhc3ruaw1lzc5qyxzh) | `9591% (-205%)` | `2% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6359/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [activex/internal/schedulers/scheduledrunnablejava](https://codecovio/gh/reactivex/rxjava/pull/6359/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ty2hlzhvszwrsdw5uywjszs5qyxzh) | `9807% (-193%)` | `29% (-1%)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6359/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9702% (-171%)` | `11% (ø)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6359/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9528% (-142%)` | `3% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6359/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9346% (-131%)` | `2% (ø)` | || and [26 more](https://codecovio/gh/reactivex/rxjava/pull/6359/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6359?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6359?srcpr&elfooter) last update [2e0c8b5ea40336](https://codecovio/gh/reactivex/rxjava/pull/6359?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || nice! thanks @akarnokd for such a quick fix i have verified that it fixes https://githubcom/reactivex/rxjava/issues/6358 locally ||
636.0,6364,1,0,0,0,0,1,1,0,2x: fix publish not requesting upon client change due to a bug in the `flowablepublish` operator it is not requesting more if there was a change in the subscriber array during an emission run in the non-fused operation modefixes: #6363 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6364?srcpr&elh1) report> merging [#6364](https://codecovio/gh/reactivex/rxjava/pull/6364?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/d7d0a33e04e4b409789fc67ec94883bf0e828c64?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `75%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6364/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6364?srcpr&eltree)```diff@@ coverage diff @@## 2x #6364 +/- ##+ coverage 9826% 9826% + (-042%)` | `11 (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6364/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `8888% (-435%)` | `2% (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6364/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `2% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6364/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% (-225%)` | `60% (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6364/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9308% (-213%)` | `3% (ø)` | || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6364/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `9894% (-106%)` | `2% (ø)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6364/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% (-106%)` | `3% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6364/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `975% (-084%)` | `2% (ø)` | || [ernal/operators/flowable/flowabletimeouttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6364/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzw91dfrpbwvklmphdme) | `9837% (-082%)` | `3% (ø)` | || [vex/internal/operators/flowable/flowablecachejava](https://codecovio/gh/reactivex/rxjava/pull/6364/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq2fjaguuamf2yq) | `9772% (-076%)` | `37% (-1%)` | || and [20 more](https://codecovio/gh/reactivex/rxjava/pull/6364/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6364?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6364?srcpr&elfooter) last update [d7d0a332806986](https://codecovio/gh/reactivex/rxjava/pull/6364?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
636.0,6370,1,0,0,0,0,1,1,0,2x: add interruptible mode to schedulersfrom by default the `schedulersfrom` uses a trampoline to ensure worker tasks are executed fifo and non-overlappingly on any potentially multi-threaded `executor` this old setup didnt allow task interruption due to this disconnect between the trampoline task and the operator task (in contrast the standard schedulers use single threaded executors and their `future` is linked and interruptible when the operator task is cancelled)this pr add an interruptible mode to the `schedulersfrom` via a paramerer in a new overload and some internal dispatching based on this mode selector existing `schedulersfrom(executor)` users should still behave the sameresolves: #6368 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6370?srcpr&elh1) report> merging [#6370](https://codecovio/gh/reactivex/rxjava/pull/6370?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/e1b383840d26ebdfbf298ee7f64ac26f697f9495?srcpr&eldesc) will **decrease** coverage by `006%`> the diff coverage is `9354%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6370/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6370?srcpr&eltree)```diff@@ coverage diff @@## 2x #6370 +/- ##- coverage 9824% 9818% -007% - complexity 6282 6287 +5 files 673 673 lines 45023 45075 +52 branches 6226 6239 +13 + hits 44235 44256 +21 - misses 248 263 +15 - partials 540 556 +16```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6370?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/schedulers/schedulersjava](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc2nozwr1bgvycy9ty2hlzhvszxjzlmphdme) | `100% (ø)` | `11 (+1)` | :arrow_up: || [activex/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9fegvjdxrvclnjagvkdwxlci5qyxzh) | `9798% (-202%)` | `10 (+1)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% (-85%)` | `2% (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% (-466%)` | `10% (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9469% (-354%)` | `11% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% (-225%)` | `60% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9456% (-218%)` | `2% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `962% (-169%)` | `10% (ø)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9528% (-142%)` | `3% (ø)` | || and [24 more](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6370?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6370?srcpr&elfooter) last update [e1b38387c34bac](https://codecovio/gh/reactivex/rxjava/pull/6370?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
637.0,6375,1,0,0,0,0,1,1,0,2x: dont dispose the winner of {single|maybe|completable}amb() this pr fixes the `singleamb` `maybeamb` and `completableamb` operators to not dispose the winner source causing potential interruptions as a side-effect on the current threadthe fix is to [delete](http://reactivexio/rxjava/2x/javadoc/io/reactivex/disposables/compositedisposablehtml#delete-ioreactivexdisposablesdisposable-) the winner from the composite before disposing the rest to avoid the interruption raceunit tests were added to verify this behavior on all `amb` implementations `flowable` and `observable` were already working correctlyfixes: #6373 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6375?srcpr&elh1) report> merging [#6375](https://codecovio/gh/reactivex/rxjava/pull/6375?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/e1b383840d26ebdfbf298ee7f64ac26f697f9495?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6375/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6375?srcpr&eltree)```diff@@ coverage diff @@## 2x #6375 +/- ##+ coverage 9824% 9827% +002% - complexity 6282 6288 +6 files 673 673 lines 45023 45035 +12 branches 6226 6226 + hits 44235 44259 +24 + misses 248 243 -5 + partials 540 533 -7```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6375?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/pull/6375/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `100% (ø)` | `11 (ø)` | :arrow_down: || [o/reactivex/internal/operators/maybe/maybeambjava](https://codecovio/gh/reactivex/rxjava/pull/6375/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlqw1ilmphdme) | `100% (ø)` | `11 (+1)` | :arrow_up: || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/pull/6375/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `100% (ø)` | `10 (ø)` | :arrow_down: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6375/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% (-466%)` | `10% (-1%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6375/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% (-381%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6375/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9019% (-327%)` | `2% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6375/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% (-225%)` | `60% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6375/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9583% (-167%)` | `2% (ø)` | || [java/io/reactivex/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6375/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9vbmljyxn0uhjvy2vzc29ylmphdme) | `988% (-12%)` | `67% (-1%)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6375/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0afnpbmdszs5qyxzh) | `9906% (-094%)` | `2% (ø)` | || and [27 more](https://codecovio/gh/reactivex/rxjava/pull/6375/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6375?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6375?srcpr&elfooter) last update [e1b383815f5dfe](https://codecovio/gh/reactivex/rxjava/pull/6375?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6288.0,6377,1,0,0,0,0,0,1,0,expand `observable#debounce` and `flowable#debounce` javadoc mention that if the processing of a task takes too longand a newer item arrives then the previous task willget disposed interrupting a long running workfixes: #6288 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6377?srcpr&elh1) report> merging [#6377](https://codecovio/gh/reactivex/rxjava/pull/6377?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/d40f923efe6b867d71412858b11f4344c1f0883a?srcpr&eldesc) will **decrease** coverage by `008%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6377/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6377?srcpr&eltree)```diff@@ coverage diff @@## 2x #6377 +/- ##- coverage 9825% 9816% -009% + complexity 6292 6286 -6 files 673 673 lines 45092 45092 branches 6239 6239 - hits 44306 44266 -40 - misses 248 274 +26 - partials 538 552 +14```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6377?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6377/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `567 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6377/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `542 (ø)` | :arrow_down: || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6377/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `90% (-71%)` | `6% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6377/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `915% (-458%)` | `2% (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6377/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `9042% (-32%)` | `9% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6377/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9722% (-278%)` | `56% (-2%)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6377/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [ex/internal/subscriptions/subscriptionarbiterjava](https://codecovio/gh/reactivex/rxjava/pull/6377/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9tdwjzy3jpchrpb25bcmjpdgvylmphdme) | `9747% (-253%)` | `50% (-1%)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6377/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6377/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% (-214%)` | `5% (ø)` | || and [27 more](https://codecovio/gh/reactivex/rxjava/pull/6377/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6377?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6377?srcpr&elfooter) last update [d40f923fe02fc2](https://codecovio/gh/reactivex/rxjava/pull/6377?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks for the review done || thanks the wording for selector-based debounces is updated ||
6379.0,6386,1,0,0,0,0,1,1,0,add doonterminate to single/maybe for consistency this pr adds doonterminate operator to single and mayberesolves: #6379 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6386?srcpr&elh1) report> merging [#6386](https://codecovio/gh/reactivex/rxjava/pull/6386?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/3fbfcc9c648dc02a064158c3ddb262f95949cbc5?srcpr&eldesc) will **increase** coverage by `005%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6386/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6386?srcpr&eltree)```diff@@ coverage diff @@## 2x #6386 +/- ##+ coverage 9823% 9828% +005% - complexity 6287 6299 +12 files 673 675 +2 lines 45092 45156 +64 branches 6239 6239 + hits 44297 44383 +86 + misses 256 238 -18 + partials 539 535 -4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6386?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [x/internal/operators/maybe/maybedoonterminatejava](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlrg9pblrlcm1pbmf0zs5qyxzh) | `100% (ø)` | `2 (?)` | || [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `173 (+1)` | :arrow_up: || [internal/operators/single/singledoonterminatejava](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgveb09uvgvybwluyxrllmphdme) | `100% (ø)` | `2 (?)` | || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `149 (+1)` | :arrow_up: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `8955% (-598%)` | `2% (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `2% (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [/operators/mixed/flowableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwq29tcgxldgfibguuamf2yq) | `9743% (-257%)` | `2% (ø)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9789% (-211%)` | `3% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || and [28 more](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6386?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6386?srcpr&elfooter) last update [3fbfcc93e8284b](https://codecovio/gh/reactivex/rxjava/pull/6386?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || all improvements and fixes have been implemented ||
640.0,6405,1,0,0,1,0,1,1,0,2x: fix concateager to dispose sources & clean up properly this pr fixes the `concatmapeager` operator (which drives the static variants as well) to properly dispose and clean up the state of the operator upon cancelling/disposing the sequence- `flowableconcatmapeager` did not cancel the current active inner consumer only the ones coming after- `observableconcatmapeager` did not dispose the main source of the inner observablesboth variants have received the same two unit tests to verify their behaviorfixes: #6404 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6405?srcpr&elh1) report> merging [#6405](https://codecovio/gh/reactivex/rxjava/pull/6405?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/6e266af1000083f25dcae9defdcfe41e4ea2b97b?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6405/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6405?srcpr&eltree)```diff@@ coverage diff @@## 2x #6405 +/- ##- coverage 9824% 9822% -002% complexity 6294 6294 files 675 675 lines 45156 45166 +10 branches 6239 6242 +3 + hits 44365 44366 +1 - misses 247 253 +6 - partials 544 547 +3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6405?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nal/operators/flowable/flowableconcatmapeagerjava](https://codecovio/gh/reactivex/rxjava/pull/6405/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq29uy2f0twfwrwfnzxiuamf2yq) | `9885% (+002%)` | `2 (ø)` | :arrow_down: || [operators/observable/observableconcatmapeagerjava](https://codecovio/gh/reactivex/rxjava/pull/6405/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunvbmnhde1hcevhz2vylmphdme) | `9947% (+001%)` | `2 (ø)` | :arrow_down: || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6405/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8936% (-426%)` | `9% (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6405/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% (-26%)` | `6% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6405/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6405/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `927% (-219%)` | `2% (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6405/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `962% (-211%)` | `11% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6405/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [tivex/internal/operators/single/singletimeoutjava](https://codecovio/gh/reactivex/rxjava/pull/6405/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuaw1lb3v0lmphdme) | `9833% (-167%)` | `2% (ø)` | || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6405/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `9612% (-162%)` | `6% (ø)` | || and [26 more](https://codecovio/gh/reactivex/rxjava/pull/6405/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6405?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6405?srcpr&elfooter) last update [6e266afd2c303f](https://codecovio/gh/reactivex/rxjava/pull/6405?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6276.0,6408,1,0,0,0,0,0,1,0,improving javadoc of flattenasflowable and flattenasobservable method improving the javadoc of the `flattenasflowable` and `flattenasobservable` methods of `single` and `maybe` classesresolves: #6276 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6408?srcpr&elh1) report> merging [#6408](https://codecovio/gh/reactivex/rxjava/pull/6408?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/184a17b7da82683e4c17d5c70392e8c5df50017f?srcpr&eldesc) will **increase** coverage by `005%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6408/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6408?srcpr&eltree)```diff@@ coverage diff @@## 2x #6408 +/- ##+ coverage 9822% 9827% +005% + complexity 6298 6294 -4 files 675 675 lines 45172 45172 branches 6246 6246 + hits 44371 44395 +24 + misses 260 241 -19 + partials 541 536 -5```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6408?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6408/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `173 (ø)` | :arrow_down: || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6408/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `149 (ø)` | :arrow_down: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6408/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% (-466%)` | `10% (-1%)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6408/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `2% (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6408/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6408/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% (-26%)` | `6% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6408/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-239%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6408/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8627% (-131%)` | `2% (ø)` | || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6408/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `9894% (-106%)` | `2% (ø)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6408/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% (-106%)` | `3% (ø)` | || and [20 more](https://codecovio/gh/reactivex/rxjava/pull/6408/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6408?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6408?srcpr&elfooter) last update [184a17b73f957a](https://codecovio/gh/reactivex/rxjava/pull/6408?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || @akarnokd the force push only involves changing my email in the previous commit apologies for the confusion im not sure why the build has failed>ioreactivexinternaloperatorsflowableflowableconcatmaptest > boundaryfusiondelayerror failed javalangassertionerror: error(s) present: [ioreactivexexceptionsmissingbackpressureexception: queue is full?!] (latch 0 values 1 errors 1 completions 0) at ioreactivexobserversbasetestconsumerfail(basetestconsumerjava:189) at ioreactivexobserversbasetestconsumerassertnoerrors(basetestconsumerjava:274) at ioreactivexobserversbasetestconsumerassertresult(basetestconsumerjava:797) at ioreactivexinternaloperatorsflowableflowableconcatmaptestboundaryfusiondelayerror(flowableconcatmaptestjava:105) caused by: ioreactivexexceptionsmissingbackpressureexception: queue is full?! || @akarnokd i closed and reopened the pr to enable a rebuild and this time it has passed was there any transient known build failures here? || thanks that test should be deterministic and not fail unless there is a bug in concatmaps backpressure management did you save the full stacktrace of the failure by any chance? || @akarnokd actually that is all i saw as part of the failurethis was the failing build - https://travis-ciorg/reactivex/rxjava/builds/494276690 ||
6430.0,6432,1,0,0,0,0,0,1,0,"2x composite disposable docs on compositedisposable add and addall methods if the param is null currently the npe error message (produced by objecthelper) is ""d is null"" which is not very helpfulthis is a small refactor for making the message a bit more helpfulresolves #6430 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6432?srcpr&elh1) report> merging [#6432](https://codecovio/gh/reactivex/rxjava/pull/6432?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/9a74adf5f85ebfe5063e8191665956d547d515e0?srcpr&eldesc) will **decrease** coverage by `006%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6432/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6432?srcpr&eltree)```diff@@ coverage diff @@## 2x #6432 +/- ##- coverage 9834% 9827% -007% + complexity 6300 6299 -1 files 675 675 lines 45172 45172 branches 6246 6246 - hits 44425 44394 -31 - misses 229 244 +15 - partials 518 534 +16```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6432?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6432/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `100% (ø)` | `40 (ø)` | :arrow_down: || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6432/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `2% (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6432/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% (-26%)` | `6% (ø)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6432/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6432/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% (-225%)` | `60% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6432/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [internal/operators/observable/observablecachejava](https://codecovio/gh/reactivex/rxjava/pull/6432/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunhy2hllmphdme) | `959% (-164%)` | `34% (-1%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6432/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9468% (-16%)` | `3% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6432/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-12%)` | `2% (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6432/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `9148% (-107%)` | `9% (ø)` | || and [17 more](https://codecovio/gh/reactivex/rxjava/pull/6432/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6432?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6432?srcpr&elfooter) last update [9a74adfe909e08](https://codecovio/gh/reactivex/rxjava/pull/6432?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks for your feedback i think i addressed all of your suggestions ||"
6451.0,6452,1,0,0,0,0,0,1,0,remove dependency of schedulers from observablerefcount resolves #6451in the constructor of `observablerefcount` that takes `connectableobservable source` as the argument we set `timeout` to `0l` in that specific use case of `observablerefcount` `scheduler` is never needed its only referenced in `cancel()` method but if timeout is 0 it wont be triggered at all because there is early return this commit removes the need to depend on `schedulerstrampoline()` and instead passes null to be scheduler when the ref count is not time-based similarly applies the same change to `flowablerefcount`the reasons for this change are the following:1 in projects that dont depend on `schedulers` class if there is no reference to `schedulers` the whole `schedulers` can be stripped out of the library after optimizations (eg proguard) with constructor that references `schedulers` the optimizer cant properly strip it out in our quick test of our android app we were able to reduce the rxjava library size dependency from 51kb to 37kb (after optimization but before compression) by simply avoiding access to `schedulers` in `observablerefcount`2 in terms of modularity `observablerefcount` is just an operator so it by itself should probably not have dependency on what available pool of schedulers (`schedulers`) there are it should just know that there is some `scheduler` that could be passed to `observablerefcount` when `observablerefcount` needs it # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6452?srcpr&elh1) report> merging [#6452](https://codecovio/gh/reactivex/rxjava/pull/6452?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/4a78cfcbf2f0d7008042c15ea8bb6797fcd2b06e?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6452/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6452?srcpr&eltree)```diff@@ coverage diff @@## 2x #6452 +/- ##+ coverage 9827% 9831% +003% - complexity 6296 6298 +2 files 675 675 lines 45173 45173 branches 6246 6246 + hits 44393 44410 +17 + misses 241 238 -3 + partials 539 525 -14```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6452?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ernal/operators/observable/observablerefcountjava](https://codecovio/gh/reactivex/rxjava/pull/6452/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlzknvdw50lmphdme) | `100% (ø)` | `28 (ø)` | :arrow_down: || [/internal/operators/flowable/flowablerefcountjava](https://codecovio/gh/reactivex/rxjava/pull/6452/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvmq291bnquamf2yq) | `100% (ø)` | `28 (ø)` | :arrow_down: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6452/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% (-466%)` | `10% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6452/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9082% (-387%)` | `2% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6452/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6452/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% (-225%)` | `60% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6452/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9215% (-197%)` | `2% (ø)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6452/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0ae1hewjllmphdme) | `991% (-09%)` | `2% (ø)` | || [/operators/maybe/maybeflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6452/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlrmxhde1hcel0zxjhymxlrmxvd2fibguuamf2yq) | `9754% (-082%)` | `2% (ø)` | || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6452/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `9709% (ø)` | `6% (ø)` | :arrow_down: || and [16 more](https://codecovio/gh/reactivex/rxjava/pull/6452/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6452?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6452?srcpr&elfooter) last update [4a78cfc183f2e9](https://codecovio/gh/reactivex/rxjava/pull/6452?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks for the review and the approval! ||
6402.0,6458,1,0,0,1,0,1,1,1,"update the javadoc of the `retry` operator specify that the `times` function parameter describes ""the number of timesto resubscribe if the current observable fails""solves: #6402 bellow is the marble with the number of retries decreased from 2 to 1 if the marble is correct can you upload it to the repository?![retry o n](https://user-imagesgithubusercontentcom/13521751/55914750-3e766e80-5be8-11e9-975e-ae16d0725bddpng) || sure could you also make sure all the other counted `retry()` operators in the other base classes have the correct wording? || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6458?srcpr&elh1) report> merging [#6458](https://codecovio/gh/reactivex/rxjava/pull/6458?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/3958d1bd56e49947cf6253a51f982b300b56a145?srcpr&eldesc) will **decrease** coverage by ` the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6458/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6458?srcpr&eltree)```diff@@ coverage diff @@## 2x #6458 +/- ##- coverage 9826% 9825% -001% + complexity 6295 6293 -2 files 675 675 lines 45173 45173 branches 6246 6246 - hits 44387 44386 -1 - misses 245 248 +3 + partials 541 539 -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6458?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6458/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `567 (ø)` | :arrow_down: || [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6458/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `173 (ø)` | :arrow_down: || [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6458/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `120 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6458/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `542 (ø)` | :arrow_down: || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6458/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9658% (-257%)` | `2% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6458/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9583% (-25%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6458/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9371% (-194%)` | `2% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6458/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [java/io/reactivex/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6458/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9vbmljyxn0uhjvy2vzc29ylmphdme) | `988% (-12%)` | `67% (-1%)` | || [io/reactivex/subscribers/serializedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/6458/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3vic2nyawjlcnmvu2vyawfsaxplzfn1ynnjcmlizxiuamf2yq) | `9886% (-114%)` | `26% (-1%)` | || and [26 more](https://codecovio/gh/reactivex/rxjava/pull/6458/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6458?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6458?srcpr&elfooter) last update [3958d1bd7273d6](https://codecovio/gh/reactivex/rxjava/pull/6458?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || surei updated every base classes also i grabbed this opportunity to update some unit tests to illustrate the javadoc wordingplease note:* `single` already has the right wording* both `maybe` and `flowable` are using the default `retry` marble (https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/retrypng) || nice! thanks! ||"
6460.0,6461,1,0,0,0,0,0,1,0,change error message in observablefromarray changed the error message when an element at position i is null to what was suggested in #6460 could you please update these locations as well? https://githubcom/reactivex/rxjava/blob/2x/src/main/java/io/reactivex/internal/operators/flowable/flowablefromarrayjava#l129https://githubcom/reactivex/rxjava/blob/2x/src/main/java/io/reactivex/internal/operators/flowable/flowablefromarrayjava#l159https://githubcom/reactivex/rxjava/blob/2x/src/main/java/io/reactivex/internal/operators/flowable/flowablefromarrayjava#l212https://githubcom/reactivex/rxjava/blob/2x/src/main/java/io/reactivex/internal/operators/flowable/flowablefromarrayjava#l242 || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6461?srcpr&elh1) report> merging [#6461](https://codecovio/gh/reactivex/rxjava/pull/6461?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/c04cfb8366534560e045f86201c05991763e1643?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6461/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6461?srcpr&eltree)```diff@@ coverage diff @@## 2x #6461 +/- ##+ coverage 9826% 9828% +001% + complexity 6294 6292 -2 files 675 675 lines 45173 45173 branches 6246 6246 + hits 44391 44400 +9 + misses 246 237 -9 partials 536 536```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6461?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [internal/operators/flowable/flowablefromarrayjava](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbufycmf5lmphdme) | `9491% (ø)` | `3 (ø)` | :arrow_down: || [rnal/operators/observable/observablefromarrayjava](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzyb21bcnjhes5qyxzh) | `100% (ø)` | `3 (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8758% (-85%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9179% (-299%)` | `2% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-239%)` | `2% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [activex/internal/schedulers/scheduledrunnablejava](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ty2hlzhvszwrsdw5uywjszs5qyxzh) | `9807% (-193%)` | `29% (-1%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9521% (-107%)` | `3% (ø)` | || [activex/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9fegvjdxrvclnjagvkdwxlci5qyxzh) | `9597% (-101%)` | `10% (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0afnpbmdszs5qyxzh) | `9906% (-094%)` | `2% (ø)` | || and [17 more](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6461?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6461?srcpr&elfooter) last update [c04cfb8fa8abac](https://codecovio/gh/reactivex/rxjava/pull/6461?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || sure its done ||
646.0,6469,1,0,0,1,0,1,1,1,remove redundant methods from sample(observable) resolves: #6468 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6469?srcpr&elh1) report> merging [#6469](https://codecovio/gh/reactivex/rxjava/pull/6469?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/deeb14150ac21ad8c7b38c1ac692be487375faf5?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6469/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6469?srcpr&eltree)```diff@@ coverage diff @@## 2x #6469 +/- ##+ coverage 9826% 9829% +003% + complexity 6295 6291 -4 files 675 675 lines 45173 45159 -14 branches 6246 6244 -2 + hits 44388 44390 +2 + misses 247 240 -7 + partials 538 529 -9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6469?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [al/operators/flowable/flowablesamplepublisherjava](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2ftcgxluhvibglzagvylmphdme) | `100% (ø)` | `3 (ø)` | :arrow_down: || [ors/observable/observablesamplewithobservablejava](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnhbxbszvdpdghpynnlcnzhymxllmphdme) | `9868% (-012%)` | `3 (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% (-466%)` | `10% (-1%)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `2% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9323% (-242%)` | `2% (ø)` | || [activex/internal/schedulers/scheduledrunnablejava](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ty2hlzhvszwrsdw5uywjszs5qyxzh) | `9807% (-193%)` | `29% (-1%)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9528% (-142%)` | `3% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9861% (-139%)` | `57% (-1%)` | || [java/io/reactivex/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9vbmljyxn0uhjvy2vzc29ylmphdme) | `988% (-12%)` | `67% (-1%)` | || and [22 more](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6469?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6469?srcpr&elfooter) last update [deeb141308f7d0](https://codecovio/gh/reactivex/rxjava/pull/6469?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || could you also check `flowablesample(flowable)`? || > could you also check `flowablesample(flowable)`?ill check into it || done with the `flowablesample` ||
6481.0,6483,1,0,0,0,0,0,1,0,correction for maybecount doc typo resolves #6481 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6483?srcpr&elh1) report> merging [#6483](https://codecovio/gh/reactivex/rxjava/pull/6483?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/1830453000ff04b099074bde1a17fa594b5468aa?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6483/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6483?srcpr&eltree)```diff@@ coverage diff @@## 2x #6483 +/- ##+ coverage 9825% 9827% +001% complexity 6295 6295 files 675 675 lines 45159 45159 branches 6244 6244 + hits 44372 44379 +7 + misses 246 243 -3 + partials 541 537 -4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6483?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6483/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `173 (ø)` | :arrow_down: || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6483/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `2% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6483/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9469% (-354%)` | `11% (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6483/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `962% (-211%)` | `10% (-1%)` | || [java/io/reactivex/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6483/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9vbmljyxn0uhjvy2vzc29ylmphdme) | `988% (-12%)` | `67% (-1%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6483/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9521% (-107%)` | `3% (ø)` | || [l/operators/observable/observabletimeouttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6483/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvrpbwvvdxruaw1lzc5qyxzh) | `9915% (-085%)` | `3% (ø)` | || [ex/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6483/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvwbgf5lmphdme) | `9409% (-085%)` | `20% (ø)` | || [ain/java/io/reactivex/subjects/unicastsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/6483/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvvw5py2fzdfn1ymply3quamf2yq) | `9936% (-064%)` | `64% (-1%)` | || [vex/internal/operators/parallel/parallelrunonjava](https://codecovio/gh/reactivex/rxjava/pull/6483/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsunvut24uamf2yq) | `9661% (-049%)` | `8% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6483/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6483?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6483?srcpr&elfooter) last update [1830453798d186](https://codecovio/gh/reactivex/rxjava/pull/6483?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
648.0,6488,1,0,0,1,0,1,1,1,2x: fix zip not stopping the subscription upon eager error the `observablezip` did not stop subscribing to the next sources if the previous one failed with an `onerror` `flowablezip` works as intendedfixes #6487 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6488?srcpr&elh1) report> merging [#6488](https://codecovio/gh/reactivex/rxjava/pull/6488?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/4ca7a9b91df673801ed6d09a7d79cfeff7699f79?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6488/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6488?srcpr&eltree)```diff@@ coverage diff @@## 2x #6488 +/- ##- coverage 9826% 9825% -002% - complexity 6297 6298 +1 files 675 675 lines 45159 45163 +4 branches 6244 6244 - hits 44374 44373 -1 - misses 244 247 +3 - partials 541 543 +2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6488?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [x/internal/operators/observable/observablezipjava](https://codecovio/gh/reactivex/rxjava/pull/6488/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvppcc5qyxzh) | `100% (ø)` | `6 (ø)` | :arrow_down: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6488/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% (-466%)` | `10% (-1%)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6488/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `2% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6488/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9469% (-354%)` | `11% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6488/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% (-268%)` | `5% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6488/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-239%)` | `2% (ø)` | || [activex/internal/schedulers/scheduledrunnablejava](https://codecovio/gh/reactivex/rxjava/pull/6488/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ty2hlzhvszwrsdw5uywjszs5qyxzh) | `9807% (-193%)` | `29% (-1%)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6488/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9528% (-142%)` | `3% (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6488/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8936% (-107%)` | `9% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6488/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9178% (-097%)` | `2% (ø)` | || and [20 more](https://codecovio/gh/reactivex/rxjava/pull/6488/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6488?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6488?srcpr&elfooter) last update [4ca7a9ba1bdaf6](https://codecovio/gh/reactivex/rxjava/pull/6488?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5628.0,6519,1,0,0,1,0,1,1,1,3x: connectableflowable/connetableobservabe redesign this pr changes the connectable api to have a specific `reset` method to reset a terminated connectable source as part of the official apiin 2x when `publish()` terminated it reset itself to a fresh state which could lead to late consumers not receiving events as there might be no one to call `connect()` again (see #6501) however `replay()` did not reset itself thus late consumers got the cached events however a reconnect started the sequence and new consumers may have missed itemsin 3x this two corner cases have been fixed by the introduction of `reset()` both `publish` and `replay` now remain in their terminated state until `reset` is called if the connection is disposed it will automatically reset their state just like before the state transitions are as follows:1 **fresh** -> `connect()` -> **running** -> `oncomplete()`/`onerror()` -> **terminated** -> `reset()` -> **fresh**2 **fresh** -> `connect()` -> **running** -> `dispose()` -> **fresh**3 **fresh** -> `connect()` -> **running** -> `oncomplete()`/`onerror()` -> **terminated** -> `dispose()` -> **fresh**4 **fresh** -> `connect()` -> **running** -> `oncomplete()`/`onerror()` -> **terminated** -> `connect()` -> **running**this does resolve the race condition with `publish()refcount()` described in #6501in addition there are some changes to `flowablepublish()`s behavior:it no longer keeps consuming the upstream if there are no subscribers this implies if the source terminates while there are unconsumed items in the internal buffer those will be available for observation*i have no strong preference on this property and in comparison `observablepublish` drops items because there is no backpressure buffer in its implementation*upstream errors are not reported to the `rxjavapluginsonerror` handler when if there are no subscribers but have to be observed via a subscriber*because terminal events are available until `reset` now we cant know really if there is going to be a subscriber or not however it might be possible to detect the no-consumer case upon an error and still report it when `reset` or `dispose` is called*resolves #5628resolves #5899 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&elh1) report> merging [#6519](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/583c4e71fd7bedd73b05d382a429e1be588e39a3?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `9535%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6519/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&eltree)```diff@@ coverage diff @@## 3x #6519 +/- ##- coverage 982% 9817% -003% - complexity 6245 6247 +2 files 675 675 lines 45051 45011 -40 branches 6225 6211 -14 - hits 44241 44189 -52 - misses 275 283 +8 - partials 535 539 +4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [o/reactivex/observables/connectableobservablejava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvb2jzzxj2ywjszxmvq29ubmvjdgfibgvpynnlcnzhymxllmphdme) | `100% (ø)` | `12 (ø)` | :arrow_down: || [va/io/reactivex/flowables/connectableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzmxvd2fibgvzl0nvbm5ly3rhymxlrmxvd2fibguuamf2yq) | `100% (ø)` | `12 (ø)` | :arrow_down: || [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `565 (ø)` | :arrow_down: || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `100% (+53%)` | `18 (+7)` | :arrow_up: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `540 (ø)` | :arrow_down: || [ernal/operators/observable/observablerefcountjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlzknvdw50lmphdme) | `100% (ø)` | `24 (-4)` | :arrow_down: || [/internal/operators/flowable/flowablerefcountjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvmq291bnquamf2yq) | `100% (ø)` | `24 (-4)` | :arrow_down: || [nternal/operators/observable/observablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlcgxhes5qyxzh) | `9837% (-026%)` | `20 (ø)` | || [ex/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvwbgf5lmphdme) | `9435% (-059%)` | `20 (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9655% (+034%)` | `18 (+7)` | :arrow_up: || and [33 more](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&elfooter) last update [583c4e736a8733](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
589.0,6519,1,0,0,1,0,1,1,1,3x: connectableflowable/connetableobservabe redesign this pr changes the connectable api to have a specific `reset` method to reset a terminated connectable source as part of the official apiin 2x when `publish()` terminated it reset itself to a fresh state which could lead to late consumers not receiving events as there might be no one to call `connect()` again (see #6501) however `replay()` did not reset itself thus late consumers got the cached events however a reconnect started the sequence and new consumers may have missed itemsin 3x this two corner cases have been fixed by the introduction of `reset()` both `publish` and `replay` now remain in their terminated state until `reset` is called if the connection is disposed it will automatically reset their state just like before the state transitions are as follows:1 **fresh** -> `connect()` -> **running** -> `oncomplete()`/`onerror()` -> **terminated** -> `reset()` -> **fresh**2 **fresh** -> `connect()` -> **running** -> `dispose()` -> **fresh**3 **fresh** -> `connect()` -> **running** -> `oncomplete()`/`onerror()` -> **terminated** -> `dispose()` -> **fresh**4 **fresh** -> `connect()` -> **running** -> `oncomplete()`/`onerror()` -> **terminated** -> `connect()` -> **running**this does resolve the race condition with `publish()refcount()` described in #6501in addition there are some changes to `flowablepublish()`s behavior:it no longer keeps consuming the upstream if there are no subscribers this implies if the source terminates while there are unconsumed items in the internal buffer those will be available for observation*i have no strong preference on this property and in comparison `observablepublish` drops items because there is no backpressure buffer in its implementation*upstream errors are not reported to the `rxjavapluginsonerror` handler when if there are no subscribers but have to be observed via a subscriber*because terminal events are available until `reset` now we cant know really if there is going to be a subscriber or not however it might be possible to detect the no-consumer case upon an error and still report it when `reset` or `dispose` is called*resolves #5628resolves #5899 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&elh1) report> merging [#6519](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/583c4e71fd7bedd73b05d382a429e1be588e39a3?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `9535%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6519/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&eltree)```diff@@ coverage diff @@## 3x #6519 +/- ##- coverage 982% 9817% -003% - complexity 6245 6247 +2 files 675 675 lines 45051 45011 -40 branches 6225 6211 -14 - hits 44241 44189 -52 - misses 275 283 +8 - partials 535 539 +4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [o/reactivex/observables/connectableobservablejava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvb2jzzxj2ywjszxmvq29ubmvjdgfibgvpynnlcnzhymxllmphdme) | `100% (ø)` | `12 (ø)` | :arrow_down: || [va/io/reactivex/flowables/connectableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzmxvd2fibgvzl0nvbm5ly3rhymxlrmxvd2fibguuamf2yq) | `100% (ø)` | `12 (ø)` | :arrow_down: || [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `565 (ø)` | :arrow_down: || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `100% (+53%)` | `18 (+7)` | :arrow_up: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `540 (ø)` | :arrow_down: || [ernal/operators/observable/observablerefcountjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlzknvdw50lmphdme) | `100% (ø)` | `24 (-4)` | :arrow_down: || [/internal/operators/flowable/flowablerefcountjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvmq291bnquamf2yq) | `100% (ø)` | `24 (-4)` | :arrow_down: || [nternal/operators/observable/observablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlcgxhes5qyxzh) | `9837% (-026%)` | `20 (ø)` | || [ex/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvwbgf5lmphdme) | `9435% (-059%)` | `20 (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9655% (+034%)` | `18 (+7)` | :arrow_up: || and [33 more](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&elfooter) last update [583c4e736a8733](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6501.0,6519,1,0,0,1,0,1,1,1,3x: connectableflowable/connetableobservabe redesign this pr changes the connectable api to have a specific `reset` method to reset a terminated connectable source as part of the official apiin 2x when `publish()` terminated it reset itself to a fresh state which could lead to late consumers not receiving events as there might be no one to call `connect()` again (see #6501) however `replay()` did not reset itself thus late consumers got the cached events however a reconnect started the sequence and new consumers may have missed itemsin 3x this two corner cases have been fixed by the introduction of `reset()` both `publish` and `replay` now remain in their terminated state until `reset` is called if the connection is disposed it will automatically reset their state just like before the state transitions are as follows:1 **fresh** -> `connect()` -> **running** -> `oncomplete()`/`onerror()` -> **terminated** -> `reset()` -> **fresh**2 **fresh** -> `connect()` -> **running** -> `dispose()` -> **fresh**3 **fresh** -> `connect()` -> **running** -> `oncomplete()`/`onerror()` -> **terminated** -> `dispose()` -> **fresh**4 **fresh** -> `connect()` -> **running** -> `oncomplete()`/`onerror()` -> **terminated** -> `connect()` -> **running**this does resolve the race condition with `publish()refcount()` described in #6501in addition there are some changes to `flowablepublish()`s behavior:it no longer keeps consuming the upstream if there are no subscribers this implies if the source terminates while there are unconsumed items in the internal buffer those will be available for observation*i have no strong preference on this property and in comparison `observablepublish` drops items because there is no backpressure buffer in its implementation*upstream errors are not reported to the `rxjavapluginsonerror` handler when if there are no subscribers but have to be observed via a subscriber*because terminal events are available until `reset` now we cant know really if there is going to be a subscriber or not however it might be possible to detect the no-consumer case upon an error and still report it when `reset` or `dispose` is called*resolves #5628resolves #5899 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&elh1) report> merging [#6519](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/583c4e71fd7bedd73b05d382a429e1be588e39a3?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `9535%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6519/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&eltree)```diff@@ coverage diff @@## 3x #6519 +/- ##- coverage 982% 9817% -003% - complexity 6245 6247 +2 files 675 675 lines 45051 45011 -40 branches 6225 6211 -14 - hits 44241 44189 -52 - misses 275 283 +8 - partials 535 539 +4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [o/reactivex/observables/connectableobservablejava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvb2jzzxj2ywjszxmvq29ubmvjdgfibgvpynnlcnzhymxllmphdme) | `100% (ø)` | `12 (ø)` | :arrow_down: || [va/io/reactivex/flowables/connectableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzmxvd2fibgvzl0nvbm5ly3rhymxlrmxvd2fibguuamf2yq) | `100% (ø)` | `12 (ø)` | :arrow_down: || [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `565 (ø)` | :arrow_down: || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `100% (+53%)` | `18 (+7)` | :arrow_up: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `540 (ø)` | :arrow_down: || [ernal/operators/observable/observablerefcountjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlzknvdw50lmphdme) | `100% (ø)` | `24 (-4)` | :arrow_down: || [/internal/operators/flowable/flowablerefcountjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvmq291bnquamf2yq) | `100% (ø)` | `24 (-4)` | :arrow_down: || [nternal/operators/observable/observablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlcgxhes5qyxzh) | `9837% (-026%)` | `20 (ø)` | || [ex/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvwbgf5lmphdme) | `9435% (-059%)` | `20 (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9655% (+034%)` | `18 (+7)` | :arrow_up: || and [33 more](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&elfooter) last update [583c4e736a8733](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6520.0,6522,1,0,0,0,0,1,1,0,2x: fix concatmapdelayerror not continuing on fused inner source crash the `callable` fused path didnt consider the error-delay settings and cut the sequence shortfixes: #6520 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6522?srcpr&elh1) report> merging [#6522](https://codecovio/gh/reactivex/rxjava/pull/6522?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/31e8d48a53c42c46a01f1db3d09ab4cafe5133f6?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6522/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6522?srcpr&eltree)```diff@@ coverage diff @@## 2x #6522 +/- ##+ coverage 9824% 9824% + (+001%)` | `6 (ø)` | :arrow_down: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6522/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% (-466%)` | `10% (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6522/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9469% (-354%)` | `11% (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6522/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% (-26%)` | `6% (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6522/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9578% (-254%)` | `10% (-1%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6522/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9456% (-218%)` | `2% (ø)` | || [rnal/operators/flowable/flowableskiplasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6522/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2tpcexhc3ruaw1lzc5qyxzh) | `9591% (-205%)` | `2% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6522/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [activex/internal/schedulers/scheduledrunnablejava](https://codecovio/gh/reactivex/rxjava/pull/6522/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ty2hlzhvszwrsdw5uywjszs5qyxzh) | `9807% (-193%)` | `29% (-1%)` | || [ternal/operators/flowable/flowablesubscribeonjava](https://codecovio/gh/reactivex/rxjava/pull/6522/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3vic2nyawjlt24uamf2yq) | `9661% (-17%)` | `2% (ø)` | || and [21 more](https://codecovio/gh/reactivex/rxjava/pull/6522/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6522?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6522?srcpr&elfooter) last update [31e8d48cab93e5](https://codecovio/gh/reactivex/rxjava/pull/6522?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6520.0,6523,1,0,0,0,0,1,1,0,3x: fix concatmapdelayerror not continuing on fused inner source crash the `supplier` fused path didnt consider the error-delay settings and cut the sequence shortfixes: #6520
6518.0,6525,1,0,0,0,0,1,1,0,"3x: remove `test` from `testxxx` method names create a validator fix #6518- [x] create validator- [x] automatically rename methods ""testxxx"" to ""xxx"" (analog to [fixlicenseheaders](https://githubcom/reactivex/rxjava/blob/3x/src/test/java/io/reactivex/validators/fixlicenseheadersjava) check)- [x] rename methods # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6525?srcpr&elh1) report> merging [#6525](https://codecovio/gh/reactivex/rxjava/pull/6525?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/de4ce93d91426bfc20c986287b39bc168d524e46?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6525/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6525?srcpr&eltree)```diff@@ coverage diff @@## 3x #6525 +/- ##+ coverage 9816% 9819% +003% + complexity 6251 6248 -3 files 675 675 lines 45011 45011 branches 6211 6211 + hits 44183 44199 +16 + misses 286 280 -6 + partials 542 532 -10```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6525?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9316% (-513%)` | `2% (ø)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9275% (-194%)` | `2% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9861% (-139%)` | `57% (-1%)` | || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `9894% (-106%)` | `2% (ø)` | || [l/operators/observable/observabletimeouttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvrpbwvvdxruaw1lzc5qyxzh) | `9915% (-085%)` | `3% (ø)` | || [/operators/maybe/maybeflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlrmxhde1hcel0zxjhymxlrmxvd2fibguuamf2yq) | `9754% (-082%)` | `2% (ø)` | || [reactivex/internal/queue/spsclinkedarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0xpbmtlzefycmf5uxvldwuuamf2yq) | `9682% (-08%)` | `38% (-1%)` | || [ain/java/io/reactivex/subjects/unicastsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvvw5py2fzdfn1ymply3quamf2yq) | `9936% (-064%)` | `64% (-1%)` | || [x/internal/operators/flowable/flowableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcc5qyxzh) | `8763% (-053%)` | `3% (ø)` | || and [17 more](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6525?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6525?srcpr&elfooter) last update [de4ce93aa405f6](https://codecovio/gh/reactivex/rxjava/pull/6525?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || i was doing a massive set of changes to the test files myself so it would be great you rolled back the renames kept the validator code but not fail when violations are found ill merge in #6526 then just the validator then we can enable the offline/ci failure mode and fix the names in a fresh pr || i added `@ignore` annotation for now and removed a commit with the actual renamingi will open a new pr when #6526 and this one are merged ||"
6518.0,6528,1,0,0,0,0,1,1,0,rename test methods and enable the check fix #6518 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6528?srcpr&elh1) report> :exclamation: no coverage uploaded for pull request base (`3x@edb1f71`) [click here to learn what that means](https://docscodecovio/docs/error-reference#section-missing-base-commit)> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6528/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6528?srcpr&eltree)```diff@@ coverage diff @@## 3x #6528 +/- ## coverage ? 9822% complexity ? 6157 files ? 675 lines ? 44785 branches ? 6181 hits ? 43989 misses ? 274 partials ? 522```------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6528?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6528?srcpr&elfooter) last update [edb1f7135e510a](https://codecovio/gh/reactivex/rxjava/pull/6528?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
647.0,6532,1,0,0,1,0,1,1,1,3x: add eager truncation to bounded replay() to avoid item retention this pr adds the `eagertruncate` option to the `replay` operator so that the `head` node will lose the item reference it holds upon truncationthe bounded buffers in `replay` implement a linked list that when truncated moves the head reference forward along the links atomically this allows late consumers to pick up the head and follow the links between them to get items replayed however the truncation may happen concurrently with a consumer working on some prior nodes so if the truncation would `null` out the value the consumer reaching the same node would see `null` as well and fail![image](https://user-imagesgithubusercontentcom/1269832/59920898-55c5a980-942c-11e9-8dc1-b9e07264a36fpng)to avoid this type of retention the head node has to be refreshed with a new node still pointing to the next node in the chain but without any value ![image](https://user-imagesgithubusercontentcom/1269832/59921066-dbe1f000-942c-11e9-92a9-d2e06f1839a0png)the reason this is not the default is that it requires an additional allocation for each new incoming value when the buffer is full which would reduce performance in cases where the excess retention is not a problemoverloads to both the direct and function-variants of both `flowablereplay()` and `observablereplay()` have been added to avoid too many overloads only one extra overload has been added extending the signature of the longest parameterized method per each bounds mode (size time time+size)their unit test files have been cloned so that both the non-eager (original) behavior and the eager behavior is tested separatelyfixes #6475 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6532?srcpr&elh1) report> merging [#6532](https://codecovio/gh/reactivex/rxjava/pull/6532?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/e3b695a5b1e8a94a0948e75a06c2091cc84fe19a?srcpr&eldesc) will **decrease** coverage by ` the diff coverage is `9837%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6532/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6532?srcpr&eltree)```diff@@ coverage diff @@## 3x #6532 +/- ##- coverage 9826% 9826% -001% - complexity 6185 6199 +14 files 680 680 lines 44883 44954 +71 branches 6193 6197 +4 + hits 44106 44175 +69 + misses 247 244 -3 - partials 530 535 +5```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6532?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6532/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `572 (+6)` | :arrow_up: || [nal/operators/flowable/flowableinternalhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6532/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlsw50zxjuywxizwxwzxiuamf2yq) | `100% (ø)` | `15 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6532/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `547 (+6)` | :arrow_up: || [ex/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6532/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvwbgf5lmphdme) | `9446% (+011%)` | `20 (ø)` | :arrow_down: || [operators/observable/observableinternalhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6532/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuludgvybmfssgvscgvylmphdme) | `100% (ø)` | `15 (ø)` | :arrow_down: || [nternal/operators/observable/observablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6532/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlcgxhes5qyxzh) | `9789% (-049%)` | `20 (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6532/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9316% (-342%)` | `2% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6532/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% (-272%)` | `2% (ø)` | || [activex/internal/schedulers/scheduledrunnablejava](https://codecovio/gh/reactivex/rxjava/pull/6532/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ty2hlzhvszwrsdw5uywjszs5qyxzh) | `9807% (-193%)` | `29% (-1%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6532/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9468% (-16%)` | `3% (ø)` | || and [24 more](https://codecovio/gh/reactivex/rxjava/pull/6532/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6532?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6532?srcpr&elfooter) last update [e3b695aef4f6b2](https://codecovio/gh/reactivex/rxjava/pull/6532?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
634.0,6534,1,0,0,0,0,1,1,1,3x: make using() resource disposal order consistent with eager-mode make the resource disposal order in all `using` implementations are consistent with the eagerness of the operator:**eager**: dispose resource then dispose the upstream**non-eager**: dispose the upstream then dispose the resourcefixes: #6347 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6534?srcpr&elh1) report> merging [#6534](https://codecovio/gh/reactivex/rxjava/pull/6534?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/46b4ac8cb36debf30b7db43de0e9e9805ea619e9?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6534/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6534?srcpr&eltree)```diff@@ coverage diff @@## 3x #6534 +/- ##+ coverage 9821% 9824% +003% - complexity 6189 6190 +1 files 680 680 lines 44883 44905 +22 branches 6193 6198 +5 + hits 44081 44118 +37 + misses 261 249 -12 + partials 541 538 -3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6534?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6534/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `566 (ø)` | :arrow_down: || [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6534/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% (ø)` | `118 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6534/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `541 (ø)` | :arrow_down: || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6534/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% (ø)` | `148 (ø)` | :arrow_down: || [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6534/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% (ø)` | `172 (ø)` | :arrow_down: || [activex/internal/operators/single/singleusingjava](https://codecovio/gh/reactivex/rxjava/pull/6534/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvvc2luzy5qyxzh) | `100% (ø)` | `4 (ø)` | :arrow_down: || [reactivex/internal/operators/maybe/maybeusingjava](https://codecovio/gh/reactivex/rxjava/pull/6534/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvxnpbmcuamf2yq) | `100% (ø)` | `4 (ø)` | :arrow_down: || [vex/internal/operators/flowable/flowableusingjava](https://codecovio/gh/reactivex/rxjava/pull/6534/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvxnpbmcuamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || [ternal/operators/completable/completableusingjava](https://codecovio/gh/reactivex/rxjava/pull/6534/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvxnpbmcuamf2yq) | `100% (ø)` | `4 (ø)` | :arrow_down: || [internal/operators/observable/observableusingjava](https://codecovio/gh/reactivex/rxjava/pull/6534/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvvzaw5nlmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || and [25 more](https://codecovio/gh/reactivex/rxjava/pull/6534/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6534?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6534?srcpr&elfooter) last update [46b4ac87cdd508](https://codecovio/gh/reactivex/rxjava/pull/6534?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
644.0,6538,1,0,0,1,0,1,1,1,3x: add concatmap with scheduler guaranteeing where the mapper runs this pr adds an overload to `concatmap` and `concatmapdelayerror` in both `flowable` and `observable` which makes sure the `mapper` function is always executed on a dedicated schedulerby default `concatmap` may execute the `mapper` function on various threads: the subscribing thread the upstream thread generating the items to be mapped or the thread where the generated inner source terminates these overloads remove this kind of uncertaintythe implementation is a copy of the original concatmap instead of an extension so that optimizations for the non-scheduled variants still work without extra overheadoverloads to the `concatmap{single|maybe|completable}` and `concatmap{single|maybe|completable}delayerror` *may be added* in a separate pr laterresolves #6447 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6538?srcpr&elh1) report> merging [#6538](https://codecovio/gh/reactivex/rxjava/pull/6538?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/94ae79572715d5e6f9d6e63d906069d72990f1ba?srcpr&eldesc) will **increase** coverage by `007%`> the diff coverage is `9886%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6538/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6538?srcpr&eltree)```diff@@ coverage diff @@## 3x #6538 +/- ##+ coverage 982% 9827% +007% - complexity 6198 6214 +16 files 680 682 +2 lines 44976 45505 +529 branches 6202 6288 +86 + hits 44168 44722 +554 + misses 259 248 -11 + partials 549 535 -14```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6538?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `575 (+3)` | :arrow_up: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `550 (+3)` | :arrow_up: || [ators/observable/observableconcatmapschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunvbmnhde1hcfnjagvkdwxlci5qyxzh) | `9882% (ø)` | `4 (?)` | || [operators/flowable/flowableconcatmapschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq29uy2f0twfwu2nozwr1bgvylmphdme) | `9883% (ø)` | `4 (?)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8936% (-426%)` | `9% (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `2% (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9658% (-244%)` | `51% (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9468% (-16%)` | `3% (ø)` | || [ivex/internal/operators/maybe/maybemergearrayjava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjltwvyz2vbcnjhes5qyxzh) | `9662% (-113%)` | `6% (ø)` | || and [25 more](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6538?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6538?srcpr&elfooter) last update [94ae79500ce78b](https://codecovio/gh/reactivex/rxjava/pull/6538?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6543.0,6544,1,0,0,0,0,0,1,0,fixing version tag on schedulersfrom(executor boolean) resolves #6543 updating the version tag on `schedulersfrom(executor boolean)` since it was promoted # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6544?srcpr&elh1) report> merging [#6544](https://codecovio/gh/reactivex/rxjava/pull/6544?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/fb37226be292c8ee0934311f8ca2f139dfd0dc5a?srcpr&eldesc) will **decrease** coverage by `005%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6544/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6544?srcpr&eltree)```diff@@ coverage diff @@## 3x #6544 +/- ##- coverage 9827% 9822% -006% + complexity 6205 6200 -5 files 682 682 lines 45459 45459 branches 6288 6288 - hits 44675 44650 -25 - misses 256 266 +10 - partials 528 543 +15```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6544?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/schedulers/schedulersjava](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc2nozwr1bgvycy9ty2hlzhvszxjzlmphdme) | `100% (ø)` | `11 (ø)` | :arrow_down: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-598%)` | `2% (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `2% (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9658% (-244%)` | `51% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% (-214%)` | `5% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [tivex/internal/operators/single/singletimeoutjava](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuaw1lb3v0lmphdme) | `9833% (-167%)` | `2% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9402% (-164%)` | `2% (ø)` | || and [16 more](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6544?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6544?srcpr&elfooter) last update [fb372261404b82](https://codecovio/gh/reactivex/rxjava/pull/6544?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6551.0,6556,1,0,0,1,0,1,1,1,3x rename on error resume next methods to disambiguate when calling from kotlin (#6551) resolves #6551 - renamed `onerrorresumenext(source)` to `onerrorresumewith(source)` for `observable` `maybe` `single` and `flowable`- renamed some unit tests and their classes to reflect the method name change- changed parameter type of `singleonerrorresumewith` from `single` to `singlesource` - updated javadocs for all renamed methods- removed redundant casts for unit tests- deleted duplicate unit test that arose from no longer needing to cast arguments
6558.0,6559,1,0,0,0,0,1,1,1,"3x fix npe when debouncing empty source **background** related issue #6558 debounce with selector on the empty `observable` leads to npeit happens because of `debounceobserver#debouncer` field is set up only when `onnext` is called when `onnext` isnt called at all like when debouncing `observableempty()` we get a null reference from `debouncer` and call `emit` on `null` which actually leads to npe**change**wrap `emit` call with null check both in `observabledebounce` and `flowabledebounce`**test plan**to check `observable`:```/gradlew test --tests ""ioreactivexinternaloperatorsobservableobservabledebouncetestdebounceonempty""````to check `flowable`:```/gradlew test --tests ""ioreactivexinternaloperatorsflowableflowabledebouncetestdebounceonempty""```` # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6559?srcpr&elh1) report> merging [#6559](https://codecovio/gh/reactivex/rxjava/pull/6559?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/b40a892b9fd1be66d87b8bc4edd561d3fac6db16?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6559/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6559?srcpr&eltree)```diff@@ coverage diff @@## 3x #6559 +/- ##- coverage 9816% 9813% -003% - complexity 6198 6199 +1 files 682 682 lines 45459 45461 +2 branches 6288 6290 +2 - hits 44626 44615 -11 - misses 275 288 +13 partials 558 558```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6559?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/internal/operators/flowable/flowabledebouncejava](https://codecovio/gh/reactivex/rxjava/pull/6559/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrgvib3vuy2uuamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || [ernal/operators/observable/observabledebouncejava](https://codecovio/gh/reactivex/rxjava/pull/6559/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszurlym91bmnllmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6559/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% (-654%)` | `2% (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6559/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% (-466%)` | `10% (-1%)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6559/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6559/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `8888% (-194%)` | `2% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6559/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9583% (-167%)` | `2% (ø)` | || [tivex/internal/operators/single/singletimeoutjava](https://codecovio/gh/reactivex/rxjava/pull/6559/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuaw1lb3v0lmphdme) | `9833% (-167%)` | `2% (ø)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6559/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9849% (-151%)` | `3% (ø)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6559/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9528% (-142%)` | `3% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6559/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6559?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6559?srcpr&elfooter) last update [b40a8924c644de](https://codecovio/gh/reactivex/rxjava/pull/6559?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||"
6558.0,6560,1,0,0,0,0,1,1,1,"2x fix npe when debouncing empty source **background** related issue #6558 cherry pick of #6559 for 2x versiondebounce with selector on the empty `observable` leads to npeit happens because of `debounceobserver#debouncer` field is set up only when `onnext` is called when `onnext` isnt called at all like when debouncing `observableempty()` we get a null reference from `debouncer` and call `emit` on `null` which actually leads to npe**change**wrap `emit` call with null check both in `observabledebounce` and `flowabledebounce`**test plan**to check `observable`:```/gradlew test --tests ""ioreactivexinternaloperatorsobservableobservabledebouncetestdebounceonempty""````to check `flowable`:```/gradlew test --tests ""ioreactivexinternaloperatorsflowableflowabledebouncetestdebounceonempty""```` # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6560?srcpr&elh1) report> merging [#6560](https://codecovio/gh/reactivex/rxjava/pull/6560?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/67b9cf6ac86907e83044e516b82f6594409b091c?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6560/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6560?srcpr&eltree)```diff@@ coverage diff @@## 2x #6560 +/- ##- coverage 9825% 9824% -002% - complexity 6334 6337 +3 files 677 677 lines 45486 45488 +2 branches 6319 6321 +2 - hits 44691 44688 -3 - misses 249 252 +3 - partials 546 548 +2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6560?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/internal/operators/flowable/flowabledebouncejava](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrgvib3vuy2uuamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || [ernal/operators/observable/observabledebouncejava](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszurlym91bmnllmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `8888% (-58%)` | `2% (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-299%)` | `2% (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% (-26%)` | `6% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-239%)` | `2% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% (-214%)` | `5% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9665% (-168%)` | `13% (ø)` | || and [21 more](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6560?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6560?srcpr&elfooter) last update [67b9cf6030c253](https://codecovio/gh/reactivex/rxjava/pull/6560?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||"
655.0,6564,1,0,0,1,0,1,1,1,3x: remove buffer/window with supplier & onexceptionresumenext this pr removes 3 kinds of operators that had no noticeable use bases or use cases on their own in the past years- `buffer(supplier [ supplier])`- `window(supplier [ int])`- `onexceptionresumenext( )`resolves #6554 resolves #6555 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&elh1) report> merging [#6564](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/71945f3b5f0cb4dcb358172b749710c7d32cb96e?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6564/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&eltree)```diff@@ coverage diff @@## 3x #6564 +/- ##+ coverage 9819% 9819% + (ø)` | `565 (-5)` | :arrow_down: || [al/operators/observable/observableonerrornextjava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu9urxjyb3jozxh0lmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `540 (-5)` | :arrow_down: || [ternal/operators/flowable/flowableonerrornextjava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlt25fcnjvck5lehquamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-523%)` | `2% (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9583% (-25%)` | `2% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9658% (-244%)` | `51% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-239%)` | `2% (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `927% (-219%)` | `2% (ø)` | || and [23 more](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&elfooter) last update [71945f3caeba3a](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6554.0,6564,1,0,0,1,0,1,1,1,3x: remove buffer/window with supplier & onexceptionresumenext this pr removes 3 kinds of operators that had no noticeable use bases or use cases on their own in the past years- `buffer(supplier [ supplier])`- `window(supplier [ int])`- `onexceptionresumenext( )`resolves #6554 resolves #6555 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&elh1) report> merging [#6564](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/71945f3b5f0cb4dcb358172b749710c7d32cb96e?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6564/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&eltree)```diff@@ coverage diff @@## 3x #6564 +/- ##+ coverage 9819% 9819% + (ø)` | `565 (-5)` | :arrow_down: || [al/operators/observable/observableonerrornextjava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu9urxjyb3jozxh0lmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `540 (-5)` | :arrow_down: || [ternal/operators/flowable/flowableonerrornextjava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlt25fcnjvck5lehquamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-523%)` | `2% (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9583% (-25%)` | `2% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9658% (-244%)` | `51% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-239%)` | `2% (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `927% (-219%)` | `2% (ø)` | || and [23 more](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&elfooter) last update [71945f3caeba3a](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6576.0,6577,1,0,0,0,0,0,1,0,fix issue #6576 - observableblockingsubscribe compares blockingobserverterminated with wrong object fix #6576 compare with `v` instead of `o` # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6577?srcpr&elh1) report> merging [#6577](https://codecovio/gh/reactivex/rxjava/pull/6577?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/a38268c738af7ae1ca50dc4af2bfbb5713361411?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6577/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6577?srcpr&eltree)```diff@@ coverage diff @@## 3x #6577 +/- ##+ coverage 9821% 9822% + (ø)` | `9 (ø)` | :arrow_down: || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6577/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9658% (-244%)` | `51% (ø)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6577/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6577/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `913% (-145%)` | `2% (ø)` | || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6577/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `9645% (-13%)` | `6% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6577/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-12%)` | `2% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6577/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9565% (-109%)` | `2% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6577/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% (-107%)` | `5% (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6577/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0afnpbmdszs5qyxzh) | `9906% (-094%)` | `2% (ø)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6577/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9924% (-076%)` | `3% (ø)` | || and [17 more](https://codecovio/gh/reactivex/rxjava/pull/6577/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6577?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6577?srcpr&elfooter) last update [a38268c92c8fdd](https://codecovio/gh/reactivex/rxjava/pull/6577?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
658.0,6589,1,0,0,0,0,1,1,1,create a base test class and have all unit tests extend it this commit creates the `rxjavatest` class defining a defaulttimeout to 5 minutes an ignored test announce itself for eachrunning class extending it preventing travis ci from killing thebuildhave `completable` tests extend from `rxjavatest`have `disposable` tests extend from `rxjavatest`have `exception` tests extend from `rxjavatest`related: #6583 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6589?srcpr&elh1) report> merging [#6589](https://codecovio/gh/reactivex/rxjava/pull/6589?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/ab6c4b3dfdb700e64ea00ac90dbdf47d3f653b82?srcpr&eldesc) will **increase** coverage by `005%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6589/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6589?srcpr&eltree)```diff@@ coverage diff @@## 3x #6589 +/- ##+ coverage 9816% 9821% +005% - complexity 6183 6187 +4 files 678 678 lines 44908 44908 branches 6214 6214 + hits 44083 44107 +24 + misses 278 268 -10 + partials 547 533 -14```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6589?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6589/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% (-239%)` | `2% (ø)` | || [tivex/internal/operators/single/singletimeoutjava](https://codecovio/gh/reactivex/rxjava/pull/6589/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuaw1lb3v0lmphdme) | `9833% (-167%)` | `2% (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6589/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `947% (-159%)` | `3% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6589/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9625% (-107%)` | `5% (ø)` | || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6589/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `9612% (-097%)` | `6% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6589/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9829% (-086%)` | `2% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6589/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `975% (-084%)` | `2% (ø)` | || [main/java/io/reactivex/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/pull/6589/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvumvwbgf5u3viamvjdc5qyxzh) | `9668% (-042%)` | `50% (ø)` | || [internal/operators/flowable/flowableconcatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6589/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq29uy2f0twfwlmphdme) | `985% (-038%)` | `6% (ø)` | || [/java/io/reactivex/processors/replayprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6589/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9szxbsyxlqcm9jzxnzb3iuamf2yq) | `9897% (+04%)` | `52% (ø)` | :arrow_down: || and [17 more](https://codecovio/gh/reactivex/rxjava/pull/6589/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6589?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6589?srcpr&elfooter) last update [ab6c4b3477394e](https://codecovio/gh/reactivex/rxjava/pull/6589?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks for updating the description and the review i amended the commit to meet the new pr descriptioni will cut the issue into a few more pull requests for simple readability reasons || @romanwuattier do you want to do the rest of the test classes in a separate pr? || @akarnokd yes you can merge this one when you want to || thanks! ||
658.0,6594,1,0,0,1,1,1,1,1,have unit tests extends `rxjavatest` - 2 this commit updates the unit tests of the following operators:* flowable* maybe* observable* disposable* observer* parallel* processors* schedulersand rxjava pluginrelated: #6583 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6594?srcpr&elh1) report> merging [#6594](https://codecovio/gh/reactivex/rxjava/pull/6594?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/663e5a2aa7cb5a8064cf9903aa94d2159998b654?srcpr&eldesc) will **decrease** coverage by ` the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6594/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6594?srcpr&eltree)```diff@@ coverage diff @@## 3x #6594 +/- ##- coverage 9822% 9821% -001% + complexity 6185 6184 -1 files 678 678 lines 44908 44908 branches 6214 6214 - hits 44111 44108 -3 + misses 268 266 -2 - partials 529 534 +5```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6594?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6594/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `2% (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6594/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6594/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `956% (-342%)` | `50% (-1%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6594/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9365% (-265%)` | `3% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6594/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6594/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9819% (-181%)` | `17% (-1%)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6594/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9743% (-171%)` | `2% (ø)` | || [tivex/internal/operators/single/singletimeoutjava](https://codecovio/gh/reactivex/rxjava/pull/6594/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuaw1lb3v0lmphdme) | `9833% (-167%)` | `2% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6594/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9565% (-109%)` | `2% (ø)` | || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6594/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `9896% (-104%)` | `2% (ø)` | || and [19 more](https://codecovio/gh/reactivex/rxjava/pull/6594/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6594?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6594?srcpr&elfooter) last update [663e5a2ee42dce](https://codecovio/gh/reactivex/rxjava/pull/6594?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
658.0,6595,1,0,0,1,1,1,1,1,have unit tests extends `rxjavatest` - 3 this commit updates the unit tests of the following operators:* single* subjects* subscribersand for internal operators:* internaldisposable* internalfuctions* internalobservers* internalqueue* interanlschedulers* internalsubscribers* internalsubscriptions* internaloperatorcompletablerelated: #6583 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6595?srcpr&elh1) report> merging [#6595](https://codecovio/gh/reactivex/rxjava/pull/6595?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/177d4680a85303b8cd9acff9d8e690705f42d1d1?srcpr&eldesc) will **decrease** coverage by `008%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6595/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6595?srcpr&eltree)```diff@@ coverage diff @@## 3x #6595 +/- ##- coverage 9822% 9813% -009% + complexity 6185 6182 -3 files 678 678 lines 44908 44908 branches 6214 6214 - hits 44111 44071 -40 - misses 266 286 +20 - partials 531 551 +20```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6595?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6595/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `8888% (-677%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6595/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8954% (-393%)` | `2% (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6595/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `927% (-292%)` | `2% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6595/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9722% (-278%)` | `56% (-2%)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6595/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6595/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% (-2%)` | `3% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6595/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6595/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9819% (-181%)` | `17% (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6595/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9658% (-147%)` | `51% (+1%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6595/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9761% (-12%)` | `2% (ø)` | || and [17 more](https://codecovio/gh/reactivex/rxjava/pull/6595/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6595?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6595?srcpr&elfooter) last update [177d468f6a54e7](https://codecovio/gh/reactivex/rxjava/pull/6595?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6583.0,6600,1,0,0,1,1,1,1,1,3x: have `internaloperatorflowable` unit tests extends `rxjavatest` - 4 this commit updates the unit tests for `internaloperatorflowable`related: #6583 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6600?srcpr&elh1) report> merging [#6600](https://codecovio/gh/reactivex/rxjava/pull/6600?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/e00c4993cf73e16998ae3fddd33a93c96f95e296?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6600/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6600?srcpr&eltree)```diff@@ coverage diff @@## 3x #6600 +/- ##+ coverage 9816% 9816% + (-257%)` | `21% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6600/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9082% (-242%)` | `2% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6600/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6600/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9365% (-159%)` | `3% (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6600/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9658% (-147%)` | `51% (+1%)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6600/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9624% (-094%)` | `3% (ø)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6600/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0ae1hewjllmphdme) | `991% (-09%)` | `2% (ø)` | || [/operators/mixed/flowableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6600/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwq29tcgxldgfibguuamf2yq) | `9914% (-086%)` | `2% (ø)` | || [ex/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6600/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvwbgf5lmphdme) | `9197% (-083%)` | `19% (ø)` | || [vex/internal/operators/flowable/flowablecachejava](https://codecovio/gh/reactivex/rxjava/pull/6600/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq2fjaguuamf2yq) | `9772% (-076%)` | `37% (-1%)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6600/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6600?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6600?srcpr&elfooter) last update [e00c499f4772b5](https://codecovio/gh/reactivex/rxjava/pull/6600?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6576.0,6601,1,0,0,0,0,0,1,0,2x: observableblockingsubscribe compares with wrong object it should compare the terminated instance with the value received from the blocking queuefixes: #6576 related: #6577
658.0,6602,1,0,0,1,0,1,1,1,2x: fix truncation bugs in replay() and replaysubject/processor this pr fixes several truncation bugs with the time and size-bound replay() operators and their hot class versions:- unexpected removal of the last item just added due to becoming out-of-date at the lowest time resolution creating a hole in the linked chain and hanging the consumer [related failure](https://travis-ciorg/akarnokd/rxjava3_buildmatrix/jobs/562038485#l791)- incorrect size accounting upon removing old entries leading to more items dropped than expectedrelated: #6582
658.0,6604,1,0,0,1,1,1,1,1,3x: have unit tests extends `rxjavatest` - 5 this commit updates the unit tests of the following operators:* internaloperatorsmaybe* internaloperatormixed* internaloperatorsinglerelated: #6583
658.0,6607,1,0,0,1,1,1,1,1,3x: have `internaloperatorobservable` unit tests extends `rxjavatest` - 6 this commit updates the unit tests for `internaloperatorobservable`related: #6583 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6607?srcpr&elh1) report> merging [#6607](https://codecovio/gh/reactivex/rxjava/pull/6607?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/eae8280165610dc91943591bf1a80913d60b0010?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6607/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6607?srcpr&eltree)```diff@@ coverage diff @@## 3x #6607 +/- ##- coverage 9823% 982% -004% + complexity 6185 6183 -2 files 678 678 lines 44908 44908 branches 6214 6214 - hits 44117 44102 -15 - misses 261 272 +11 - partials 530 534 +4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6607?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6607/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% (-598%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6607/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8888% (-589%)` | `2% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6607/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6607/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9371% (-194%)` | `2% (ø)` | || [java/io/reactivex/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6607/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9vbmljyxn0uhjvy2vzc29ylmphdme) | `988% (-12%)` | `67% (-1%)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6607/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9753% (-099%)` | `17% (-1%)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6607/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9624% (-094%)` | `3% (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6607/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `9489% (-073%)` | `2% (ø)` | || [x/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6607/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlr3jvdxbces5qyxzh) | `9551% (-057%)` | `3% (ø)` | || [activex/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6607/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9fegvjdxrvclnjagvkdwxlci5qyxzh) | `98% (-05%)` | `10% (ø)` | || and [14 more](https://codecovio/gh/reactivex/rxjava/pull/6607/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6607?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6607?srcpr&elfooter) last update [eae8280e20fe66](https://codecovio/gh/reactivex/rxjava/pull/6607?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
660.0,6609,1,0,0,1,0,1,1,1,3x: fix refcount not resetting when termination triggers cross-cancel this pr fixes both `refcount` implementation to properly reset the source when the source terminates multiple consumersin the original when the source terminated multiple sources the first termination handler cleared the connection but since the `--subscribercount` wasnt zero the source was not reset if this termination triggered a cancel on the second consumer that path would not get the source reset either due to losing the connection object unfortunately one cant just take the first termination handler and reset there immediately either because that could disrupt the termination of the rest of the consumers it has to wait for the source to terminate all consumers or have the consumers cancel allthis affects 2x and will be backported in a separate prfixes #6608 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6609?srcpr&elh1) report> merging [#6609](https://codecovio/gh/reactivex/rxjava/pull/6609?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/eae8280165610dc91943591bf1a80913d60b0010?srcpr&eldesc) will **increase** coverage by `006%`> the diff coverage is `80%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6609/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6609?srcpr&eltree)```diff@@ coverage diff @@## 3x #6609 +/- ##+ coverage 9823% 983% +006% + complexity 6185 6181 -4 files 678 678 lines 44908 44910 +2 branches 6214 6214 + hits 44117 44150 +33 + misses 261 251 -10 + partials 530 509 -21```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6609?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ernal/operators/observable/observablerefcountjava](https://codecovio/gh/reactivex/rxjava/pull/6609/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlzknvdw50lmphdme) | `9897% (-103%)` | `22 (-2)` | || [/internal/operators/flowable/flowablerefcountjava](https://codecovio/gh/reactivex/rxjava/pull/6609/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvmq291bnquamf2yq) | `9898% (-102%)` | `22 (-2)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6609/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6609/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9468% (-097%)` | `2% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6609/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9909% (-091%)` | `17% (-1%)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6609/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `9489% (-073%)` | `2% (ø)` | || [x/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6609/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlr3jvdxbces5qyxzh) | `9551% (-057%)` | `3% (ø)` | || [activex/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6609/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9fegvjdxrvclnjagvkdwxlci5qyxzh) | `98% (-05%)` | `10% (ø)` | || [internal/operators/flowable/flowableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/6609/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlt2jzzxj2zu9ulmphdme) | `9665% (-028%)` | `3% (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6609/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9852% (ø)` | `17% (-1%)` | :arrow_down: || and [22 more](https://codecovio/gh/reactivex/rxjava/pull/6609/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6609?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6609?srcpr&elfooter) last update [eae82802644e3b](https://codecovio/gh/reactivex/rxjava/pull/6609?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
658.0,6612,1,0,0,0,0,1,1,0,3x: fix many operators swallowing undeliverable exceptions fix many operators to emit the collected exception in case of a cancel/dispose call to the plugin error handler (ie becoming undeliverable excptions)in addition the terminal event/error delivery has been unified in many other operators so that the terminal-indicator exception is never leakedthere will be a separate pr about cleaning up the `addthrowable` usage cases (#6611)fixes: #6587 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&elh1) report> merging [#6612](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/28e24dc23b35d92cc9710ebc05bf69f2e0d69879?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `979%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6612/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&eltree)```diff@@ coverage diff @@## 3x #6612 +/- ##- coverage 9817% 9815% -002% - complexity 6180 6186 +6 files 678 678 lines 44910 44771 -139 branches 6214 6172 -42 - hits 44091 43947 -144 - misses 275 279 +4 - partials 544 545 +1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nal/operators/flowable/flowablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxltwvyz2vxaxrotwf5ymuuamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || [nal/operators/mixed/observableconcatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbtaw5nbguuamf2yq) | `100% (ø)` | `3 (ø)` | :arrow_down: || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || [al/operators/flowable/flowablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxltwvyz2vxaxrou2luz2xllmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || [ava/io/reactivex/observers/serializedobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvb2jzzxj2zxjzl1nlcmlhbgl6zwrpynnlcnzlci5qyxzh) | `100% (ø)` | `27 (ø)` | :arrow_down: || [ators/observable/observableflatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9571% (-024%)` | `2 (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0afnpbmdszs5qyxzh) | `9907% (-093%)` | `2 (ø)` | || [va/io/reactivex/internal/util/atomicthrowablejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9bdg9tawnuahjvd2fibguuamf2yq) | `100% (ø)` | `23 (+15)` | :arrow_up: || [lowable/flowableflatmapcompletablecompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcenvbxbszxrhymxlq29tcgxldgfibguuamf2yq) | `9615% (-024%)` | `3 (ø)` | || [ternal/operators/mixed/flowableswitchmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwtwf5ymuuamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || and [59 more](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&elfooter) last update [28e24dc822145d](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || nice ||
6611.0,6612,1,0,0,0,0,1,1,0,3x: fix many operators swallowing undeliverable exceptions fix many operators to emit the collected exception in case of a cancel/dispose call to the plugin error handler (ie becoming undeliverable excptions)in addition the terminal event/error delivery has been unified in many other operators so that the terminal-indicator exception is never leakedthere will be a separate pr about cleaning up the `addthrowable` usage cases (#6611)fixes: #6587 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&elh1) report> merging [#6612](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/28e24dc23b35d92cc9710ebc05bf69f2e0d69879?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `979%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6612/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&eltree)```diff@@ coverage diff @@## 3x #6612 +/- ##- coverage 9817% 9815% -002% - complexity 6180 6186 +6 files 678 678 lines 44910 44771 -139 branches 6214 6172 -42 - hits 44091 43947 -144 - misses 275 279 +4 - partials 544 545 +1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nal/operators/flowable/flowablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxltwvyz2vxaxrotwf5ymuuamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || [nal/operators/mixed/observableconcatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbtaw5nbguuamf2yq) | `100% (ø)` | `3 (ø)` | :arrow_down: || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || [al/operators/flowable/flowablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxltwvyz2vxaxrou2luz2xllmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || [ava/io/reactivex/observers/serializedobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvb2jzzxj2zxjzl1nlcmlhbgl6zwrpynnlcnzlci5qyxzh) | `100% (ø)` | `27 (ø)` | :arrow_down: || [ators/observable/observableflatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9571% (-024%)` | `2 (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0afnpbmdszs5qyxzh) | `9907% (-093%)` | `2 (ø)` | || [va/io/reactivex/internal/util/atomicthrowablejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9bdg9tawnuahjvd2fibguuamf2yq) | `100% (ø)` | `23 (+15)` | :arrow_up: || [lowable/flowableflatmapcompletablecompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcenvbxbszxrhymxlq29tcgxldgfibguuamf2yq) | `9615% (-024%)` | `3 (ø)` | || [ternal/operators/mixed/flowableswitchmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwtwf5ymuuamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || and [59 more](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&elfooter) last update [28e24dc822145d](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || nice ||
6569.0,6620,1,0,0,0,0,0,1,0,3x: elementat first - constrain upstream requests as discussed in #6569 this pr constrains upstream requests for the `elementat` and `first` overloads other operators will be covered in other prs # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6620?srcpr&elh1) report> merging [#6620](https://codecovio/gh/reactivex/rxjava/pull/6620?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/a644739d1cd4412c68c15fb5a7fd26ba13803368?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6620/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6620?srcpr&eltree)```diff@@ coverage diff @@## 3x #6620 +/- ##+ coverage 9813% 9817% +003% - complexity 6187 6188 +1 files 678 678 lines 44792 44792 branches 6173 6173 + hits 43956 43973 +17 + misses 290 281 -9 + partials 546 538 -8```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6620?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6620/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% (ø)` | `565 (ø)` | :arrow_down: || [nal/operators/flowable/flowableelementatmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6620/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrwxlbwvudef0twf5ymuuamf2yq) | `100% (ø)` | `3 (ø)` | :arrow_down: || [al/operators/flowable/flowableelementatsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6620/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrwxlbwvudef0u2luz2xllmphdme) | `100% (ø)` | `3 (ø)` | :arrow_down: || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6620/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6620/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `927% (-292%)` | `2% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6620/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9861% (-139%)` | `57% (-1%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6620/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9425% (-115%)` | `2% (ø)` | || [io/reactivex/subscribers/serializedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/6620/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3vic2nyawjlcnmvu2vyawfsaxplzfn1ynnjcmlizxiuamf2yq) | `9886% (-114%)` | `26% (-1%)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6620/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `975% (-084%)` | `2% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6620/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9625% (-054%)` | `5% (ø)` | || and [15 more](https://codecovio/gh/reactivex/rxjava/pull/6620/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6620?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6620?srcpr&elfooter) last update [a6447397f120bf](https://codecovio/gh/reactivex/rxjava/pull/6620?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || could you hold up your subsequent prs until the refactor of the packages? || >could you hold up your subsequent prs until the refactor of the packages?sure ||
6625.0,6626,1,0,0,0,0,0,1,0,3x: fix blockingiterable not unblocking when force-disposed when the iterator was cast to `disposable` and disposed the subsequent `hasnext` would block indefinitely that interface is not intended to be part of the public api and `iterator` in general does not support any form of official cancellation (unlike stream) this pr makes sure that if that dispose is called it unblocks the iteratora separate pr will be posted for 2xrelated #6625
6625.0,6627,1,0,0,0,0,1,1,1,2x: fix blockingiterable hang when force-disposed when the iterator was cast to `disposable` and disposed the subsequent `hasnext` would block indefinitely that interface is not intended to be part of the public api and `iterator` in general does not support any form of official cancellation (unlike stream) this pr makes sure that if that dispose is called it unblocks the iteratorresolves #6625
6608.0,6629,1,0,0,1,0,1,1,1,2x: fix refcount() not resetting when cross-canceled this pr fixes the issue with `refcount` not resetting the connection when the termination triggers cross-cancellation over itfixes #6608the fix is more involved than #6609 because how 2x uses two `publish()` implementation internally due to bugfix #6505 the old/classic implementation does not fail #6608 but the newer implementation fails #6608 if the fix is applied unconditionally the old/classic implementation fails an older unit test verifying an error allows reconnection therefore the pr checks and applies the new code path only if `refcount` isnt talking to the classic publish implementationas a reminder #6609 for 3x has a redesigned `connectable` with a much more clearer reset semantics and thus the restructuring of the termination handling had no trouble passing the aforementioned error-allows-reconnect unit test # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6629?srcpr&elh1) report> merging [#6629](https://codecovio/gh/reactivex/rxjava/pull/6629?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/a9df239eefacd5761febca24c6076cd95702bee9?srcpr&eldesc) will **decrease** coverage by `004%`> the diff coverage is `95%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6629/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6629?srcpr&eltree)```diff@@ coverage diff @@## 2x #6629 +/- ##- coverage 9822% 9818% -005% - complexity 6336 6342 +6 files 677 677 lines 45523 45545 +22 branches 6330 6332 +2 + hits 44717 44719 +2 - misses 257 261 +4 - partials 549 565 +16```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6629?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ernal/operators/observable/observablerefcountjava](https://codecovio/gh/reactivex/rxjava/pull/6629/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlzknvdw50lmphdme) | `9912% (-088%)` | `32 (+4)` | || [/internal/operators/flowable/flowablerefcountjava](https://codecovio/gh/reactivex/rxjava/pull/6629/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvmq291bnquamf2yq) | `9913% (-087%)` | `32 (+4)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6629/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% (-589%)` | `2% (ø)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6629/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% (-239%)` | `22% (-1%)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6629/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `927% (-219%)` | `2% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6629/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% (-214%)` | `5% (ø)` | || [nal/operators/observable/observablepublishaltjava](https://codecovio/gh/reactivex/rxjava/pull/6629/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2hbbhquamf2yq) | `9626% (-187%)` | `15% (-1%)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6629/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9849% (-151%)` | `3% (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6629/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9861% (-139%)` | `57% (-1%)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6629/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% (-106%)` | `3% (ø)` | || and [21 more](https://codecovio/gh/reactivex/rxjava/pull/6629/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6629?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6629?srcpr&elfooter) last update [a9df2392973758](https://codecovio/gh/reactivex/rxjava/pull/6629?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
663.0,6635,1,0,0,1,0,1,1,1,3x: remove vararg overloads for combinelatest in observable + flowable started removing the vararg function from #6634 hmm after looking at the tests the varag variant for `combinelatestdelayerror` might be useful since there are no 2-x overloads available what do you think? || let me guess intellij refactor? || the varargs is a convenience over the array variant so `combinelatestdelayerror`s can go || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6635?srcpr&elh1) report> merging [#6635](https://codecovio/gh/reactivex/rxjava/pull/6635?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/97790c6112810197c1d418a17da79c2a839d3e8b?srcpr&eldesc) will **decrease** coverage by ` the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6635/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6635?srcpr&eltree)```diff@@ coverage diff @@## 3x #6635 +/- ##- coverage 9816% 9816% -001% complexity 6182 6182 files 678 678 lines 44801 44795 -6 branches 6177 6177 - hits 43981 43974 -7 - misses 278 281 +3 + partials 542 540 -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6635?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `562 (-3)` | :arrow_down: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `538 (-2)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `8888% (-556%)` | `2% (ø)` | || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9658% (-244%)` | `51% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34% (-1%)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% (-186%)` | `39% (-1%)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgcm9tsxrlcmfibguuamf2yq) | `9679% (-107%)` | `5% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8828% (-079%)` | `2% (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb3j0zwrkb2lulmphdme) | `9489% (-073%)` | `2% (ø)` | || [/operators/observable/observablecombinelatestjava](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq29tymluzuxhdgvzdc5qyxzh) | `9631% (-062%)` | `6% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6635?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6635?srcpr&elfooter) last update [97790c6d56dc2e](https://codecovio/gh/reactivex/rxjava/pull/6635?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
663.0,6637,1,0,0,0,0,1,1,0,3x: avoid using systemgetproperties() due to security restrictions change the code in the `schedulerpoolfactory` to use `systemgetproperty` directly also fix property names to `rx3` as now both v2 and v3 could run togetherfixes #6636 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6637?srcpr&elh1) report> merging [#6637](https://codecovio/gh/reactivex/rxjava/pull/6637?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/97790c6112810197c1d418a17da79c2a839d3e8b?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6637/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6637?srcpr&eltree)```diff@@ coverage diff @@## 3x #6637 +/- ##+ coverage 9816% 982% +003% - complexity 6182 6195 +13 files 678 678 lines 44801 44806 +5 branches 6177 6177 + hits 43981 44002 +21 + misses 278 276 -2 + partials 542 528 -14```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6637?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ava3/internal/schedulers/computationschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0nvbxb1dgf0aw9uu2nozwr1bgvylmphdme) | `9753% (ø)` | `14 (ø)` | :arrow_down: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `540 (ø)` | :arrow_down: || [xjava3/internal/schedulers/newthreadschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl05ld1rocmvhzfnjagvkdwxlci5qyxzh) | `100% (ø)` | `4 (ø)` | :arrow_down: || [va/io/reactivex/rxjava3/schedulers/schedulersjava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zy2hlzhvszxjzl1njagvkdwxlcnmuamf2yq) | `100% (ø)` | `11 (ø)` | :arrow_down: || [x/rxjava3/internal/schedulers/singleschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl1npbmdszvnjagvkdwxlci5qyxzh) | `9294% (ø)` | `15 (ø)` | :arrow_down: || [tivex/rxjava3/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0lvu2nozwr1bgvylmphdme) | `8936% (ø)` | `9 (ø)` | :arrow_down: || [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `565 (ø)` | :arrow_down: || [ava3/internal/schedulers/schedulerpoolfactoryjava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl1njagvkdwxlclbvb2xgywn0b3j5lmphdme) | `100% (ø)` | `19 (+6)` | :arrow_up: || [main/java/io/reactivex/rxjava3/core/schedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1njagvkdwxlci5qyxzh) | `100% (ø)` | `11 (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `8819% (-625%)` | `2% (ø)` | || and [25 more](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6637?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6637?srcpr&elfooter) last update [97790c62e7246d](https://codecovio/gh/reactivex/rxjava/pull/6637?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || ok ||
6569.0,6650,1,0,0,1,0,1,1,1,3x: constrain upstream requests from take remove limit operator as per discussion in #6569 this pr constrains upstream requests from the `take` operator and removes the `limit` operatorive also added a couple of unit tests for coverage of `elementat` that i didnt include in #6620 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6650?srcpr&elh1) report> merging [#6650](https://codecovio/gh/reactivex/rxjava/pull/6650?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/852e0529bbfb366aa8ae3438ec54f887ea30cd6c?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6650/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6650?srcpr&eltree)```diff@@ coverage diff @@## 3x #6650 +/- ##- coverage 9811% 9808% -004% + complexity 6191 6186 -5 files 678 677 -1 lines 44722 44674 -48 branches 6176 6166 -10 - hits 43880 43818 -62 - misses 294 302 +8 - partials 548 554 +6```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6650?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6650/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `559 (-2)` | :arrow_down: || [ava3/internal/operators/flowable/flowabletakejava](https://codecovio/gh/reactivex/rxjava/pull/6650/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvuywtllmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6650/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `838% (-493%)` | `2% (ø)` | || [al/operators/flowable/flowablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6650/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvnzxjnzvdpdghtaw5nbguuamf2yq) | `9759% (-241%)` | `2% (ø)` | || [nal/operators/flowable/flowablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6650/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvnzxjnzvdpdghnyxlizs5qyxzh) | `9766% (-234%)` | `2% (ø)` | || [va3/internal/operators/flowable/flowablerangejava](https://codecovio/gh/reactivex/rxjava/pull/6650/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvsyw5nzs5qyxzh) | `9587% (-207%)` | `3% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6650/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34% (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6650/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxluhvibglzac5qyxzh) | `9729% (-181%)` | `16% (-1%)` | || [nal/operators/flowable/flowableconcatmapeagerjava](https://codecovio/gh/reactivex/rxjava/pull/6650/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdb25jyxrnyxbfywdlci5qyxzh) | `9707% (-176%)` | `2% (ø)` | || [ava3/internal/operators/maybe/maybemergearrayjava](https://codecovio/gh/reactivex/rxjava/pull/6650/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvnzxjnzufycmf5lmphdme) | `9604% (-17%)` | `6% (ø)` | || and [30 more](https://codecovio/gh/reactivex/rxjava/pull/6650/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6650?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6650?srcpr&elfooter) last update [852e052426c817](https://codecovio/gh/reactivex/rxjava/pull/6650?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || why not simply delete `take` and rename `limit`? that way the tests and documentation of limit would remain intact || indeed! will do || copied code from `limit` to `take` and fixed javadoc ||
665.0,6652,1,0,0,0,0,1,1,0,3x: fix size+time bound window not creating windows properly there was a logic error in the size+time bound `window` operator for when to close a window if timers are not restarted when the size-bound is hitdue to this bug two tests were not receiving and thus accounting for empty windows that are happening when the size-bound is hit followed by the periodic time-bound hit2x will be fixed in a separate prfixes #6651 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6652?srcpr&elh1) report> :exclamation: no coverage uploaded for pull request base (`3x@9a36930`) [click here to learn what that means](https://docscodecovio/docs/error-reference#section-missing-base-commit)> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6652/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6652?srcpr&eltree)```diff@@ coverage diff @@## 3x #6652 +/- ## coverage ? 9812% complexity ? 6193 files ? 678 lines ? 44722 branches ? 6176 hits ? 43885 misses ? 290 partials ? 547```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6652?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ternal/operators/flowable/flowablewindowtimedjava](https://codecovio/gh/reactivex/rxjava/pull/6652/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvxaw5kb3duaw1lzc5qyxzh) | `914% (ø)` | `4 (?)` | || [al/operators/observable/observablewindowtimedjava](https://codecovio/gh/reactivex/rxjava/pull/6652/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93vgltzwquamf2yq) | `9073% (ø)` | `4 (?)` | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6652?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6652?srcpr&elfooter) last update [9a369302e7a826](https://codecovio/gh/reactivex/rxjava/pull/6652?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
665.0,6657,1,0,0,0,0,1,1,0,2x: fix size+time bound window not creating windows properly there was a logic error in the size+time bound `window` operator for when to close a window if timers are not restarted when the size-bound is hitdue to this bug two tests were not receiving and thus accounting for empty windows that are happening when the size-bound is hit followed by the periodic time-bound hitfixes #6651 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6657?srcpr&elh1) report> merging [#6657](https://codecovio/gh/reactivex/rxjava/pull/6657?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/71bfcae35b8052c21e8564c417ae0a870eb5ddb8?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6657/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6657?srcpr&eltree)```diff@@ coverage diff @@## 2x #6657 +/- ##+ coverage 9818% 9819% + (+027%)` | `4 (ø)` | :arrow_down: || [ternal/operators/flowable/flowablewindowtimedjava](https://codecovio/gh/reactivex/rxjava/pull/6657/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlv2luzg93vgltzwquamf2yq) | `9117% (-023%)` | `4 (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6657/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8692% (-719%)` | `2% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6657/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9401% (-342%)` | `2% (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6657/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% (-26%)` | `6% (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6657/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9748% (-126%)` | `13% (ø)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6657/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9849% (-076%)` | `3% (ø)` | || [x/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6657/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlr3jvdxbces5qyxzh) | `9551% (-057%)` | `3% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6657/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9572% (-054%)` | `5% (ø)` | || [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6657/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxauamf2yq) | `8899% (-033%)` | `3% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6657/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6657?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6657?srcpr&elfooter) last update [71bfcae8a6dfdf](https://codecovio/gh/reactivex/rxjava/pull/6657?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6663.0,6664,1,0,0,0,0,1,1,1,3x: fix groupby group emission in some cases this pr fixes two issues:- when the `observablegroupby` operator would abandon a newly created group before the groups only item was emitted causing dataloss- when the `groupby`s value selector failed for a new group thus the new group would never be emitted and report the failureit should fix the first test failure of #6663 but may not be the cause for the second # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6664?srcpr&elh1) report> merging [#6664](https://codecovio/gh/reactivex/rxjava/pull/6664?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/877702e284b78503d9ba13f76ddf76918cbe93a5?srcpr&eldesc) will **decrease** coverage by ` the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6664/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6664?srcpr&eltree)```diff@@ coverage diff @@## 3x #6664 +/- ##- coverage 9812% 9811% -001% complexity 6188 6188 files 677 677 lines 44674 44682 +8 branches 6166 6169 +3 + hits 43835 43840 +5 - misses 296 299 +3 partials 543 543```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6664?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [3/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6664/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvhcm91cej5lmphdme) | `955% (-024%)` | `3 (ø)` | || [ternal/operators/observable/observablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6664/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlr3jvdxbces5qyxzh) | `9562% (+068%)` | `2 (ø)` | :arrow_down: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6664/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8809% (-635%)` | `2% (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6664/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvcbg9ja2luz1n1ynnjcmlizs5qyxzh) | `9302% (-466%)` | `10% (-1%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6664/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34% (-1%)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6664/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9572% (-171%)` | `2% (ø)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6664/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvtd2l0y2hnyxauamf2yq) | `9439% (-141%)` | `3% (ø)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6664/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9611% (-13%)` | `6% (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6664/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrou2luz2xllmphdme) | `9905% (-095%)` | `2% (ø)` | || [l/operators/observable/observabletimeouttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6664/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlvgltzw91dfrpbwvklmphdme) | `9915% (-085%)` | `3% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6664/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6664?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6664?srcpr&elfooter) last update [877702e122345f](https://codecovio/gh/reactivex/rxjava/pull/6664?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5788.0,6668,1,0,0,0,0,0,1,0,3x: add missing marble diagams to single add (hopefully) all remaining missing marble diagrams to `single`resolves #5788![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleconcatarrayeagerpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlemergedelayerroripng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlemergedelayerrorppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlemergedelayerror2png)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlemergedelayerror3png)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlemergedelayerror4png)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleunsafecreatepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleusingpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleusingbpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlewrappng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlecachepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlecastpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledelaysubscriptiontpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledelaysubscriptiontspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledooneventpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleblockinggetpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleliftpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlecontainsfpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlecontainspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleonerrorresumewithpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleonterminatedetachpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleretrypng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleretryf2png)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleretrynpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleretryfpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleretrynfpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleretrywhenpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlesubscribepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlesubscribecpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlesubscribeccpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlesubscribec2png)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlesubscribewithpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletakeuntilcpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletakeuntilspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletakeuntilppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletimeoutpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletimeoutspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletimeoutbpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletimeoutsbpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleunsubscribeonpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletestpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletestbpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledelaysubscriptionppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledelaysubscriptionopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledelaysubscriptionspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledelaysubscriptioncpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledematerializepng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6668?srcpr&elh1) report> merging [#6668](https://codecovio/gh/reactivex/rxjava/pull/6668?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/cb7ff83a2444731dd7eca4760e9410a6c2980b6d?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6668/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6668?srcpr&eltree)```diff@@ coverage diff @@## 3x #6668 +/- ##+ coverage 981% 9812% +001% complexity 6187 6187 files 677 677 lines 44682 44682 branches 6169 6169 + hits 43837 43843 +6 + misses 303 299 -4 + partials 542 540 -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6668?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `148 (ø)` | :arrow_down: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8809% (-635%)` | `2% (ø)` | || [rxjava3/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvuxvldwvecmfpbk9ic2vydmvylmphdme) | `9743% (-257%)` | `21% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9114% (-209%)` | `2% (ø)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% (-186%)` | `39% (-1%)` | || [ctivex/rxjava3/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc91dglsl1f1zxvlrhjhaw5izwxwzxiuamf2yq) | `9861% (-139%)` | `57% (-1%)` | || [reactivex/rxjava3/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl1vuawnhc3rqcm9jzxnzb3iuamf2yq) | `988% (-12%)` | `67% (-1%)` | || [a3/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvszxbsyxkuamf2yq) | `9197% (-083%)` | `19% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `9436% (-071%)` | `2% (ø)` | || [internal/operators/flowable/flowableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvpynnlcnzlt24uamf2yq) | `9749% (+027%)` | `3% (ø)` | :arrow_down: || and [13 more](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6668?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6668?srcpr&elfooter) last update [cb7ff83ecfedfd](https://codecovio/gh/reactivex/rxjava/pull/6668?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6697.0,6700,1,0,0,0,0,0,1,0,3x: update javadoc for observeon to mention its eagerness update javadoc to reflect the eagerness property of `observeon` in `flowable` and `observable` classesresolves #6697 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6700?srcpr&elh1) report> merging [#6700](https://codecovio/gh/reactivex/rxjava/pull/6700?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/b9727da4fec4c16ce15813b7be3df09f86eb2af0?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6700/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6700?srcpr&eltree)```diff@@ coverage diff @@## 3x #6700 +/- ##+ coverage 9812% 9814% +001% + complexity 6189 6188 -1 files 677 677 lines 44657 44657 branches 6170 6170 + hits 43821 43827 +6 + misses 300 294 -6 partials 536 536```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6700?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `559 (ø)` | :arrow_down: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `537 (ø)` | :arrow_down: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvcbg9ja2luz1n1ynnjcmlizs5qyxzh) | `9302% (-466%)` | `10% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `901% (-313%)` | `2% (ø)` | || [activex/rxjava3/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9xdwv1zs9tchnjqxjyyxlrdwv1zs5qyxzh) | `9761% (-239%)` | `22% (-1%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34% (-1%)` | || [rxjava3/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0v4zwn1dg9yu2nozwr1bgvylmphdme) | `96% (-15%)` | `10% (ø)` | || [ava3/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb2lulmphdme) | `9204% (-114%)` | `3% (ø)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrotwf5ymuuamf2yq) | `9909% (-091%)` | `2% (ø)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9708% (-065%)` | `6% (ø)` | || and [13 more](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6700?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6700?srcpr&elfooter) last update [b9727dab0e26a3](https://codecovio/gh/reactivex/rxjava/pull/6700?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks! much appreciated!would you like to backport the changes to the 2x branch? ||
671.0,6714,1,0,0,0,0,1,1,0,3x: fix multicastprocessor not requesting more after limit is reached after reaching the prefetch limit the updated `consumed` counter was not written back so the processor stopped requesting more (consumed > limit)affects 2x to a separate pr will be posted for itresolves #6713 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6714?srcpr&elh1) report> merging [#6714](https://codecovio/gh/reactivex/rxjava/pull/6714?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/e4c4903f9b2e6acc069146101fe3b46768244964?srcpr&eldesc) will **decrease** coverage by `007%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6714/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6714?srcpr&eltree)```diff@@ coverage diff @@## 3x #6714 +/- ##- coverage 9816% 9808% -008% complexity 6191 6191 files 677 677 lines 44657 44658 +1 branches 6170 6170 - hits 43839 43805 -34 - misses 293 315 +22 - partials 525 538 +13```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6714?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [activex/rxjava3/processors/multicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6714/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl011bhrpy2fzdfbyb2nlc3nvci5qyxzh) | `9867% (ø)` | `84 (ø)` | :arrow_down: || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6714/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9029% (-745%)` | `6% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6714/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9244% (-291%)` | `2% (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6714/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu3dpdgnotwfwlmphdme) | `9157% (-264%)` | `3% (ø)` | || [rxjava3/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6714/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvuxvldwvecmfpbk9ic2vydmvylmphdme) | `9743% (-257%)` | `21% (-1%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6714/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8809% (-239%)` | `2% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6714/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93lmphdme) | `98% (-2%)` | `3% (ø)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6714/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% (-186%)` | `39% (-1%)` | || [ava3/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/pull/6714/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb2lulmphdme) | `9204% (-114%)` | `3% (ø)` | || [rxjava3/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6714/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0v4zwn1dg9yu2nozwr1bgvylmphdme) | `96% (-1%)` | `10% (ø)` | || and [20 more](https://codecovio/gh/reactivex/rxjava/pull/6714/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6714?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6714?srcpr&elfooter) last update [e4c49033869fc1](https://codecovio/gh/reactivex/rxjava/pull/6714?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
671.0,6715,1,0,0,0,0,1,1,0,2x: fix multicastprocessor not requesting more after limit is reached after reaching the prefetch limit the updated `consumed` counter was not written back so the processor stopped requesting more (consumed > limit)resolves #6713 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6715?srcpr&elh1) report> merging [#6715](https://codecovio/gh/reactivex/rxjava/pull/6715?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/52dee7dbcd03ff1f6b7fa3fbc1ebdd8663d9213b?srcpr&eldesc) will **decrease** coverage by ` the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6715/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6715?srcpr&eltree)```diff@@ coverage diff @@## 2x #6715 +/- ##- coverage 982% 9819% -001% + complexity 6350 6346 -4 files 677 677 lines 45526 45527 +1 branches 6333 6333 hits 44707 44707 - misses 260 263 +3 + partials 559 557 -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6715?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [va/io/reactivex/processors/multicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6715/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9ndwx0awnhc3rqcm9jzxnzb3iuamf2yq) | `9867% (+044%)` | `84 (+1)` | :arrow_up: || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6715/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6715/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9722% (-278%)` | `56% (-2%)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6715/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6715/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6715/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6715/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9178% (-097%)` | `2% (ø)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6715/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0ae1hewjllmphdme) | `991% (-09%)` | `2% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6715/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% (-055%)` | `2% (ø)` | || [nternal/operators/observable/observablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6715/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlcgxhes5qyxzh) | `9837% (-055%)` | `20% (ø)` | || and [12 more](https://codecovio/gh/reactivex/rxjava/pull/6715/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6715?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6715?srcpr&elfooter) last update [52dee7dd92d081](https://codecovio/gh/reactivex/rxjava/pull/6715?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
195.0,6720,1,0,0,0,0,1,1,1,2x: fix parallel() on grouped flowable not replenishing properly ## backport of #6719 fix a case when the groupedflowable is consumed by a parallel() in fusion mode causing the source to stop replenishing items from the upstream hanging the whole sequenceparallel() was slightly different from the usual queue consumers because it checks for isempty before trying to pull for an item this was necessary because the rails may not be ready for more and an eager pull to check for emptyness would lose that item the replenishing was done in groupedflowablepull but a call to groupedflowableisempty would not replenishthe fix is to have isempty replenish similar to when poll detects emptyness and replenishesreported in reactor/reactor-core#1959 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6720?srcpr&elh1) report> merging [#6720](https://codecovio/gh/reactivex/rxjava/pull/6720?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/aeb5f2c703a0126cf51ca4520e2c4a725cb1e752?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6720/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6720?srcpr&eltree)```diff@@ coverage diff @@## 2x #6720 +/- ##- coverage 9826% 9824% -002% + complexity 6346 6345 -1 files 677 677 lines 45527 45532 +5 branches 6333 6334 +1 - hits 44737 44735 -2 - misses 246 249 +3 - partials 544 548 +4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6720?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [x/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6720/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlr3jvdxbces5qyxzh) | `9612% (+005%)` | `3 (ø)` | :arrow_down: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6720/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% (-466%)` | `10% (-1%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6720/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9104% (-374%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6720/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8758% (-327%)` | `2% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6720/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9347% (-327%)` | `2% (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6720/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% (-257%)` | `21% (-1%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6720/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6720/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [java/io/reactivex/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6720/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9qdwjsaxnouhjvy2vzc29ylmphdme) | `9819% (-181%)` | `42% (-1%)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6720/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9849% (-151%)` | `3% (ø)` | || and [22 more](https://codecovio/gh/reactivex/rxjava/pull/6720/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6720?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6720?srcpr&elfooter) last update [aeb5f2c6b72d1d](https://codecovio/gh/reactivex/rxjava/pull/6720?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
672.0,6729,1,0,0,0,0,0,1,0,3x: fix self-see references some comments - some `@see` should point to the other party (plain `delayerror`)- add a few `@see` to the nearby operators- comments no longer apply in `blockingxmostrecent` source code- add a comment from #6728 to `actiondisposable`replaces #6728
6728.0,6729,1,0,0,0,0,0,1,0,3x: fix self-see references some comments - some `@see` should point to the other party (plain `delayerror`)- add a few `@see` to the nearby operators- comments no longer apply in `blockingxmostrecent` source code- add a comment from #6728 to `actiondisposable`replaces #6728
5806.0,6730,1,0,0,0,0,0,1,0,3x: add maybe marble diagrams (14 cases) related #5806----![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybezipipng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybezipnpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeziparraypng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybezipwithpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybecontainsopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeunsubscribeonpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeonterminatedetachpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybecastpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeliftpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedooneventpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedelaysubscriptiontpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedelaysubscriptiontspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedelaysubscriptionppng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6730?srcpr&elh1) report> merging [#6730](https://codecovio/gh/reactivex/rxjava/pull/6730?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/e65cd8d19986ac33b3081e7e6f81b742ec95e936?srcpr&eldesc) will **decrease** coverage by `007%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6730/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6730?srcpr&eltree)```diff@@ coverage diff @@## 3x #6730 +/- ##- coverage 9818% 9811% -008% complexity 6190 6190 files 677 677 lines 44663 44663 branches 6171 6171 - hits 43852 43820 -32 - misses 285 309 +24 - partials 526 534 +8```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6730?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `172 (ø)` | :arrow_down: || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9029% (-712%)` | `6% (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb3j0zwrkb2lulmphdme) | `927% (-219%)` | `2% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9594% (-136%)` | `2% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9534% (-117%)` | `2% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgcm9tsxrlcmfibguuamf2yq) | `9625% (-107%)` | `5% (ø)` | || [rxjava3/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0v4zwn1dg9yu2nozwr1bgvylmphdme) | `96% (-1%)` | `10% (ø)` | || [3/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvqdwjsaxnolmphdme) | `9753% (-099%)` | `16% (-1%)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9743% (-086%)` | `2% (ø)` | || [internal/operators/flowable/flowableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvpynnlcnzlt24uamf2yq) | `9665% (-084%)` | `3% (ø)` | || and [11 more](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6730?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6730?srcpr&elfooter) last update [e65cd8d6efed6f](https://codecovio/gh/reactivex/rxjava/pull/6730?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5788.0,6732,1,0,0,0,0,0,1,0,3x: update singlezip marble diagrams (4 cases) related #5788-----![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlezipipng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlezipnpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleziparraypng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlezipwithpng)
6696.0,6744,1,0,0,1,0,1,1,0,3x: add fair mode overload to schedulersfrom(executor) the default `schedulersfrom` implementation uses an eager approach to execute tasks on the underlying `executor` which can lead to excessive thread occupation on its own even if operators use buffering/prefetch of 1this pr introduces a new overload with a fairness option so that tasks are submitted to the `executor` in a non-overlapping and fifo manner one by onein addition the scheduler retention tests have been cleaned up and reworked to not wait unnecessarily long for the gc to finishrelated: #6696 #6697 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6744?srcpr&elh1) report> merging [#6744](https://codecovio/gh/reactivex/rxjava/pull/6744?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/445def84cee2cf5e4a2e6fdfe9db753e522f2b57?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `96%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6744/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6744?srcpr&eltree)```diff@@ coverage diff @@## 3x #6744 +/- ##+ coverage 9812% 9813% + (ø)` | `12 (+1)` | :arrow_up: || [rxjava3/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6744/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0v4zwn1dg9yu2nozwr1bgvylmphdme) | `9589% (-111%)` | `10 (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6744/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbjdgvyywjszuzsb3dhymxllmphdme) | `9416% (-25%)` | `2% (ø)` | || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6744/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9658% (-244%)` | `51% (ø)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6744/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% (-186%)` | `39% (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6744/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `9084% (-141%)` | `2% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6744/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9594% (-136%)` | `2% (ø)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6744/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9676% (-13%)` | `6% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6744/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9743% (-086%)` | `2% (ø)` | || and [13 more](https://codecovio/gh/reactivex/rxjava/pull/6744/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6744?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6744?srcpr&elfooter) last update [445def891f4dd4](https://codecovio/gh/reactivex/rxjava/pull/6744?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
674.0,6745,1,0,0,0,0,0,1,0,3x: make disposablecontainer public api make the internal interface `disposablecontainer` public as it can be one safely(ive seen some 3rd party usage in custom containers this will make them now legit on 3x)**edit**also [should resolve](https://travis-ciorg/reactivex/rxjava/builds/620175320#l219) the osgi private reference warningresolves #6742 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6745?srcpr&elh1) report> merging [#6745](https://codecovio/gh/reactivex/rxjava/pull/6745?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/445def84cee2cf5e4a2e6fdfe9db753e522f2b57?srcpr&eldesc) will **decrease** coverage by `004%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6745/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6745?srcpr&eltree)```diff@@ coverage diff @@## 3x #6745 +/- ##- coverage 9812% 9808% -005% + complexity 6189 6187 -2 files 677 677 lines 44663 44663 branches 6171 6171 - hits 43825 43806 -19 - misses 299 311 +12 - partials 539 546 +7```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6745?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6745/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34 (-1)` | || [rxjava3/internal/schedulers/scheduledrunnablejava](https://codecovio/gh/reactivex/rxjava/pull/6745/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl1njagvkdwxlzfj1bm5hymxllmphdme) | `100% (ø)` | `30 (ø)` | :arrow_down: || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6745/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `100% (ø)` | `40 (ø)` | :arrow_down: || [x/rxjava3/internal/schedulers/newthreadworkerjava](https://codecovio/gh/reactivex/rxjava/pull/6745/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl05ld1rocmvhzfdvcmtlci5qyxzh) | `9491% (ø)` | `19 (ø)` | :arrow_down: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6745/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvcbg9ja2luz1n1ynnjcmlizs5qyxzh) | `9302% (-466%)` | `10% (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6745/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `8873% (-353%)` | `2% (ø)` | || [ctivex/rxjava3/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6745/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc91dglsl1f1zxvlrhjhaw5izwxwzxiuamf2yq) | `9722% (-278%)` | `56% (-2%)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6745/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93lmphdme) | `98% (-2%)` | `3% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6745/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9594% (-136%)` | `2% (ø)` | || and [20 more](https://codecovio/gh/reactivex/rxjava/pull/6745/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6745?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6745?srcpr&elfooter) last update [445def8319d1ef](https://codecovio/gh/reactivex/rxjava/pull/6745?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
674.0,6748,1,0,0,0,0,1,1,0,3x: change how the cause of compositeexception is generated this pr changes how `compositeexceptiongetcause` creates a cause exception on demand in 1x and 2x the code tried to link up the various inner exceptions via their `initcause` which was in on itself fishy as well as could lead to excessive memory usageinstead the new code will present the inner exceptions as part of a formatted message which in theory should be still picked up by ide exception listings and allow navigation:```multiple exceptions (2)|-- ioreactivexrxjava3exceptionstestexception: ex3 at ioreactivexrxjava3exceptionscompositeexceptiontestnestedmultilinemessage(compositeexceptiontestjava:341)|-- ioreactivexrxjava3exceptionstestexception: ex4 at ioreactivexrxjava3exceptionscompositeexceptiontestnestedmultilinemessage(compositeexceptiontestjava:342) |-- ioreactivexrxjava3exceptionscompositeexception: 2 exceptions occurred at ioreactivexrxjava3exceptionscompositeexceptiontestnestedmultilinemessage(compositeexceptiontestjava:337) |-- ioreactivexrxjava3exceptionscompositeexceptionexceptionoverview: multiple exceptions (2) |-- ioreactivexrxjava3exceptionstestexception: ex1 at ioreactivexrxjava3exceptionscompositeexceptiontestnestedmultilinemessage(compositeexceptiontestjava:335) |-- ioreactivexrxjava3exceptionstestexception: ex2 at ioreactivexrxjava3exceptionscompositeexceptiontestnestedmultilinemessage(compositeexceptiontestjava:336)```![image](https://user-imagesgithubusercontentcom/1269832/70315342-a9308600-1819-11ea-81d2-b56694dbd9e8png)there are a few formatting conveniences:- if there is only one inner exception the `compositeexception`s cause will be simply that exception this can happen when the very same exception is aggregated into the composite and get deduplicated- if an inner exceptions message is multi-lined the message and cause traces should be indented properly- reoccurring causes are not expanded over and over:```multiple exceptions (2)|-- ioreactivexrxjava3exceptionstestexception: ex1 at ioreactivexrxjava3exceptionscompositeexceptiontestreoccurringexception(compositeexceptiontestjava:316) |-- ioreactivexrxjava3exceptionstestexception: ex0 at ioreactivexrxjava3exceptionscompositeexceptiontestreoccurringexception(compositeexceptiontestjava:315)|-- ioreactivexrxjava3exceptionstestexception: ex2 at ioreactivexrxjava3exceptionscompositeexceptiontestreoccurringexception(compositeexceptiontestjava:319) |-- ioreactivexrxjava3exceptionstestexception: ex1 at ioreactivexrxjava3exceptionscompositeexceptiontestreoccurringexception(compositeexceptiontestjava:316) |-- (cause not expanded again) ioreactivexrxjava3exceptionstestexception: ex0```currently only the first line of the stacktraces are shown because it can get quite long (and thus memory consuming) to list them all maybe a system parameter can be introduced to control the verbosityfixes #6747 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6748?srcpr&elh1) report> merging [#6748](https://codecovio/gh/reactivex/rxjava/pull/6748?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/1e2995812e759d5bf624f3a921f2e57c8c5e0f34?srcpr&eldesc) will **decrease** coverage by `006%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6748/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6748?srcpr&eltree)```diff@@ coverage diff @@## 3x #6748 +/- ##- coverage 9816% 9809% -007% complexity 6188 6188 files 677 677 lines 44619 44626 +7 branches 6157 6161 +4 - hits 43800 43776 -24 - misses 292 309 +17 - partials 527 541 +14```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6748?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [activex/rxjava3/exceptions/compositeexceptionjava](https://codecovio/gh/reactivex/rxjava/pull/6748/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9legnlchrpb25zl0nvbxbvc2l0zuv4y2vwdglvbi5qyxzh) | `100% (ø)` | `35 (-1)` | :arrow_down: || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6748/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `7948% (-1624%)` | `2% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6748/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9244% (-291%)` | `2% (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6748/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu3dpdgnotwfwlmphdme) | `9157% (-211%)` | `3% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6748/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9594% (-136%)` | `2% (ø)` | || [rnal/operators/observable/observableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/6748/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlt2jzzxj2zu9ulmphdme) | `9869% (-131%)` | `3% (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6748/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrou2luz2xllmphdme) | `9905% (-095%)` | `2% (ø)` | || [/operators/observable/observablecombinelatestjava](https://codecovio/gh/reactivex/rxjava/pull/6748/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq29tymluzuxhdgvzdc5qyxzh) | `9617% (-064%)` | `6% (ø)` | || [3/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6748/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvhcm91cej5lmphdme) | `9559% (-063%)` | `3% (ø)` | || [ternal/operators/observable/observablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6748/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlr3jvdxbces5qyxzh) | `9508% (-055%)` | `2% (ø)` | || and [14 more](https://codecovio/gh/reactivex/rxjava/pull/6748/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6748?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6748?srcpr&elfooter) last update [1e29958ae3c299](https://codecovio/gh/reactivex/rxjava/pull/6748?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
675.0,6754,1,0,0,0,0,1,1,1,2x: zip combinelatest and amb operators throw when supplied with observablesource implementation that doesnt subclass observable fixes #6753 please add unit tests so this doesnt happen again in case of any future change || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6754?srcpr&elh1) report> merging [#6754](https://codecovio/gh/reactivex/rxjava/pull/6754?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/31b407f3d66a1c36dcadd37a85f89b68ec62ff16?srcpr&eldesc) will **decrease** coverage by ` the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6754/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6754?srcpr&eltree)```diff@@ coverage diff @@## 2x #6754 +/- ##- coverage 9825% 9824% -001% + complexity 6350 6347 -3 files 677 677 lines 45532 45532 branches 6334 6334 - hits 44736 44732 -4 - misses 247 248 +1 - partials 549 552 +3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6754?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [x/internal/operators/observable/observablezipjava](https://codecovio/gh/reactivex/rxjava/pull/6754/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvppcc5qyxzh) | `100% (ø)` | `6 (ø)` | :arrow_down: || [/operators/observable/observablecombinelatestjava](https://codecovio/gh/reactivex/rxjava/pull/6754/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunvbwjpbmvmyxrlc3quamf2yq) | `9631% (-062%)` | `6 (ø)` | || [x/internal/operators/observable/observableambjava](https://codecovio/gh/reactivex/rxjava/pull/6754/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuftyi5qyxzh) | `9894% (ø)` | `8 (ø)` | :arrow_down: || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6754/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9082% (-532%)` | `2% (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6754/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% (-378%)` | `24% (-1%)` | || [nal/operators/observable/observablepublishaltjava](https://codecovio/gh/reactivex/rxjava/pull/6754/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2hbbhquamf2yq) | `9252% (-374%)` | `14% (-1%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6754/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% (-2%)` | `34% (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6754/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8823% (-197%)` | `2% (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6754/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% (-186%)` | `39% (-1%)` | || [ternal/operators/flowable/flowablesubscribeonjava](https://codecovio/gh/reactivex/rxjava/pull/6754/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3vic2nyawjlt24uamf2yq) | `9661% (-17%)` | `2% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6754/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6754?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6754?srcpr&elfooter) last update [31b407fb48d0f5](https://codecovio/gh/reactivex/rxjava/pull/6754?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || added unit tests ||
675.0,6756,1,0,0,1,0,1,1,1,3x: fix observable amb combinelatest & zip arraystoreexception when using iterable of sources the initial array is the wrong type and causes `arraystoreexception`unit tests were added to verify the other implementationsfixes #6753 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6756?srcpr&elh1) report> merging [#6756](https://codecovio/gh/reactivex/rxjava/pull/6756?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/ec81e8c8b8593e222a9c650abb71d5a529aa32ed?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6756/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6756?srcpr&eltree)```diff@@ coverage diff @@## 3x #6756 +/- ##- coverage 9813% 981% -004% + complexity 6190 6186 -4 files 677 677 lines 44626 44626 branches 6161 6161 - hits 43794 43780 -14 - misses 300 303 +3 - partials 532 543 +11```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6756?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/operators/observable/observablecombinelatestjava](https://codecovio/gh/reactivex/rxjava/pull/6756/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq29tymluzuxhdgvzdc5qyxzh) | `9681% (ø)` | `6 (ø)` | :arrow_down: || [3/internal/operators/observable/observablezipjava](https://codecovio/gh/reactivex/rxjava/pull/6756/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlwmlwlmphdme) | `100% (ø)` | `6 (ø)` | :arrow_down: || [3/internal/operators/observable/observableambjava](https://codecovio/gh/reactivex/rxjava/pull/6756/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlqw1ilmphdme) | `9894% (ø)` | `8 (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6756/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `838% (-1127%)` | `2% (ø)` | || [rnal/subscribers/singlepostcompletesubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/6756/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zdwjzy3jpymvycy9taw5nbgvqb3n0q29tcgxldgvtdwjzy3jpymvylmphdme) | `923% (-77%)` | `14% (-1%)` | || [rxjava3/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6756/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvuxvldwvecmfpbk9ic2vydmvylmphdme) | `9743% (-257%)` | `21% (-1%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6756/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34% (-1%)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6756/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% (-186%)` | `39% (-1%)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6756/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbjdgvyywjszuzsb3dhymxllmphdme) | `9416% (-167%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6756/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `927% (-105%)` | `2% (ø)` | || and [10 more](https://codecovio/gh/reactivex/rxjava/pull/6756/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6756?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6756?srcpr&elfooter) last update [ec81e8cdb7ae4b](https://codecovio/gh/reactivex/rxjava/pull/6756?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
676.0,6762,1,0,0,0,0,1,1,1,3x: fix window (boundary start/end) cancel and abandonment this pr fixes the `window` operator (with boundary and start-end sources) so that- cancelling the inner windows allows cancelling the upstream once neither the main output nor other windows are being consumed further- ignoring a window still allows cancelling the upstreamfollow-up to #6758 and #6761 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6762?srcpr&elh1) report> merging [#6762](https://codecovio/gh/reactivex/rxjava/pull/6762?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/daeccff5d8a54130589564af68fe187ad2a144e2?srcpr&eldesc) will **increase** coverage by `006%`> the diff coverage is `9566%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6762/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6762?srcpr&eltree)```diff@@ coverage diff @@## 3x #6762 +/- ##+ coverage 9816% 9822% +006% + complexity 6196 6195 -1 files 679 679 lines 44552 44622 +70 branches 6145 6138 -7 + hits 43734 43832 +98 + misses 296 275 -21 + partials 522 515 -7```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6762?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6762/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `559 (ø)` | :arrow_down: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6762/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `537 (ø)` | :arrow_down: || [operators/observable/observablewindowboundaryjava](https://codecovio/gh/reactivex/rxjava/pull/6762/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93qm91bmrhcnkuamf2yq) | `9922% (+001%)` | `2 (ø)` | :arrow_down: || [nal/operators/flowable/flowablewindowboundaryjava](https://codecovio/gh/reactivex/rxjava/pull/6762/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvxaw5kb3dcb3vuzgfyes5qyxzh) | `9928% (+002%)` | `2 (ø)` | :arrow_down: || [ators/flowable/flowablewindowboundaryselectorjava](https://codecovio/gh/reactivex/rxjava/pull/6762/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvxaw5kb3dcb3vuzgfyevnlbgvjdg9ylmphdme) | `9523% (+427%)` | `2 (ø)` | :arrow_down: || [s/observable/observablewindowboundaryselectorjava](https://codecovio/gh/reactivex/rxjava/pull/6762/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93qm91bmrhcnltzwxly3rvci5qyxzh) | `9642% (+486%)` | `2 (ø)` | :arrow_down: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6762/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvcbg9ja2luz1n1ynnjcmlizs5qyxzh) | `9302% (-466%)` | `10% (-1%)` | || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6762/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9658% (-244%)` | `51% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6762/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9047% (-239%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6762/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `9014% (-141%)` | `2% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6762/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6762?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6762?srcpr&elfooter) last update [daeccffc1cd03f](https://codecovio/gh/reactivex/rxjava/pull/6762?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6695.0,6765,1,0,0,0,0,0,1,0,3x: [java 8] upgrade to java 8 add flowablefromx operators this pr upgrades rxjava to use and compile with java 8- build target set to 8- animalsniffer set to 8- javadocs link to the official jdk set to 8- implemented operators: - `flowablefromoptional` - `flowablefromcompletionstage` - `flowablefromstream`- applied `@safevarargs` to many methods- created marblesrelated #6695![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/fromoptionalfpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/fromcompletionstagefpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/fromstreamfpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6765?srcpr&elh1) report> merging [#6765](https://codecovio/gh/reactivex/rxjava/pull/6765?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/f96821f14c91752d323877a7874f480fd6b02f12?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `9938%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6765/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6765?srcpr&eltree)```diff@@ coverage diff @@## 3x #6765 +/- ##+ coverage 9819% 9821% +001% - complexity 6196 6205 +9 files 679 681 +2 lines 44622 44784 +162 branches 6138 6164 +26 + hits 43817 43983 +166 + misses 283 281 -2 + partials 522 520 -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6765?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/reactivex/rxjava3/observers/basetestconsumerjava](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9vynnlcnzlcnmvqmfzzvrlc3rdb25zdw1lci5qyxzh) | `9723% (ø)` | `69 (ø)` | :arrow_down: || [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `562 (+3)` | :arrow_up: || [va3/internal/jdk8/flowablefromcompletionstagejava](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l0zsb3dhymxlrnjvbunvbxbszxrpb25tdgfnzs5qyxzh) | `100% (ø)` | `2 (?)` | || [ivex/rxjava3/internal/jdk8/flowablefromstreamjava](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l0zsb3dhymxlrnjvbvn0cmvhbs5qyxzh) | `9923% (ø)` | `5 (?)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `8591% (-916%)` | `2% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbjdgvyywjszuzsb3dhymxllmphdme) | `9416% (-25%)` | `2% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9418% (-233%)` | `2% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34% (-1%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9594% (-136%)` | `2% (ø)` | || [ava3/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb2lulmphdme) | `9204% (-114%)` | `3% (ø)` | || and [17 more](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6765?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6765?srcpr&elfooter) last update [f96821f3c19f8d](https://codecovio/gh/reactivex/rxjava/pull/6765?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || with this move there are many we can help || should remove the usage of `optionalof` with `optionalofnullable` ||
676.0,6773,1,0,1,0,0,0,1,0,add functionalinterface annotations resolves #6768 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6773?srcpr&elh1) report> merging [#6773](https://codecovio/gh/reactivex/rxjava/pull/6773?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/6ba932c9a3752c6d85d65bd2292c3a47cab64fd6?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6773/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6773?srcpr&eltree)```diff@@ coverage diff @@## 3x #6773 +/- ##+ coverage 982% 9821% + (-282%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9047% (-239%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `901% (-105%)` | `2% (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrou2luz2xllmphdme) | `9905% (-095%)` | `2% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9743% (-086%)` | `2% (ø)` | || [internal/operators/flowable/flowableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvpynnlcnzlt24uamf2yq) | `9665% (-084%)` | `3% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbjdgvyywjszuzsb3dhymxllmphdme) | `9583% (-084%)` | `2% (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb3j0zwrkb2lulmphdme) | `9416% (-073%)` | `2% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `936% (-059%)` | `2% (ø)` | || [ternal/operators/flowable/flowablewindowtimedjava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvxaw5kb3duaw1lzc5qyxzh) | `9662% (-057%)` | `5% (ø)` | || and [14 more](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6773?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6773?srcpr&elfooter) last update [6ba932c23ad4b9](https://codecovio/gh/reactivex/rxjava/pull/6773?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6776.0,6779,1,1,0,1,1,1,1,1,3x: [java 8] add blockingstream & flatmapstream to flowable add java 8 interoperation methods to `flowable`:- `blockingstream` - essentially `blockingiterable` with close support- `concatmapstream` - map and concatenate streams- `flatmapstream` - map and concatenate streams inherently same as `concatmapstream`related #6776 marbles:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/blockingstreamfpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/blockingstreamfipng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/concatmapstreamfpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/concatmapstreamfipng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flatmapstreamfpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flatmapstreamfipng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6779?srcpr&elh1) report> merging [#6779](https://codecovio/gh/reactivex/rxjava/pull/6779?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/8d41cc5801eecac4acc38eee7adcee642de24385?srcpr&eldesc) will **decrease** coverage by ` the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6779/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6779?srcpr&eltree)```diff@@ coverage diff @@## 3x #6779 +/- ##- coverage 9822% 9821% -001% - complexity 6236 6248 +12 files 688 689 +1 lines 45041 45208 +167 branches 6193 6220 +27 + hits 44243 44403 +160 - misses 280 283 +3 - partials 518 522 +4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6779?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [x/rxjava3/internal/jdk8/flowableflatmapstreamjava](https://codecovio/gh/reactivex/rxjava/pull/6779/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l0zsb3dhymxlrmxhde1hcfn0cmvhbs5qyxzh) | `100% (ø)` | `5 (?)` | || [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6779/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `577 (+7)` | :arrow_up: || [ivex/rxjava3/internal/jdk8/flowablefromstreamjava](https://codecovio/gh/reactivex/rxjava/pull/6779/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l0zsb3dhymxlrnjvbvn0cmvhbs5qyxzh) | `9924% (+001%)` | `6 (+1)` | :arrow_up: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6779/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `838% (-775%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6779/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8968% (-477%)` | `2% (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6779/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb3j0zwrkb2lulmphdme) | `927% (-292%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6779/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9322% (-209%)` | `2% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6779/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34% (-1%)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6779/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93lmphdme) | `9818% (-182%)` | `3% (ø)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6779/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9611% (-162%)` | `6% (ø)` | || and [15 more](https://codecovio/gh/reactivex/rxjava/pull/6779/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6779?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6779?srcpr&elfooter) last update [8d41cc546eb3f4](https://codecovio/gh/reactivex/rxjava/pull/6779?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
677.0,6780,1,0,0,0,0,0,1,0,3x: [java 8] add autocloseable disposable conversions nicen docs add `disposablesfromautocloseable` and `disposablestoautocloseable` methods improve javadocs stylingresolves #6772resolves #6777 you could also do```javainterface disposable extends autocloseable { boolean isdisposed() void dispose() default void close() { dispose() }}``` || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6780?srcpr&elh1) report> merging [#6780](https://codecovio/gh/reactivex/rxjava/pull/6780?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/8d41cc5801eecac4acc38eee7adcee642de24385?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6780/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6780?srcpr&eltree)```diff@@ coverage diff @@## 3x #6780 +/- ##+ coverage 9822% 9826% +003% - complexity 6236 6241 +5 files 688 689 +1 lines 45041 45053 +12 branches 6193 6193 + hits 44243 44270 +27 + misses 280 273 -7 + partials 518 510 -8```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6780?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ctivex/rxjava3/disposables/runnabledisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9sdw5uywjszurpc3bvc2fibguuamf2yq) | `100% (ø)` | `3 (ø)` | :arrow_down: || [eactivex/rxjava3/disposables/futuredisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9gdxr1cmveaxnwb3nhymxllmphdme) | `100% (ø)` | `6 (ø)` | :arrow_down: || [x/rxjava3/disposables/autocloseabledisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9bdxrvq2xvc2vhymxlrglzcg9zywjszs5qyxzh) | `100% (ø)` | `3 (?)` | || [eactivex/rxjava3/disposables/actiondisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9by3rpb25eaxnwb3nhymxllmphdme) | `100% (ø)` | `3 (+1)` | :arrow_up: || [/io/reactivex/rxjava3/disposables/disposablesjava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9eaxnwb3nhymxlcy5qyxzh) | `100% (ø)` | `10 (+2)` | :arrow_up: || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbjdgvyywjszuzsb3dhymxllmphdme) | `9416% (-25%)` | `2% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34% (-1%)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% (-186%)` | `39% (-1%)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93lmphdme) | `9818% (-182%)` | `3% (ø)` | || [ava3/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb2lulmphdme) | `9204% (-114%)` | `3% (ø)` | || and [17 more](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6780?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6780?srcpr&elfooter) last update [8d41cc5b5e6b61](https://codecovio/gh/reactivex/rxjava/pull/6780?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || ive tried `disposable extends autocloseable` before and ended up with hundreds of warnings about unclosed resources id rather keep them separate ||
6772.0,6780,1,0,0,0,0,0,1,0,3x: [java 8] add autocloseable disposable conversions nicen docs add `disposablesfromautocloseable` and `disposablestoautocloseable` methods improve javadocs stylingresolves #6772resolves #6777 you could also do```javainterface disposable extends autocloseable { boolean isdisposed() void dispose() default void close() { dispose() }}``` || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6780?srcpr&elh1) report> merging [#6780](https://codecovio/gh/reactivex/rxjava/pull/6780?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/8d41cc5801eecac4acc38eee7adcee642de24385?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6780/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6780?srcpr&eltree)```diff@@ coverage diff @@## 3x #6780 +/- ##+ coverage 9822% 9826% +003% - complexity 6236 6241 +5 files 688 689 +1 lines 45041 45053 +12 branches 6193 6193 + hits 44243 44270 +27 + misses 280 273 -7 + partials 518 510 -8```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6780?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ctivex/rxjava3/disposables/runnabledisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9sdw5uywjszurpc3bvc2fibguuamf2yq) | `100% (ø)` | `3 (ø)` | :arrow_down: || [eactivex/rxjava3/disposables/futuredisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9gdxr1cmveaxnwb3nhymxllmphdme) | `100% (ø)` | `6 (ø)` | :arrow_down: || [x/rxjava3/disposables/autocloseabledisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9bdxrvq2xvc2vhymxlrglzcg9zywjszs5qyxzh) | `100% (ø)` | `3 (?)` | || [eactivex/rxjava3/disposables/actiondisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9by3rpb25eaxnwb3nhymxllmphdme) | `100% (ø)` | `3 (+1)` | :arrow_up: || [/io/reactivex/rxjava3/disposables/disposablesjava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9eaxnwb3nhymxlcy5qyxzh) | `100% (ø)` | `10 (+2)` | :arrow_up: || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbjdgvyywjszuzsb3dhymxllmphdme) | `9416% (-25%)` | `2% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34% (-1%)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% (-186%)` | `39% (-1%)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93lmphdme) | `9818% (-182%)` | `3% (ø)` | || [ava3/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb2lulmphdme) | `9204% (-114%)` | `3% (ø)` | || and [17 more](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6780?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6780?srcpr&elfooter) last update [8d41cc5b5e6b61](https://codecovio/gh/reactivex/rxjava/pull/6780?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || ive tried `disposable extends autocloseable` before and ended up with hundreds of warnings about unclosed resources id rather keep them separate ||
6776.0,6783,1,0,0,1,0,1,1,1,3x: [java 8] add fromopt/stage mapoptional tocompletionstage to m/s/c add the following java 8 operators to various reactive base classes:| operator | `maybe` | `single` | `completable` ||---|:---:|:---:|:---:|| `fromoptional` | ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng) | (1) | (2) || `fromcompletionstage` | ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng) | ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng) | ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng) || `mapoptional` | ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng) | ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng) | (3) || `tocompletionstage` | ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng) | ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng) | (4) || `tocompletionstage(t)` | ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng) | (5) | ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng) |1 should it be implemented as `optionalempty() -> singleerror(new nosuchelementexception())`?2 no reason to implement always `completablecomplete()`3 no value to map4 no value to emit thus it is better to ask the user for a completion value5 never empty no reason to implementrelated #6776 marbles:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/fromoptionalmpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/fromcompletionstagespng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/fromcompletionstagecpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/mapoptionalmpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/mapoptionalspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/tocompletionstagempng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/tocompletionstagemvpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/tocompletionstagespng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/tocompletionstagecpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6783?srcpr&elh1) report> merging [#6783](https://codecovio/gh/reactivex/rxjava/pull/6783?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/166c529eb165b473c9bff11e8fedbde6c471b005?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6783/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6783?srcpr&eltree)```diff@@ coverage diff @@## 3x #6783 +/- ##+ coverage 9824% 9825% + (ø)` | `2 (?)` | || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6783/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `177 (+5)` | :arrow_up: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6783/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `151 (+3)` | :arrow_up: || [rxjava3/internal/jdk8/completionstageconsumerjava](https://codecovio/gh/reactivex/rxjava/pull/6783/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l0nvbxbszxrpb25tdgfnzunvbnn1bwvylmphdme) | `100% (ø)` | `12 (?)` | || [tivex/rxjava3/internal/jdk8/singlemapoptionaljava](https://codecovio/gh/reactivex/rxjava/pull/6783/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1npbmdszu1hce9wdglvbmfslmphdme) | `100% (ø)` | `2 (?)` | || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6783/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `120 (+2)` | :arrow_up: || [xjava3/internal/jdk8/maybefromcompletionstagejava](https://codecovio/gh/reactivex/rxjava/pull/6783/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l01hewjlrnjvbunvbxbszxrpb25tdgfnzs5qyxzh) | `100% (ø)` | `2 (?)` | || [ctivex/rxjava3/internal/jdk8/maybemapoptionaljava](https://codecovio/gh/reactivex/rxjava/pull/6783/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l01hewjltwfwt3b0aw9uywwuamf2yq) | `100% (ø)` | `2 (?)` | || [/internal/jdk8/completablefromcompletionstagejava](https://codecovio/gh/reactivex/rxjava/pull/6783/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l0nvbxbszxrhymxlrnjvbunvbxbszxrpb25tdgfnzs5qyxzh) | `100% (ø)` | `2 (?)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6783/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvcbg9ja2luz1n1ynnjcmlizs5qyxzh) | `9302% (-466%)` | `10% (-1%)` | || and [31 more](https://codecovio/gh/reactivex/rxjava/pull/6783/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6783?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6783?srcpr&elfooter) last update [166c5294cd2024](https://codecovio/gh/reactivex/rxjava/pull/6783?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6767.0,6786,1,0,0,1,1,1,1,1,diamond operators in unit tests observable package hello in this pull request ive changed all ide marked explicit types with diamond operator affected package is internal/operators/observable there is one test fail in completabletestrepeatnormal but diamond is not the cause there is last stack entry: javalangassertionerror: expected: but was: at orgjunitassertfail(assertjava:88)this pr is part of #6767 issue resolving # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6786?srcpr&elh1) report> merging [#6786](https://codecovio/gh/reactivex/rxjava/pull/6786?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/dba670554c69d6c09d28643505880c1a468af3db?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6786/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6786?srcpr&eltree)```diff@@ coverage diff @@## 3x #6786 +/- ##+ coverage 9824% 9827% +003% - complexity 6286 6288 +2 files 696 696 lines 45390 45390 branches 6233 6233 + hits 44592 44609 +17 + misses 277 268 -9 + partials 521 513 -8```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6786?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9594% (-136%)` | `2% (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrou2luz2xllmphdme) | `9905% (-095%)` | `2% (ø)` | || [va3/internal/operators/parallel/parallelrunonjava](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxsdw5pbi5qyxzh) | `9661% (-049%)` | `8% (ø)` | || [a/io/reactivex/rxjava3/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zdwjqzwn0cy9szxbsyxltdwjqzwn0lmphdme) | `9709% (-042%)` | `50% (ø)` | || [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcc5qyxzh) | `8963% (-034%)` | `3% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9829% (ø)` | `2% (ø)` | :arrow_down: || [3/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvhcm91cej5lmphdme) | `9591% (+031%)` | `3% (ø)` | :arrow_down: || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9773% (+032%)` | `6% (ø)` | :arrow_down: || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9583% (+052%)` | `2% (ø)` | :arrow_down: || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu3dpdgnotwfwlmphdme) | `9368% (+052%)` | `3% (ø)` | :arrow_down: || and [8 more](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6786?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6786?srcpr&elfooter) last update [dba670541ad820](https://codecovio/gh/reactivex/rxjava/pull/6786?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6767.0,6787,1,0,0,1,1,1,1,1,diamond operators in unit tests flowable package hello in this pull request ive changed all ide marked explicit types with diamond operator affected package is internal/operators/flowable there is one test fail in completabletestrepeatnormal but diamond is not the cause there is last stack entry: javalangassertionerror: expected: but was: at orgjunitassertfail(assertjava:88)this pr is part of #6767 issue resolving
6767.0,6788,1,0,0,1,1,1,1,1,diamond operators in tests hello in this pull request ive changed all ide marked explicit types with diamond operator affected packages is internal/ internal/operators/there is one test fail in completabletestrepeatnormal but diamond is not the cause there is last stack entry: javalangassertionerror: expected: but was: at orgjunitassertfail(assertjava:88)this pr is part of #6767 issue resolving # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6788?srcpr&elh1) report> merging [#6788](https://codecovio/gh/reactivex/rxjava/pull/6788?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/dba670554c69d6c09d28643505880c1a468af3db?srcpr&eldesc) will **decrease** coverage by ` the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6788/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6788?srcpr&eltree)```diff@@ coverage diff @@## 3x #6788 +/- ##- coverage 9824% 9823% -001% complexity 6286 6286 files 696 696 lines 45390 45390 branches 6233 6233 - hits 44592 44589 -3 misses 277 277 - partials 521 524 +3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6788?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6788/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8809% (-477%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6788/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9322% (-209%)` | `2% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6788/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34% (-1%)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6788/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93lmphdme) | `9818% (-182%)` | `3% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6788/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbjdgvyywjszuzsb3dhymxllmphdme) | `95% (-167%)` | `2% (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6788/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu3dpdgnotwfwlmphdme) | `9157% (-158%)` | `3% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6788/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9594% (-136%)` | `2% (ø)` | || [ivex/rxjava3/subscribers/serializedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/6788/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zdwjzy3jpymvycy9tzxjpywxpemvku3vic2nyawjlci5qyxzh) | `9886% (-114%)` | `26% (-1%)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6788/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrou2luz2xllmphdme) | `9905% (-095%)` | `2% (ø)` | || [a3/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6788/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvszxbsyxkuamf2yq) | `9197% (-083%)` | `19% (ø)` | || and [8 more](https://codecovio/gh/reactivex/rxjava/pull/6788/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6788?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6788?srcpr&elfooter) last update [dba670580fcf2e](https://codecovio/gh/reactivex/rxjava/pull/6788?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6767.0,6789,1,1,0,1,1,1,1,1,diamond operators in tests small packages hello in this pull request ive changed all ide marked explicit types with diamond operator affected packages is in tests rootthere is one test fail in completabletestrepeatnormal but diamond is not the cause there is last stack entry: javalangassertionerror: expected: but was: at orgjunitassertfail(assertjava:88)this pr is part of #6767 issue resolving # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6789?srcpr&elh1) report> merging [#6789](https://codecovio/gh/reactivex/rxjava/pull/6789?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/dba670554c69d6c09d28643505880c1a468af3db?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6789/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6789?srcpr&eltree)```diff@@ coverage diff @@## 3x #6789 +/- ##- coverage 9824% 9821% -003% + complexity 6286 6281 -5 files 696 696 lines 45390 45390 branches 6233 6233 - hits 44592 44582 -10 - misses 277 285 +8 - partials 521 523 +2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6789?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ctivex/rxjava3/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6789/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc91dglsl1f1zxvlrhjhaw5izwxwzxiuamf2yq) | `9583% (-417%)` | `55% (-3%)` | || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6789/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9658% (-244%)` | `51% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6789/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9047% (-239%)` | `2% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6789/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34% (-1%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6789/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu3dpdgnotwfwlmphdme) | `9157% (-158%)` | `3% (ø)` | || [ava3/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/pull/6789/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb2lulmphdme) | `9166% (-152%)` | `3% (ø)` | || [ava3/internal/operators/maybe/maybemergearrayjava](https://codecovio/gh/reactivex/rxjava/pull/6789/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvnzxjnzufycmf5lmphdme) | `9604% (-113%)` | `6% (ø)` | || [3/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6789/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvqdwjsaxnolmphdme) | `9753% (-099%)` | `16% (-1%)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6789/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrotwf5ymuuamf2yq) | `9909% (-091%)` | `2% (ø)` | || [/operators/maybe/maybeflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6789/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `959% (-082%)` | `2% (ø)` | || and [8 more](https://codecovio/gh/reactivex/rxjava/pull/6789/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6789?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6789?srcpr&elfooter) last update [dba670522ee4fa](https://codecovio/gh/reactivex/rxjava/pull/6789?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
676.0,6791,1,0,0,1,0,1,1,1,3x: add nonnull & safevarargs annotations + validator this pr cleans up the main classes:- add missing `@nonnull` annotations- add missing `@safevarargs` annotations- add validator code that scans the sources to verify the annotations are present- remove unnecessary `@suppresswarnings` annotations- fix a few type argumentsrelated #6766 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6791?srcpr&elh1) report> merging [#6791](https://codecovio/gh/reactivex/rxjava/pull/6791?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/0b92c6f0464e4b1edcd92cfbb72270f28d820aa8?srcpr&eldesc) will **decrease** coverage by `007%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6791/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6791?srcpr&eltree)```diff@@ coverage diff @@## 3x #6791 +/- ##- coverage 9827% 982% -008% + complexity 6287 6286 -1 files 696 696 lines 45390 45395 +5 branches 6233 6233 - hits 44607 44579 -28 - misses 273 290 +17 - partials 510 526 +16```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6791?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6791/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `577 (ø)` | :arrow_down: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6791/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `537 (ø)` | :arrow_down: || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6791/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `177 (ø)` | :arrow_down: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6791/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `151 (ø)` | :arrow_down: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6791/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `120 (ø)` | :arrow_down: || [n/java/io/reactivex/rxjava3/core/notificationjava](https://codecovio/gh/reactivex/rxjava/pull/6791/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll05vdglmawnhdglvbi5qyxzh) | `9393% (ø)` | `22 (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6791/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `838% (-1127%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6791/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9285% (-318%)` | `2% (ø)` | || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6791/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9658% (-244%)` | `51% (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6791/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu3dpdgnotwfwlmphdme) | `9157% (-211%)` | `3% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6791/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6791?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6791?srcpr&elfooter) last update [0b92c6f25dcda6](https://codecovio/gh/reactivex/rxjava/pull/6791?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
677.0,6797,1,0,0,1,0,1,1,1,3x: [java 8] add observable operators + cleanup add the following java 8 operators to `observable`:- `fromoptional`- `fromcompletionstage`- `fromstream`- `firststage`- `firstorerrorstage`- `singestage`- `singleorerrorstage`- `laststage`- `lastorerrorstage`- `blockingstream`- `mapoptional`- `collect`- `concatmapstream` / `flatmapstream`in addition some validators received reporting improvements (such as using ` at ` so the ide can jump to the exact line of the issue) consequently all local variable misnaming of `unicastsubject up` and `unicastprocessor us` have been fixed as wellrelated #6776 marbles:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/fromoptionalopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/fromcompletionstageopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/fromstreamopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/firststageopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/firstorerrorstageopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlestageopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleorerrorstageopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/laststageopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/lastorerrorstageopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/blockingstreamopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/blockingstreamoipng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/mapoptionalopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/collectoropng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flatmapstreamopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/concatmapstreamopng) || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6797?srcpr&elh1) report> merging [#6797](https://codecovio/gh/reactivex/rxjava/pull/6797?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/480889c58d3b762b073ef80229bf27f9d9429dd7?srcpr&eldesc) will **decrease** coverage by `007%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6797/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6797?srcpr&eltree)```diff@@ coverage diff @@## 3x #6797 +/- ##- coverage 9824% 9817% -008% - complexity 6283 6345 +62 files 696 706 +10 lines 45427 45846 +419 branches 6233 6280 +47 + hits 44632 45010 +378 - misses 278 309 +31 - partials 517 527 +10```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6797?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [a3/internal/jdk8/observablefirststageobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6797/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l09ic2vydmfibgvgaxjzdfn0ywdlt2jzzxj2zxiuamf2yq) | `100% (ø)` | `5 (?)` | || [va3/internal/jdk8/observablelaststageobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6797/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l09ic2vydmfibgvmyxn0u3rhz2vpynnlcnzlci5qyxzh) | `100% (ø)` | `6 (?)` | || [rxjava3/internal/jdk8/observableflatmapstreamjava](https://codecovio/gh/reactivex/rxjava/pull/6797/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l09ic2vydmfibgvgbgf0twfwu3ryzwftlmphdme) | `100% (ø)` | `5 (?)` | || [ex/rxjava3/internal/jdk8/observablefromstreamjava](https://codecovio/gh/reactivex/rxjava/pull/6797/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l09ic2vydmfibgvgcm9tu3ryzwftlmphdme) | `100% (ø)` | `5 (?)` | || [x/rxjava3/internal/jdk8/observablemapoptionaljava](https://codecovio/gh/reactivex/rxjava/pull/6797/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l09ic2vydmfibgvnyxbpchrpb25hbc5qyxzh) | `100% (ø)` | `2 (?)` | || [ivex/rxjava3/internal/jdk8/flowablefromstreamjava](https://codecovio/gh/reactivex/rxjava/pull/6797/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l0zsb3dhymxlrnjvbvn0cmvhbs5qyxzh) | `100% (+075%)` | `6 (ø)` | :arrow_down: || [rxjava3/internal/jdk8/observablestageobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6797/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l09ic2vydmfibgvtdgfnzu9ic2vydmvylmphdme) | `100% (ø)` | `9 (?)` | || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6797/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `553 (+16)` | :arrow_up: || [nal/jdk8/observablecollectwithcollectorsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6797/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l09ic2vydmfibgvdb2xszwn0v2l0aenvbgxly3rvclnpbmdszs5qyxzh) | `100% (ø)` | `3 (?)` | || [3/internal/jdk8/observablesinglestageobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6797/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l09ic2vydmfibgvtaw5nbgvtdgfnzu9ic2vydmvylmphdme) | `100% (ø)` | `7 (?)` | || and [33 more](https://codecovio/gh/reactivex/rxjava/pull/6797/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6797?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6797?srcpr&elfooter) last update [480889c72b22cc](https://codecovio/gh/reactivex/rxjava/pull/6797?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6794.0,6799,1,0,0,0,0,1,1,1,3x: xprocessoroffer to throw npe immediately make `offer` throw a `nullpointerexception` immediately instead of turning it into an error signal in addition have `multicastprocessoroffer` throw an `illegalstateexception` if called when the processor is in fusion moderesolves #6794 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6799?srcpr&elh1) report> merging [#6799](https://codecovio/gh/reactivex/rxjava/pull/6799?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/3d00eb188bad1d49aa058e896ad9d1b5026eba7d?srcpr&eldesc) will **decrease** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6799/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6799?srcpr&eltree)```diff@@ coverage diff @@## 3x #6799 +/- ##- coverage 9821% 9817% -005% complexity 6375 6375 files 711 711 lines 46217 46214 -3 branches 6329 6330 +1 - hits 45393 45370 -23 - misses 298 309 +11 - partials 526 535 +9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6799?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9802% (+144%)` | `49 (-2)` | :arrow_down: || [reactivex/rxjava3/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl1b1ymxpc2hqcm9jzxnzb3iuamf2yq) | `100% (ø)` | `42 (-1)` | :arrow_down: || [activex/rxjava3/processors/multicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl011bhrpy2fzdfbyb2nlc3nvci5qyxzh) | `9868% (+132%)` | `84 (+1)` | :arrow_up: || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `7948% (-1966%)` | `2% (ø)` | || [observable/observablewindowsubscribeinterceptjava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93u3vic2nyawjlsw50zxjjzxb0lmphdme) | `875% (-125%)` | `4% (-1%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9285% (-318%)` | `2% (ø)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `9181% (-273%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9114% (-261%)` | `2% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93lmphdme) | `9818% (-182%)` | `3% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9244% (-175%)` | `2% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6799?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6799?srcpr&elfooter) last update [3d00eb1482bd2b](https://codecovio/gh/reactivex/rxjava/pull/6799?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
678.0,6800,1,0,0,0,0,0,1,0,3x: add blockingforeach(consumer int) overload the underlying `blockingiterable` already supported the custom prefetch overload and this pr exposes it as a new `blockingforeach` overloadin addition the javadocs incorrectly stated `blockingforeach` operated in an unbounded-in fashion it uses the usual stable-prefetch with 75% re-request amountresolves #6784 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6800?srcpr&elh1) report> merging [#6800](https://codecovio/gh/reactivex/rxjava/pull/6800?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/3d00eb188bad1d49aa058e896ad9d1b5026eba7d?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6800/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6800?srcpr&eltree)```diff@@ coverage diff @@## 3x #6800 +/- ##+ coverage 9821% 9824% +003% - complexity 6375 6379 +4 files 711 711 lines 46217 46221 +4 branches 6329 6329 + hits 45393 45411 +18 + misses 298 286 -12 + partials 526 524 -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6800?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6800/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `578 (+1)` | :arrow_up: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6800/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `554 (+1)` | :arrow_up: || [observable/observablewindowsubscribeinterceptjava](https://codecovio/gh/reactivex/rxjava/pull/6800/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93u3vic2nyawjlsw50zxjjzxb0lmphdme) | `875% (-125%)` | `4% (-1%)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6800/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxszwr1y2vgdwxslmphdme) | `9108% (-397%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6800/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9365% (-239%)` | `2% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6800/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxluhvibglzac5qyxzh) | `9729% (-181%)` | `16% (-1%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6800/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9244% (-175%)` | `2% (ø)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6800/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9417% (-13%)` | `6% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6800/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9829% (-086%)` | `2% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6800/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbjdgvyywjszuzsb3dhymxllmphdme) | `9583% (-084%)` | `2% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6800/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6800?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6800?srcpr&elfooter) last update [3d00eb114ef580](https://codecovio/gh/reactivex/rxjava/pull/6800?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
679.0,6801,1,0,0,0,0,1,1,1,3x: add missing throwiffatal calls - add missing `exceptionsthrowiffatal` calls in `catch (throwable ` blocks- add validator that checks for the existence of these `throwiffatal` `wraporthrow` or `fail` calls- fix `autocloseabledisposable` to use `wraporthrow` like the other `disposable` wrapper implementationsresolves #6796 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6801?srcpr&elh1) report> merging [#6801](https://codecovio/gh/reactivex/rxjava/pull/6801?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/38bcd5e292c9e44c542ff4bbcf8e23736b4a7748?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `8787%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6801/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6801?srcpr&eltree)```diff@@ coverage diff @@## 3x #6801 +/- ##+ coverage 9824% 9824% + (-215%)` | `3 (ø)` | || [ternal/operators/observable/observablecollectjava](https://codecovio/gh/reactivex/rxjava/pull/6801/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq29sbgvjdc5qyxzh) | `100% (ø)` | `2 (ø)` | :arrow_down: || [ternal/schedulers/scheduleddirectperiodictaskjava](https://codecovio/gh/reactivex/rxjava/pull/6801/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl1njagvkdwxlzerpcmvjdfblcmlvzgljvgfzay5qyxzh) | `100% (ø)` | `2 (ø)` | :arrow_down: || [nternal/operators/flowable/flowablescalarxmapjava](https://codecovio/gh/reactivex/rxjava/pull/6801/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvty2fsyxjytwfwlmphdme) | `100% (ø)` | `7 (ø)` | :arrow_down: || [nal/operators/observable/observablescalarxmapjava](https://codecovio/gh/reactivex/rxjava/pull/6801/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu2nhbgfywe1hcc5qyxzh) | `9772% (+002%)` | `7 (ø)` | :arrow_down: || [java3/internal/schedulers/instantperiodictaskjava](https://codecovio/gh/reactivex/rxjava/pull/6801/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0luc3rhbnrqzxjpb2rpy1rhc2suamf2yq) | `100% (ø)` | `20 (ø)` | :arrow_down: || [s/observable/observablewindowboundaryselectorjava](https://codecovio/gh/reactivex/rxjava/pull/6801/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93qm91bmrhcnltzwxly3rvci5qyxzh) | `9644% (+001%)` | `2 (ø)` | :arrow_down: || [ators/flowable/flowablewindowboundaryselectorjava](https://codecovio/gh/reactivex/rxjava/pull/6801/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvxaw5kb3dcb3vuzgfyevnlbgvjdg9ylmphdme) | `9526% (+002%)` | `2 (ø)` | :arrow_down: || [nternal/operators/observable/observablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6801/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlumvwbgf5lmphdme) | `963% (ø)` | `19 (ø)` | :arrow_down: || [/operators/observable/observablecollectsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6801/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq29sbgvjdfnpbmdszs5qyxzh) | `100% (ø)` | `3 (ø)` | :arrow_down: || and [39 more](https://codecovio/gh/reactivex/rxjava/pull/6801/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6801?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6801?srcpr&elfooter) last update [38bcd5e1280490](https://codecovio/gh/reactivex/rxjava/pull/6801?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6776.0,6805,1,0,0,0,0,1,1,0,3x: [java 8] add flattenstreamasx to maybe/single add- `maybeflattenstreamasflowable`- `maybeflattenstreamasobservable`- `singleflattenstreamasflowable`- `singleflattenstreamasobservable`related #6776(in addition adjust the validators to appreciate the new patterns)marbles:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flattenstreamasflowablempng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flattenstreamasobservablempng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flattenstreamasflowablespng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flattenstreamasobservablespng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6805?srcpr&elh1) report> merging [#6805](https://codecovio/gh/reactivex/rxjava/pull/6805?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/79f8e6dde6446b1aa33c146eaedbb958086daf56?srcpr&eldesc) will **decrease** coverage by `005%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6805/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6805?srcpr&eltree)```diff@@ coverage diff @@## 3x #6805 +/- ##- coverage 9827% 9822% -006% - complexity 6372 6381 +9 files 711 715 +4 lines 46243 46496 +253 branches 6329 6371 +42 + hits 45446 45670 +224 - misses 282 299 +17 - partials 515 527 +12```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6805?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `553 (ø)` | :arrow_down: || [a3/internal/jdk8/maybeflattenstreamasflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l01hewjlrmxhdhrlbln0cmvhbufzrmxvd2fibguuamf2yq) | `100% (ø)` | `2 (?)` | || [/internal/jdk8/maybeflattenstreamasobservablejava](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l01hewjlrmxhdhrlbln0cmvhbufzt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `2 (?)` | || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `179 (+2)` | :arrow_up: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `153 (+2)` | :arrow_up: || [3/internal/jdk8/singleflattenstreamasflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1npbmdszuzsyxr0zw5tdhjlyw1bc0zsb3dhymxllmphdme) | `100% (ø)` | `2 (?)` | || [internal/jdk8/singleflattenstreamasobservablejava](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1npbmdszuzsyxr0zw5tdhjlyw1bc09ic2vydmfibguuamf2yq) | `100% (ø)` | `2 (?)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `899% (-826%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8888% (-556%)` | `2% (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxszwr1y2vgdwxslmphdme) | `9108% (-397%)` | `2% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6805?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6805?srcpr&elfooter) last update [79f8e6df455cd2](https://codecovio/gh/reactivex/rxjava/pull/6805?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
681.0,6814,1,0,0,1,0,1,1,1,3x: remove fromfuture( scheduler) overloads those overloads were only applying `subscribeon` with no other benefitsresolves: #6811 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6814?srcpr&elh1) report> merging [#6814](https://codecovio/gh/reactivex/rxjava/pull/6814?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/45c0b064dcaea7ac3d55249c04a62370ebf4b4a9?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6814/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6814?srcpr&eltree)```diff@@ coverage diff @@## 3x #6814 +/- ##+ coverage 9826% 9828% +002% + complexity 6385 6378 -7 files 715 715 lines 46498 46486 -12 branches 6371 6371 - hits 45689 45687 -2 + misses 284 283 -1 + partials 525 516 -9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6814?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6814/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `151 (-2)` | :arrow_down: || [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6814/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `575 (-2)` | :arrow_down: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6814/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `551 (-2)` | :arrow_down: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6814/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8888% (-635%)` | `2% (ø)` | || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6814/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9655% (-247%)` | `50% (ø)` | || [ivex/rxjava3/subscribers/serializedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/6814/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zdwjzy3jpymvycy9tzxjpywxpemvku3vic2nyawjlci5qyxzh) | `9886% (-114%)` | `26% (-1%)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6814/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9644% (-098%)` | `6% (ø)` | || [rxjava3/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6814/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0v4zwn1dg9yu2nozwr1bgvylmphdme) | `9589% (-092%)` | `10% (ø)` | || [3/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6814/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvhcm91cej5lmphdme) | `9559% (-063%)` | `3% (ø)` | || [/reactivex/rxjava3/observers/basetestconsumerjava](https://codecovio/gh/reactivex/rxjava/pull/6814/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9vynnlcnzlcnmvqmfzzvrlc3rdb25zdw1lci5qyxzh) | `9668% (-056%)` | `68% (-1%)` | || and [13 more](https://codecovio/gh/reactivex/rxjava/pull/6814/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6814?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6814?srcpr&elfooter) last update [45c0b06f4f0138](https://codecovio/gh/reactivex/rxjava/pull/6814?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
681.0,6817,1,0,0,0,0,0,1,0,deleted functionsnaturalorder removes a duplication of the natural order comparatorresolves #6816 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6817?srcpr&elh1) report> merging [#6817](https://codecovio/gh/reactivex/rxjava/pull/6817?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/9e2fa63aa044b67d28de351aee32685e4eaa8c2d?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6817/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6817?srcpr&eltree)```diff@@ coverage diff @@## 3x #6817 +/- ##+ coverage 9823% 9823% + (-002%)` | `36 (-1)` | || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6817/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `551 (ø)` | :arrow_down: || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6817/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9316% (-257%)` | `2% (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6817/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb3j0zwrkb2lulmphdme) | `927% (-219%)` | `2% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6817/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgcm9tsxrlcmfibguuamf2yq) | `9518% (-107%)` | `5% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6817/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9375% (-105%)` | `2% (ø)` | || [3/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6817/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvqdwjsaxnolmphdme) | `9753% (-099%)` | `16% (-1%)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6817/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9644% (-098%)` | `6% (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6817/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrou2luz2xllmphdme) | `9905% (-095%)` | `2% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6817/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbjdgvyywjszuzsb3dhymxllmphdme) | `9583% (-084%)` | `2% (ø)` | || and [16 more](https://codecovio/gh/reactivex/rxjava/pull/6817/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6817?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6817?srcpr&elfooter) last update [9e2fa63f0b1bc3](https://codecovio/gh/reactivex/rxjava/pull/6817?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6825.0,6826,1,0,0,0,0,1,1,1,3x: fix flowableflatmap not canceling the inner sources on outer error the outer `onerror` did not cancel the inner sources the `observable` variant works correctly but both received an unit test to verify the behavior2x will be fixed in a separate prrelated #6825 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6826?srcpr&elh1) report> merging [#6826](https://codecovio/gh/reactivex/rxjava/pull/6826?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/84677c56097c5cc3d1880165e092925d794e3e42?srcpr&eldesc) will **decrease** coverage by ` the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6826/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6826?srcpr&eltree)```diff@@ coverage diff @@## 3x #6826 +/- ##- coverage 9827% 9826% -001% - complexity 6378 6383 +5 files 715 715 lines 46482 46485 +3 branches 6371 6373 +2 hits 45678 45678 - misses 285 287 +2 - partials 519 520 +1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6826?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [3/internal/operators/flowable/flowableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwlmphdme) | `9008% (+008%)` | `4 (ø)` | :arrow_down: || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `899% (-826%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `838% (-634%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8968% (-318%)` | `2% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9302% (-117%)` | `2% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9829% (-086%)` | `2% (ø)` | || [/operators/observable/observablecombinelatestjava](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq29tymluzuxhdgvzdc5qyxzh) | `9617% (-064%)` | `6% (ø)` | || [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcc5qyxzh) | `8996% (-034%)` | `3% (ø)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9741% (ø)` | `6% (ø)` | :arrow_down: || [a3/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvszxbsyxkuamf2yq) | `9281% (+082%)` | `19% (ø)` | :arrow_down: || and [10 more](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6826?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6826?srcpr&elfooter) last update [84677c5b74203d](https://codecovio/gh/reactivex/rxjava/pull/6826?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6825.0,6827,1,0,0,0,0,1,1,1,2x: fix flowableflatmap not canceling the inner sources on outer error the outer `onerror` did not cancel the inner sources the `observable` variant works correctly but both received an unit test to verify the behaviorfixes: #6825 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6827?srcpr&elh1) report> merging [#6827](https://codecovio/gh/reactivex/rxjava/pull/6827?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/ea2c79654accfdfaef580389a12086a1dfacc3eb?srcpr&eldesc) will **increase** coverage by `005%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6827/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6827?srcpr&eltree)```diff@@ coverage diff @@## 2x #6827 +/- ##+ coverage 9824% 9829% +005% - complexity 6348 6350 +2 files 677 677 lines 45532 45535 +3 branches 6334 6336 +2 + hits 44733 44759 +26 + misses 253 244 -9 + partials 546 532 -14```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6827?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [x/internal/operators/flowable/flowableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6827/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcc5qyxzh) | `8955% (-045%)` | `4 (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6827/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `8974% (-77%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6827/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8692% (-262%)` | `2% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6827/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9625% (-161%)` | `5% (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6827/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0afnpbmdszs5qyxzh) | `9906% (-094%)` | `2% (ø)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6827/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `949% (-047%)` | `3% (ø)` | || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6827/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `9709% (ø)` | `6% (ø)` | :arrow_down: || [main/java/io/reactivex/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/pull/6827/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvumvwbgf5u3viamvjdc5qyxzh) | `9751% (+041%)` | `50% (ø)` | :arrow_down: || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6827/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `100% (+075%)` | `3% (ø)` | :arrow_down: || and [14 more](https://codecovio/gh/reactivex/rxjava/pull/6827/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6827?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6827?srcpr&elfooter) last update [ea2c796c3caffb](https://codecovio/gh/reactivex/rxjava/pull/6827?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6828.0,6837,1,0,0,0,0,1,1,1,3x: remove a pointless observableconcatmapiterable overload remove the `concatmapiterable(function int)` overload as there is no buffering involved with the operatorresolves #6828
682.0,6838,1,0,0,1,0,1,1,1,3x: rename to combinelatestarraydelayerror the operator missed a rename with 2x to match the `combinelatestarray` variantresolves #6820 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6838?srcpr&elh1) report> merging [#6838](https://codecovio/gh/reactivex/rxjava/pull/6838?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/c67263fffe26a0c4970fd34789766fb18a7411a8?srcpr&eldesc) will **increase** coverage by `006%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6838/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6838?srcpr&eltree)```diff@@ coverage diff @@## 3x #6838 +/- ##+ coverage 9824% 9831% +006% - complexity 6376 6382 +6 files 715 715 lines 46532 46532 branches 6388 6388 + hits 45715 45746 +31 + misses 293 275 -18 + partials 524 511 -13```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6838?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6838/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `576 (ø)` | :arrow_down: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6838/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `552 (ø)` | :arrow_down: || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6838/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `9357% (-459%)` | `2% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6838/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93lmphdme) | `9818% (-182%)` | `3% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6838/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9594% (-136%)` | `2% (ø)` | || [ava3/internal/operators/maybe/maybemergearrayjava](https://codecovio/gh/reactivex/rxjava/pull/6838/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvnzxjnzufycmf5lmphdme) | `9604% (-113%)` | `6% (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6838/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrou2luz2xllmphdme) | `9905% (-095%)` | `2% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6838/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9743% (-086%)` | `2% (ø)` | || [/operators/maybe/maybeflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6838/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `959% (-082%)` | `2% (ø)` | || [/io/reactivex/rxjava3/subjects/unicastsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/6838/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zdwjqzwn0cy9vbmljyxn0u3viamvjdc5qyxzh) | `9803% (-066%)` | `61% (-1%)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6838/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6838?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6838?srcpr&elfooter) last update [c67263f3164f90](https://codecovio/gh/reactivex/rxjava/pull/6838?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
683.0,6839,0,0,0,0,0,1,0,0,3x: enable javac parameter saving in class files related #6832 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6839?srcpr&elh1) report> merging [#6839](https://codecovio/gh/reactivex/rxjava/pull/6839?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/c67263fffe26a0c4970fd34789766fb18a7411a8?srcpr&eldesc) will **decrease** coverage by `004%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6839/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6839?srcpr&eltree)```diff@@ coverage diff @@## 3x #6839 +/- ##- coverage 9824% 982% -005% - complexity 6376 6378 +2 files 715 715 lines 46532 46532 branches 6388 6388 - hits 45715 45695 -20 - misses 293 310 +17 - partials 524 527 +3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6839?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `7948% (-1881%)` | `2% (ø)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `899% (-826%)` | `2% (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxszwr1y2vgdwxslmphdme) | `9108% (-397%)` | `2% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9244% (-291%)` | `2% (ø)` | || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9655% (-247%)` | `50% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbjdgvyywjszuzsb3dhymxllmphdme) | `95% (-167%)` | `2% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9594% (-136%)` | `2% (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb3j0zwrkb2lulmphdme) | `9489% (-073%)` | `2% (ø)` | || [ternal/operators/observable/observablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlr3jvdxbces5qyxzh) | `9508% (-055%)` | `2% (ø)` | || [/reactivex/rxjava3/processors/replayprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl1jlcgxhevbyb2nlc3nvci5qyxzh) | `9738% (-041%)` | `52% (ø)` | || and [11 more](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6839?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6839?srcpr&elfooter) last update [c67263f74cd343](https://codecovio/gh/reactivex/rxjava/pull/6839?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
676.0,6840,1,0,1,1,0,1,1,0,3x: add nullability annotations to type arguments annotate type argument use with `@nonnull`resolves #6766 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6840?srcpr&elh1) report> merging [#6840](https://codecovio/gh/reactivex/rxjava/pull/6840?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/04800ae75fa95dfb0e4c6f49c9318add95698eb7?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6840/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6840?srcpr&eltree)```diff@@ coverage diff @@## 3x #6840 +/- ##- coverage 983% 9828% -003% + complexity 6380 6379 -1 files 715 715 lines 46529 46529 branches 6388 6388 - hits 45741 45729 -12 - misses 280 284 +4 - partials 508 516 +8```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6840?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [o/reactivex/rxjava3/processors/asyncprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6840/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0fzew5juhjvy2vzc29ylmphdme) | `9895% (ø)` | `45 (ø)` | :arrow_down: || [va/io/reactivex/rxjava3/plugins/rxjavapluginsjava](https://codecovio/gh/reactivex/rxjava/pull/6840/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wbhvnaw5zl1j4smf2yvbsdwdpbnmuamf2yq) | `100% (ø)` | `146 (ø)` | :arrow_down: || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6840/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `179 (ø)` | :arrow_down: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6840/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `120 (ø)` | :arrow_down: || [reactivex/rxjava3/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6840/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl1b1ymxpc2hqcm9jzxnzb3iuamf2yq) | `100% (ø)` | `42 (ø)` | :arrow_down: || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6840/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9901% (+246%)` | `50 (ø)` | :arrow_down: || [/reactivex/rxjava3/processors/replayprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6840/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl1jlcgxhevbyb2nlc3nvci5qyxzh) | `9779% (ø)` | `52 (ø)` | :arrow_down: || [reactivex/rxjava3/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6840/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl1vuawnhc3rqcm9jzxnzb3iuamf2yq) | `100% (ø)` | `66 (ø)` | :arrow_down: || [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6840/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `576 (ø)` | :arrow_down: || [activex/rxjava3/processors/multicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6840/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl011bhrpy2fzdfbyb2nlc3nvci5qyxzh) | `9868% (+043%)` | `84 (+1)` | :arrow_up: || and [24 more](https://codecovio/gh/reactivex/rxjava/pull/6840/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6840?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6840?srcpr&elfooter) last update [04800ae7b9fa31](https://codecovio/gh/reactivex/rxjava/pull/6840?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6819.0,6843,1,0,0,0,0,1,1,0,"3x: improve wording of operators - reword sentences with ""modifies"" and ""instructs""- reword ""the source x"" to ""the current x""- reword a couple of other operator sentencesrelated #6819 resolves #6821 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6843?srcpr&elh1) report> merging [#6843](https://codecovio/gh/reactivex/rxjava/pull/6843?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/fb6dab6847d858b22fe6a36558cf3b62dc10627d?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6843/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6843?srcpr&eltree)```diff@@ coverage diff @@## 3x #6843 +/- ##+ coverage 9825% 9828% +002% - complexity 6380 6381 +1 files 715 715 lines 46529 46529 branches 6388 6388 + hits 45717 45730 +13 + misses 293 286 -7 + partials 519 513 -6```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6843?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `576 (ø)` | :arrow_down: || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `179 (ø)` | :arrow_down: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `120 (ø)` | :arrow_down: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `151 (ø)` | :arrow_down: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `551 (ø)` | :arrow_down: || [java3/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvrnv0dxjlu2luz2xlt2jzzxj2zxiuamf2yq) | `9433% (-378%)` | `24% (-1%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8968% (-159%)` | `2% (ø)` | || [3/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvhcm91cej5lmphdme) | `9559% (-126%)` | `3% (ø)` | || [ivex/rxjava3/subscribers/serializedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zdwjzy3jpymvycy9tzxjpywxpemvku3vic2nyawjlci5qyxzh) | `9886% (-114%)` | `26% (-1%)` | || [ava3/internal/operators/maybe/maybemergearrayjava](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvnzxjnzufycmf5lmphdme) | `9604% (-113%)` | `6% (ø)` | || and [16 more](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6843?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6843?srcpr&elfooter) last update [fb6dab6e7f8c6f](https://codecovio/gh/reactivex/rxjava/pull/6843?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||"
682.0,6843,1,0,0,0,0,1,1,0,"3x: improve wording of operators - reword sentences with ""modifies"" and ""instructs""- reword ""the source x"" to ""the current x""- reword a couple of other operator sentencesrelated #6819 resolves #6821 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6843?srcpr&elh1) report> merging [#6843](https://codecovio/gh/reactivex/rxjava/pull/6843?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/fb6dab6847d858b22fe6a36558cf3b62dc10627d?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6843/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6843?srcpr&eltree)```diff@@ coverage diff @@## 3x #6843 +/- ##+ coverage 9825% 9828% +002% - complexity 6380 6381 +1 files 715 715 lines 46529 46529 branches 6388 6388 + hits 45717 45730 +13 + misses 293 286 -7 + partials 519 513 -6```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6843?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `576 (ø)` | :arrow_down: || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `179 (ø)` | :arrow_down: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `120 (ø)` | :arrow_down: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `151 (ø)` | :arrow_down: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `551 (ø)` | :arrow_down: || [java3/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvrnv0dxjlu2luz2xlt2jzzxj2zxiuamf2yq) | `9433% (-378%)` | `24% (-1%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8968% (-159%)` | `2% (ø)` | || [3/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvhcm91cej5lmphdme) | `9559% (-126%)` | `3% (ø)` | || [ivex/rxjava3/subscribers/serializedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zdwjzy3jpymvycy9tzxjpywxpemvku3vic2nyawjlci5qyxzh) | `9886% (-114%)` | `26% (-1%)` | || [ava3/internal/operators/maybe/maybemergearrayjava](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvnzxjnzufycmf5lmphdme) | `9604% (-113%)` | `6% (ø)` | || and [16 more](https://codecovio/gh/reactivex/rxjava/pull/6843/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6843?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6843?srcpr&elfooter) last update [fb6dab6e7f8c6f](https://codecovio/gh/reactivex/rxjava/pull/6843?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||"
684.0,6844,1,0,0,0,0,1,1,0,3x: remove maybeonexceptionresumenext it was always very peculiar to let only checked exceptions resumedresolves #6842 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6844?srcpr&elh1) report> merging [#6844](https://codecovio/gh/reactivex/rxjava/pull/6844?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/9ed54168db22da80c5c75495ab3dde9a64faa06d?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6844/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6844?srcpr&eltree)```diff@@ coverage diff @@## 3x #6844 +/- ##+ coverage 9824% 9828% +003% + complexity 6381 6376 -5 files 715 715 lines 46529 46522 -7 branches 6388 6387 -1 + hits 45714 45723 +9 + misses 292 285 -7 + partials 523 514 -9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6844?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6844/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `178 (-1)` | :arrow_down: || [va3/internal/operators/maybe/maybeonerrornextjava](https://codecovio/gh/reactivex/rxjava/pull/6844/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvpbkvycm9ytmv4dc5qyxzh) | `100% (ø)` | `2 (ø)` | :arrow_down: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6844/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvcbg9ja2luz1n1ynnjcmlizs5qyxzh) | `9302% (-466%)` | `10% (-1%)` | || [java3/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6844/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvrnv0dxjlu2luz2xlt2jzzxj2zxiuamf2yq) | `9433% (-378%)` | `24% (-1%)` | || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6844/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9556% (-345%)` | `49% (-1%)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6844/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93lmphdme) | `9818% (-182%)` | `3% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6844/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9418% (-117%)` | `2% (ø)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6844/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrotwf5ymuuamf2yq) | `9909% (-091%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6844/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8968% (-08%)` | `2% (ø)` | || [ternal/operators/observable/observablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6844/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlr3jvdxbces5qyxzh) | `9508% (-055%)` | `2% (ø)` | || and [16 more](https://codecovio/gh/reactivex/rxjava/pull/6844/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6844?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6844?srcpr&elfooter) last update [9ed5416a09fa7b](https://codecovio/gh/reactivex/rxjava/pull/6844?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
683.0,6847,1,0,0,0,0,1,1,0,3x: simplify @return sentences in flowable javadocs simplify the wording of `@return` in javadocsresolves #6834 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6847?srcpr&elh1) report> merging [#6847](https://codecovio/gh/reactivex/rxjava/pull/6847?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/9fec1c729c096ba7d7b4613efc310e3a6bd7572d?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6847/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6847?srcpr&eltree)```diff@@ coverage diff @@## 3x #6847 +/- ##+ coverage 9825% 9826% +001% + complexity 6380 6377 -3 files 715 715 lines 46522 46522 branches 6387 6387 + hits 45711 45716 +5 - misses 287 291 +4 + partials 524 515 -9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6847?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `576 (ø)` | :arrow_down: || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `178 (ø)` | :arrow_down: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `120 (ø)` | :arrow_down: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `151 (ø)` | :arrow_down: || [o/reactivex/rxjava3/parallel/parallelflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wyxjhbgxlbc9qyxjhbgxlbezsb3dhymxllmphdme) | `100% (ø)` | `57 (ø)` | :arrow_down: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `551 (ø)` | :arrow_down: || [java3/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvrnv0dxjlu2luz2xlt2jzzxj2zxiuamf2yq) | `9433% (-378%)` | `24% (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `8943% (-212%)` | `2% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34% (-1%)` | || [ava3/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/pull/6847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb2lulmphdme) | `9204% (-114%)` | `3% (ø)` | || and [21 more](https://codecovio/gh/reactivex/rxjava/pull/6847/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6847?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6847?srcpr&elfooter) last update [9fec1c7bab7cf6](https://codecovio/gh/reactivex/rxjava/pull/6847?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6832.0,6853,1,0,0,0,0,1,1,0,3x: fix method argument naming across types make method argument naming consistent between the base reactive classes adjust some of the naming for allin addition the null-check was missing from `blockingmostrecent`resolves #6832 the utility program has to be run manually to list the inconsistencies the remaining inconsistency is due to `merge` because its argument is `sources` for `flowable`/`observable` but `source` for `single`/`maybe` nested # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6853?srcpr&elh1) report> merging [#6853](https://codecovio/gh/reactivex/rxjava/pull/6853?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/021d07b4c602a8c86605f1e218aa81466b5f36b8?srcpr&eldesc) will **decrease** coverage by `013%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6853/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6853?srcpr&eltree)```diff@@ coverage diff @@## 3x #6853 +/- ##- coverage 9835% 9822% -014% + complexity 6379 6378 -1 files 715 715 lines 46522 46524 +2 branches 6387 6387 - hits 45758 45697 -61 - misses 268 298 +30 - partials 496 529 +33```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6853?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `576 (ø)` | :arrow_down: || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `178 (ø)` | :arrow_down: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `120 (ø)` | :arrow_down: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `151 (ø)` | :arrow_down: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `551 (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `8732% (-916%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8809% (-874%)` | `2% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9145% (-77%)` | `2% (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvcbg9ja2luz1n1ynnjcmlizs5qyxzh) | `9302% (-466%)` | `10% (-1%)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `9357% (-459%)` | `2% (ø)` | || and [17 more](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6853?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6853?srcpr&elfooter) last update [021d07b4ed4635](https://codecovio/gh/reactivex/rxjava/pull/6853?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
685.0,6856,1,0,0,0,0,0,1,0,rename singleequals to singlesequenceequal renamed singleequals to singlesequenceequal and renamed argument names for consistent namingresolves #6854 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6856?srcpr&elh1) report> merging [#6856](https://codecovio/gh/reactivex/rxjava/pull/6856?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/0c84f4017f576bd250e4408d8410f6647507027c?srcpr&eldesc) will **decrease** coverage by `007%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6856/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6856?srcpr&eltree)```diff@@ coverage diff @@## 3x #6856 +/- ##- coverage 9829% 9822% -008% + complexity 6381 6379 -2 files 715 715 lines 46524 46524 branches 6387 6387 - hits 45731 45697 -34 - misses 281 297 +16 - partials 512 530 +18```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6856?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6856/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `151 (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6856/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `838% (-1127%)` | `2% (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6856/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvcbg9ja2luz1n1ynnjcmlizs5qyxzh) | `9302% (-466%)` | `10% (-1%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6856/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9126% (-397%)` | `2% (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6856/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxszwr1y2vgdwxslmphdme) | `9108% (-397%)` | `2% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6856/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34% (-1%)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6856/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvtd2l0y2hnyxauamf2yq) | `9439% (-141%)` | `3% (ø)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6856/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9644% (-13%)` | `6% (ø)` | || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6856/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9802% (-099%)` | `49% (-1%)` | || [rxjava3/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6856/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0v4zwn1dg9yu2nozwr1bgvylmphdme) | `9589% (-092%)` | `10% (ø)` | || and [11 more](https://codecovio/gh/reactivex/rxjava/pull/6856/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6856?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6856?srcpr&elfooter) last update [0c84f4012ce751](https://codecovio/gh/reactivex/rxjava/pull/6856?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6852.0,6857,1,0,0,1,0,0,1,0,3x: [wiki] improve operator-matrix with links and notes update the `operatormatrixgenerator` to add anchors and links to notes about why operators are not present in one or another classhttps://githubcom/reactivex/rxjava/wiki/operator-matrixsome operators are missing and will be added as part of #6852resolves #6855 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6857?srcpr&elh1) report> merging [#6857](https://codecovio/gh/reactivex/rxjava/pull/6857?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/0c84f4017f576bd250e4408d8410f6647507027c?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6857/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6857?srcpr&eltree)```diff@@ coverage diff @@## 3x #6857 +/- ##- coverage 9829% 9825% -004% + complexity 6381 6380 -1 files 715 715 lines 46524 46524 branches 6387 6387 - hits 45731 45713 -18 - misses 281 293 +12 - partials 512 518 +6```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6857?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `899% (-367%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `901% (-261%)` | `2% (ø)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% (-186%)` | `39% (-1%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9365% (-159%)` | `2% (ø)` | || [ava3/internal/operators/maybe/maybemergearrayjava](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvnzxjnzufycmf5lmphdme) | `9604% (-113%)` | `6% (ø)` | || [rxjava3/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0v4zwn1dg9yu2nozwr1bgvylmphdme) | `9589% (-092%)` | `10% (ø)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvt2jzzxj2ywjszunvbmnhde1hcenvbxbszxrhymxllmphdme) | `9918% (-082%)` | `3% (ø)` | || [3/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvhcm91cej5lmphdme) | `9559% (-063%)` | `3% (ø)` | || [a/io/reactivex/rxjava3/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zdwjqzwn0cy9szxbsyxltdwjqzwn0lmphdme) | `9714% (-041%)` | `50% (ø)` | || [ava3/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb2lulmphdme) | `9166% (-038%)` | `3% (ø)` | || and [9 more](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6857?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6857?srcpr&elfooter) last update [0c84f40a620eb2](https://codecovio/gh/reactivex/rxjava/pull/6857?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6855.0,6857,1,0,0,1,0,0,1,0,3x: [wiki] improve operator-matrix with links and notes update the `operatormatrixgenerator` to add anchors and links to notes about why operators are not present in one or another classhttps://githubcom/reactivex/rxjava/wiki/operator-matrixsome operators are missing and will be added as part of #6852resolves #6855 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6857?srcpr&elh1) report> merging [#6857](https://codecovio/gh/reactivex/rxjava/pull/6857?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/0c84f4017f576bd250e4408d8410f6647507027c?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6857/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6857?srcpr&eltree)```diff@@ coverage diff @@## 3x #6857 +/- ##- coverage 9829% 9825% -004% + complexity 6381 6380 -1 files 715 715 lines 46524 46524 branches 6387 6387 - hits 45731 45713 -18 - misses 281 293 +12 - partials 512 518 +6```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6857?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `899% (-367%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `901% (-261%)` | `2% (ø)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% (-186%)` | `39% (-1%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9365% (-159%)` | `2% (ø)` | || [ava3/internal/operators/maybe/maybemergearrayjava](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvnzxjnzufycmf5lmphdme) | `9604% (-113%)` | `6% (ø)` | || [rxjava3/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0v4zwn1dg9yu2nozwr1bgvylmphdme) | `9589% (-092%)` | `10% (ø)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvt2jzzxj2ywjszunvbmnhde1hcenvbxbszxrhymxllmphdme) | `9918% (-082%)` | `3% (ø)` | || [3/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvhcm91cej5lmphdme) | `9559% (-063%)` | `3% (ø)` | || [a/io/reactivex/rxjava3/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zdwjqzwn0cy9szxbsyxltdwjqzwn0lmphdme) | `9714% (-041%)` | `50% (ø)` | || [ava3/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb2lulmphdme) | `9166% (-038%)` | `3% (ø)` | || and [9 more](https://codecovio/gh/reactivex/rxjava/pull/6857/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6857?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6857?srcpr&elfooter) last update [0c84f40a620eb2](https://codecovio/gh/reactivex/rxjava/pull/6857?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
682.0,6860,1,0,0,0,0,1,1,0,3x: add last missing throws tag to javadocs added the last missing `@throws` tag to methods and one missing `@nonnull` annotationi included a small program that will list javadocs without `@throws` for future useresolves #6829 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6860?srcpr&elh1) report> merging [#6860](https://codecovio/gh/reactivex/rxjava/pull/6860?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/e8d59c52c5c5391a668f33c6128f27766d8d79b3?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6860/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6860?srcpr&eltree)```diff@@ coverage diff @@## 3x #6860 +/- ##+ coverage 9824% 9828% +003% - complexity 6379 6381 +2 files 715 715 lines 46524 46524 branches 6387 6387 + hits 45709 45727 +18 + misses 294 286 -8 + partials 521 511 -10```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6860?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6860/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `151 (ø)` | :arrow_down: || [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6860/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `576 (ø)` | :arrow_down: || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6860/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `9357% (-459%)` | `2% (ø)` | || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6860/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9655% (-247%)` | `50% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6860/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9427% (-209%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6860/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8809% (-159%)` | `2% (ø)` | || [rxjava3/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6860/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0v4zwn1dg9yu2nozwr1bgvylmphdme) | `9589% (-092%)` | `10% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6860/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbjdgvyywjszuzsb3dhymxllmphdme) | `9583% (-084%)` | `2% (ø)` | || [/operators/maybe/maybeflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6860/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `959% (-082%)` | `2% (ø)` | || [3/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6860/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvhcm91cej5lmphdme) | `9622% (+031%)` | `3% (ø)` | :arrow_down: || and [12 more](https://codecovio/gh/reactivex/rxjava/pull/6860/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6860?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6860?srcpr&elfooter) last update [e8d59c59ae6e21](https://codecovio/gh/reactivex/rxjava/pull/6860?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6852.0,6862,1,0,0,0,0,0,1,0,3x: add maybe/single/completable blockingsubscribe add the missing `blockingsubscribe` methods to `maybe` `single` and `completable` for symmetry with `flowable` and `observable`usually wed like to avoid blocking but now that project loom (preview) transparently turns latch-based awaiting into suspension inside virtual threads they will act as free interop operators for exiting the reactive world into the continuation worldrelated: #6852marbles:#### maybe![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeblockingsubscribepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeblockingsubscribecpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeblockingsubscribeccpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeblockingsubscribeccapng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeblockingsubscribeopng)#### single![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleblockingsubscribepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleblockingsubscribecpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleblockingsubscribeccpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleblockingsubscribeopng)#### completable![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableblockingsubscribepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableblockingsubscribeapng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableblockingsubscribeacpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableblockingsubscribeopng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6862?srcpr&elh1) report> merging [#6862](https://codecovio/gh/reactivex/rxjava/pull/6862?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/49f1a6d0f0540d6b98e2c11d70ad54ff0c4bc18f?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6862/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6862?srcpr&eltree)```diff@@ coverage diff @@## 3x #6862 +/- ##- coverage 9828% 9824% -004% - complexity 6380 6413 +33 files 715 716 +1 lines 46524 46664 +140 branches 6387 6396 +9 + hits 45726 45845 +119 - misses 282 296 +14 - partials 516 523 +7```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6862?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ava3/internal/observers/blockingmultiobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvqmxvy2tpbmdndwx0au9ic2vydmvylmphdme) | `100% (ø)` | `23 (+4)` | :arrow_up: || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `183 (+5)` | :arrow_up: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `124 (+4)` | :arrow_up: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `155 (+4)` | :arrow_up: || [nal/observers/blockingdisposablemultiobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvqmxvy2tpbmdeaxnwb3nhymxltxvsdglpynnlcnzlci5qyxzh) | `100% (ø)` | `20 (?)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8888% (-635%)` | `2% (ø)` | || [java3/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvrnv0dxjlu2luz2xlt2jzzxj2zxiuamf2yq) | `9433% (-378%)` | `24% (-1%)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9487% (-342%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `927% (-261%)` | `2% (ø)` | || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9655% (-247%)` | `50% (ø)` | || and [21 more](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6862?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6862?srcpr&elfooter) last update [49f1a6d4ae6b1b](https://codecovio/gh/reactivex/rxjava/pull/6862?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6863.0,6864,1,0,0,1,0,1,1,0,adding delayerror to maybedelay resolves #6863 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6864?srcpr&elh1) report> merging [#6864](https://codecovio/gh/reactivex/rxjava/pull/6864?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/49f1a6d0f0540d6b98e2c11d70ad54ff0c4bc18f?srcpr&eldesc) will **decrease** coverage by ` the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6864/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6864?srcpr&eltree)```diff@@ coverage diff @@## 3x #6864 +/- ##- coverage 9828% 9827% -001% - complexity 6380 6382 +2 files 715 715 lines 46524 46528 +4 branches 6387 6388 +1 + hits 45726 45727 +1 - misses 282 286 +4 + partials 516 515 -1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6864?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [x/rxjava3/internal/operators/maybe/maybedelayjava](https://codecovio/gh/reactivex/rxjava/pull/6864/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvezwxhes5qyxzh) | `100% (ø)` | `2 (ø)` | :arrow_down: || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6864/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `180 (+2)` | :arrow_up: || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6864/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxszwr1y2vgdwxslmphdme) | `9108% (-397%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6864/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `927% (-261%)` | `2% (ø)` | || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6864/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9655% (-247%)` | `50% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6864/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34% (-1%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6864/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9365% (-159%)` | `2% (ø)` | || [ava3/internal/operators/maybe/maybemergearrayjava](https://codecovio/gh/reactivex/rxjava/pull/6864/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvnzxjnzufycmf5lmphdme) | `9604% (-113%)` | `6% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6864/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgcm9tsxrlcmfibguuamf2yq) | `9518% (-107%)` | `5% (ø)` | || [rxjava3/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6864/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0v4zwn1dg9yu2nozwr1bgvylmphdme) | `9589% (-092%)` | `10% (ø)` | || and [13 more](https://codecovio/gh/reactivex/rxjava/pull/6864/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6864?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6864?srcpr&elfooter) last update [49f1a6d1bc5691](https://codecovio/gh/reactivex/rxjava/pull/6864?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5806.0,6867,1,0,0,0,0,0,1,0,3x: add onerrorcomplete to flowable observable and single add the `onerrorcomplete()` and `onerrorcomplete(predicate)` operators to the remaining base classesalso created the missing marble for `maybeonerrorcomplete` + 1related #6852 #5806 ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableonerrorcompletepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableonerrorcompletefpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observableonerrorcompletepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observableonerrorcompletefpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleonerrorcompletepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleonerrorcompletefpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeonerrorcompletepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeonerrorcompletefpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6867?srcpr&elh1) report> merging [#6867](https://codecovio/gh/reactivex/rxjava/pull/6867?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/13473da61366945f49aed5a29729841836abf2ab?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6867/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6867?srcpr&eltree)```diff@@ coverage diff @@## 3x #6867 +/- ##- coverage 9824% 9821% -003% - complexity 6417 6430 +13 files 716 719 +3 lines 46668 46744 +76 branches 6397 6401 +4 + hits 45847 45911 +64 - misses 295 309 +14 + partials 526 524 -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6867?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `185 (ø)` | :arrow_down: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `157 (+2)` | :arrow_up: || [al/operators/flowable/flowableonerrorcompletejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvpbkvycm9yq29tcgxldguuamf2yq) | `100% (ø)` | `2 (?)` | || [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `578 (+2)` | :arrow_up: || [perators/observable/observableonerrorcompletejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlt25fcnjvcknvbxbszxrllmphdme) | `100% (ø)` | `2 (?)` | || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `553 (+2)` | :arrow_up: || [internal/operators/maybe/maybeonerrorcompletejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvpbkvycm9yq29tcgxldguuamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || [ternal/operators/single/singleonerrorcompletejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszu9urxjyb3jdb21wbgv0zs5qyxzh) | `100% (ø)` | `2 (?)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `7948% (-2052%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `838% (-1198%)` | `2% (ø)` | || and [26 more](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6867?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6867?srcpr&elfooter) last update [13473da58dbf8a](https://codecovio/gh/reactivex/rxjava/pull/6867?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6852.0,6867,1,0,0,0,0,0,1,0,3x: add onerrorcomplete to flowable observable and single add the `onerrorcomplete()` and `onerrorcomplete(predicate)` operators to the remaining base classesalso created the missing marble for `maybeonerrorcomplete` + 1related #6852 #5806 ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableonerrorcompletepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableonerrorcompletefpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observableonerrorcompletepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observableonerrorcompletefpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleonerrorcompletepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleonerrorcompletefpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeonerrorcompletepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeonerrorcompletefpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6867?srcpr&elh1) report> merging [#6867](https://codecovio/gh/reactivex/rxjava/pull/6867?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/13473da61366945f49aed5a29729841836abf2ab?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6867/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6867?srcpr&eltree)```diff@@ coverage diff @@## 3x #6867 +/- ##- coverage 9824% 9821% -003% - complexity 6417 6430 +13 files 716 719 +3 lines 46668 46744 +76 branches 6397 6401 +4 + hits 45847 45911 +64 - misses 295 309 +14 + partials 526 524 -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6867?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `185 (ø)` | :arrow_down: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `157 (+2)` | :arrow_up: || [al/operators/flowable/flowableonerrorcompletejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvpbkvycm9yq29tcgxldguuamf2yq) | `100% (ø)` | `2 (?)` | || [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `578 (+2)` | :arrow_up: || [perators/observable/observableonerrorcompletejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlt25fcnjvcknvbxbszxrllmphdme) | `100% (ø)` | `2 (?)` | || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `553 (+2)` | :arrow_up: || [internal/operators/maybe/maybeonerrorcompletejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvpbkvycm9yq29tcgxldguuamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || [ternal/operators/single/singleonerrorcompletejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszu9urxjyb3jdb21wbgv0zs5qyxzh) | `100% (ø)` | `2 (?)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `7948% (-2052%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `838% (-1198%)` | `2% (ø)` | || and [26 more](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6867?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6867?srcpr&elfooter) last update [13473da58dbf8a](https://codecovio/gh/reactivex/rxjava/pull/6867?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5806.0,6868,1,0,0,0,0,1,1,1,3x: add completableonerrorresumewith this pr adds the missing `completableonerrorresumewith` present in the rest of the base classesalso marbles for `maybeonerrorresumenext` and `maybeonerrorresumewith` have been updatedrelated #6852 #5806![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableonerrorresumewithpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeonerrorresumenextpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeonerrorresumewithpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6868?srcpr&elh1) report> merging [#6868](https://codecovio/gh/reactivex/rxjava/pull/6868?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/ad1840b1b591206e5eeb10c07b1b126fbbac3560?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6868/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6868?srcpr&eltree)```diff@@ coverage diff @@## 3x #6868 +/- ##+ coverage 9828% 9831% +002% - complexity 6429 6432 +3 files 719 719 lines 46744 46746 +2 branches 6401 6401 + hits 45944 45958 +14 + misses 283 278 -5 + partials 517 510 -7```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6868?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `185 (ø)` | :arrow_down: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `125 (+1)` | :arrow_up: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `838% (-1198%)` | `2% (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvcbg9ja2luz1n1ynnjcmlizs5qyxzh) | `9302% (-466%)` | `10% (-1%)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% (-186%)` | `39% (-1%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu3dpdgnotwfwlmphdme) | `9157% (-106%)` | `3% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9743% (-086%)` | `2% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbjdgvyywjszuzsb3dhymxllmphdme) | `9583% (-084%)` | `2% (ø)` | || [al/operators/observable/observablewindowtimedjava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93vgltzwquamf2yq) | `9612% (-065%)` | `4% (ø)` | || [3/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvhcm91cej5lmphdme) | `9559% (-063%)` | `3% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6868?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6868?srcpr&elfooter) last update [ad1840b0ad2a1e](https://codecovio/gh/reactivex/rxjava/pull/6868?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6852.0,6868,1,0,0,0,0,1,1,1,3x: add completableonerrorresumewith this pr adds the missing `completableonerrorresumewith` present in the rest of the base classesalso marbles for `maybeonerrorresumenext` and `maybeonerrorresumewith` have been updatedrelated #6852 #5806![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableonerrorresumewithpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeonerrorresumenextpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeonerrorresumewithpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6868?srcpr&elh1) report> merging [#6868](https://codecovio/gh/reactivex/rxjava/pull/6868?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/ad1840b1b591206e5eeb10c07b1b126fbbac3560?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6868/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6868?srcpr&eltree)```diff@@ coverage diff @@## 3x #6868 +/- ##+ coverage 9828% 9831% +002% - complexity 6429 6432 +3 files 719 719 lines 46744 46746 +2 branches 6401 6401 + hits 45944 45958 +14 + misses 283 278 -5 + partials 517 510 -7```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6868?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `185 (ø)` | :arrow_down: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `125 (+1)` | :arrow_up: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `838% (-1198%)` | `2% (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvcbg9ja2luz1n1ynnjcmlizs5qyxzh) | `9302% (-466%)` | `10% (-1%)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% (-186%)` | `39% (-1%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu3dpdgnotwfwlmphdme) | `9157% (-106%)` | `3% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9743% (-086%)` | `2% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbjdgvyywjszuzsb3dhymxllmphdme) | `9583% (-084%)` | `2% (ø)` | || [al/operators/observable/observablewindowtimedjava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93vgltzwquamf2yq) | `9612% (-065%)` | `4% (ø)` | || [3/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvhcm91cej5lmphdme) | `9559% (-063%)` | `3% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6868?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6868?srcpr&elfooter) last update [ad1840b0ad2a1e](https://codecovio/gh/reactivex/rxjava/pull/6868?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5806.0,6869,1,0,0,0,0,1,1,0,3x: add single/completable retryuntil + marbles `retryuntil` was missing from `single` and `completable`added marble for `maybe` as wellrelated #6852 #5806![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableretryuntilpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleretryuntilpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/mayberetryuntilpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&elh1) report> merging [#6869](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/320a675ec124cde872124d3bafd685e6a8998d0a?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6869/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&eltree)```diff@@ coverage diff @@## 3x #6869 +/- ##+ coverage 9825% 9829% +004% - complexity 6430 6433 +3 files 719 719 lines 46746 46750 +4 branches 6401 6401 + hits 45929 45953 +24 + misses 293 283 -10 + partials 524 514 -10```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `185 (ø)` | :arrow_down: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `126 (+1)` | :arrow_up: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `158 (+1)` | :arrow_up: || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9655% (-247%)` | `50% (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu3dpdgnotwfwlmphdme) | `9157% (-211%)` | `3% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxluhvibglzac5qyxzh) | `9729% (-181%)` | `16% (-1%)` | || [ternal/operators/flowable/flowablesubscribeonjava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvtdwjzy3jpymvpbi5qyxzh) | `9661% (-17%)` | `2% (ø)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvtd2l0y2hnyxauamf2yq) | `9439% (-141%)` | `3% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgcm9tsxrlcmfibguuamf2yq) | `9518% (-107%)` | `5% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9531% (-105%)` | `2% (ø)` | || and [13 more](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&elfooter) last update [320a675fab5b58](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6852.0,6869,1,0,0,0,0,1,1,0,3x: add single/completable retryuntil + marbles `retryuntil` was missing from `single` and `completable`added marble for `maybe` as wellrelated #6852 #5806![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableretryuntilpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleretryuntilpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/mayberetryuntilpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&elh1) report> merging [#6869](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/320a675ec124cde872124d3bafd685e6a8998d0a?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6869/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&eltree)```diff@@ coverage diff @@## 3x #6869 +/- ##+ coverage 9825% 9829% +004% - complexity 6430 6433 +3 files 719 719 lines 46746 46750 +4 branches 6401 6401 + hits 45929 45953 +24 + misses 293 283 -10 + partials 524 514 -10```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `185 (ø)` | :arrow_down: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `126 (+1)` | :arrow_up: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `158 (+1)` | :arrow_up: || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9655% (-247%)` | `50% (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu3dpdgnotwfwlmphdme) | `9157% (-211%)` | `3% (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxluhvibglzac5qyxzh) | `9729% (-181%)` | `16% (-1%)` | || [ternal/operators/flowable/flowablesubscribeonjava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvtdwjzy3jpymvpbi5qyxzh) | `9661% (-17%)` | `2% (ø)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvtd2l0y2hnyxauamf2yq) | `9439% (-141%)` | `3% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgcm9tsxrlcmfibguuamf2yq) | `9518% (-107%)` | `5% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9531% (-105%)` | `2% (ø)` | || and [13 more](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&elfooter) last update [320a675fab5b58](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6852.0,6870,1,0,0,0,0,0,1,0,3x: add maybe/single/completable switchonnext & switchonnextdelayerror add the missing `switchonnext` and `switchonnextdelayerror` operators which are essentially delegated to the respective `flowable::switchmapx` operators with identity mappingrelated #6852![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableswitchonnextpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableswitchonnextdelayerrorpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleswitchonnextpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleswitchonnextdelayerrorpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeswitchonnextpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeswitchonnextdelayerrorpng)
6852.0,6871,1,0,0,0,0,1,1,1,3x: add maybedematerialize add the `dematerialize` operator to `maybe` to be in sync with the other classesrelated #6852 ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedematerializepng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6871?srcpr&elh1) report> merging [#6871](https://codecovio/gh/reactivex/rxjava/pull/6871?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/53ba4352c447562ccbba507f4d4f5493a07ab889?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6871/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6871?srcpr&eltree)```diff@@ coverage diff @@## 3x #6871 +/- ##+ coverage 9827% 9829% +001% - complexity 6446 6447 +1 files 722 723 +1 lines 46783 46817 +34 branches 6401 6404 +3 + hits 45977 46019 +42 + misses 289 282 -7 + partials 517 516 -1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6871?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `160 (ø)` | :arrow_down: || [3/internal/operators/maybe/maybedematerializejava](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvezw1hdgvyawfsaxpllmphdme) | `100% (ø)` | `2 (?)` | || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `188 (+1)` | :arrow_up: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `9154% (-564%)` | `2% (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvcbg9ja2luz1n1ynnjcmlizs5qyxzh) | `9302% (-466%)` | `10% (-1%)` | || [ctivex/rxjava3/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc91dglsl1f1zxvlrhjhaw5izwxwzxiuamf2yq) | `9722% (-278%)` | `56% (-2%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34% (-1%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9594% (-136%)` | `2% (ø)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9611% (-13%)` | `6% (ø)` | || [ava3/internal/operators/maybe/maybemergearrayjava](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvnzxjnzufycmf5lmphdme) | `9604% (-113%)` | `6% (ø)` | || and [17 more](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6871?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6871?srcpr&elfooter) last update [53ba435f41fb2e](https://codecovio/gh/reactivex/rxjava/pull/6871?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6852.0,6873,1,0,0,1,0,1,1,1,3x: add many fromx operators + marbles add a cross section of `from` operators (![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) [`fromaction`](https://githubcom/reactivex/rxjava/wiki/operator-matrix#fromaction) `fromsingle`) :operator | f | o | m | s | c |-|-|-|-|-|-| `fromaction`|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng)|![absent](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_offpng) ([23](#notes-23)) |![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng)| `fromcompletable`|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng)|![absent](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_offpng) ([72](#notes-72)) |![absent](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_offpng) ([73](#notes-73)) | `frommaybe`|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)|![absent](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_offpng) ([73](#notes-73)) |![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng)| `fromobservable`|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)|![absent](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_offpng) ([73](#notes-73)) |![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng)|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng)| `frompublisher`|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng)|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng)|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng)|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng)| `fromrunnable`|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng)|![absent](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_offpng) ([23](#notes-23)) |![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng)| `fromsingle`|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)|![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng)|![absent](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_offpng) ([73](#notes-73)) |![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng)|related #6852 ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowablefromactionpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowablefromcompletablepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowablefrommaybepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowablefromobservablebufferpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowablefromobservablelatestpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowablefromobservabledroppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowablefromobservableerrorpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowablefromobservablemissingpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowablefromrunnablepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowablefromsinglepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observablefromactionpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observablefromcompletablepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observablefrommaybepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observablefromrunnablepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observablefromsinglepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybefrompublisherpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybefromobservablepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlefrommaybepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlefrommaybevpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6873?srcpr&elh1) report> merging [#6873](https://codecovio/gh/reactivex/rxjava/pull/6873?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/53ba4352c447562ccbba507f4d4f5493a07ab889?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `9658%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6873/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6873?srcpr&eltree)```diff@@ coverage diff @@## 3x #6873 +/- ##- coverage 9827% 9826% -002% - complexity 6446 6503 +57 files 722 731 +9 lines 46783 46968 +185 branches 6401 6420 +19 + hits 45977 46153 +176 - misses 289 298 +9 partials 517 517```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6873?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [xjava3/internal/operators/maybe/maybetosinglejava](https://codecovio/gh/reactivex/rxjava/pull/6873/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvub1npbmdszs5qyxzh) | `100% (ø)` | `3 (ø)` | :arrow_down: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6873/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `128 (ø)` | :arrow_down: || [internal/operators/maybe/maybefromcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6873/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvgcm9tq29tcgxldgfibguuamf2yq) | `100% (ø)` | `3 (ø)` | :arrow_down: || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6873/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `190 (+3)` | :arrow_up: || [operators/completable/completabletoobservablejava](https://codecovio/gh/reactivex/rxjava/pull/6873/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvub09ic2vydmfibguuamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || [l/operators/completable/completablefromactionjava](https://codecovio/gh/reactivex/rxjava/pull/6873/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvgcm9tqwn0aw9ulmphdme) | `100% (ø)` | `5 (+1)` | :arrow_up: || [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6873/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `588 (+10)` | :arrow_up: || [nternal/operators/flowable/flowablefromactionjava](https://codecovio/gh/reactivex/rxjava/pull/6873/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgcm9tqwn0aw9ulmphdme) | `100% (ø)` | `6 (?)` | || [nal/operators/flowable/flowablefromobservablejava](https://codecovio/gh/reactivex/rxjava/pull/6873/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgcm9tt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `2 (ø)` | :arrow_down: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6873/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `558 (+5)` | :arrow_up: || and [48 more](https://codecovio/gh/reactivex/rxjava/pull/6873/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6873?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6873?srcpr&elfooter) last update [53ba43555548f2](https://codecovio/gh/reactivex/rxjava/pull/6873?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6852.0,6874,1,0,0,0,0,0,1,0,3x: add timeinterval & timestamp to m/s add `timeinterval` and `timestamp` operators (4 overloads each) to `maybe` and `single`related #6852 ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybetimeintervalpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybetimeintervalspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybetimestamppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybetimestampspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletimeintervalpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletimeintervalspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletimestamppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletimestampspng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6874?srcpr&elh1) report> merging [#6874](https://codecovio/gh/reactivex/rxjava/pull/6874?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/26dacd72f1929c78d84da41ec80dc1ae3996c9f9?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6874/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6874?srcpr&eltree)```diff@@ coverage diff @@## 3x #6874 +/- ##- coverage 9827% 9826% -002% - complexity 6502 6523 +21 files 731 733 +2 lines 46968 47044 +76 branches 6420 6424 +4 + hits 46159 46226 +67 - misses 291 295 +4 - partials 518 523 +5```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6874?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6874/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `170 (+8)` | :arrow_up: || [/internal/operators/single/singletimeintervaljava](https://codecovio/gh/reactivex/rxjava/pull/6874/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszvrpbwvjbnrlcnzhbc5qyxzh) | `100% (ø)` | `2 (?)` | || [a3/internal/operators/maybe/maybetimeintervaljava](https://codecovio/gh/reactivex/rxjava/pull/6874/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvuaw1lsw50zxj2ywwuamf2yq) | `100% (ø)` | `2 (?)` | || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6874/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `198 (+8)` | :arrow_up: || [in/java/io/reactivex/rxjava3/schedulers/timedjava](https://codecovio/gh/reactivex/rxjava/pull/6874/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zy2hlzhvszxjzl1rpbwvklmphdme) | `100% (ø)` | `12 (-1)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6874/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `838% (-1057%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6874/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8809% (-556%)` | `2% (ø)` | || [java3/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6874/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvrnv0dxjlu2luz2xlt2jzzxj2zxiuamf2yq) | `9433% (-378%)` | `24% (-1%)` | || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6874/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9655% (-247%)` | `50% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6874/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34% (-1%)` | || and [25 more](https://codecovio/gh/reactivex/rxjava/pull/6874/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6874?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6874?srcpr&elfooter) last update [26dacd75f23b72](https://codecovio/gh/reactivex/rxjava/pull/6874?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6852.0,6875,1,0,0,0,0,0,1,0,3x: add maybe/completable tofuture add `tofuture` to `maybe` and `completable`related #6852 ![image](https://githubcom/reactivex/rxjava/wiki/images/rx-operators/maybetofuturepng)![image](https://githubcom/reactivex/rxjava/wiki/images/rx-operators/completabletofuturepng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6875?srcpr&elh1) report> merging [#6875](https://codecovio/gh/reactivex/rxjava/pull/6875?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/d5449b2fd63c73dea06fbbd5d584bab7b9cfde5d?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `7777%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6875/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6875?srcpr&eltree)```diff@@ coverage diff @@## 3x #6875 +/- ##+ coverage 9824% 9827% +002% - complexity 6523 6527 +4 files 733 733 lines 47044 47052 +8 branches 6424 6425 +1 + hits 46217 46238 +21 + misses 303 294 -9 + partials 524 520 -4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6875?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `588 (ø)` | :arrow_down: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `558 (ø)` | :arrow_down: || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `199 (+1)` | :arrow_up: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `129 (+1)` | :arrow_up: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `170 (ø)` | :arrow_down: || [xjava3/internal/observers/futuremultiobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvrnv0dxjltxvsdglpynnlcnzlci5qyxzh) | `9491% (ø)` | `26 (?)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8809% (-556%)` | `2% (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvcbg9ja2luz1n1ynnjcmlizs5qyxzh) | `9302% (-466%)` | `10% (-1%)` | || [java3/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl1ryyw1wb2xpbmvty2hlzhvszxiuamf2yq) | `961% (-26%)` | `6% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbjdgvyywjszuzsb3dhymxllmphdme) | `95% (-167%)` | `2% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6875/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6875?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6875?srcpr&elfooter) last update [d5449b23984932](https://codecovio/gh/reactivex/rxjava/pull/6875?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
580.0,6876,1,1,0,1,1,1,1,1,3x: add singleoftype add `oftype` to `single` already available to the other non-empty base typesrelated #6852 ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleoftypepng)in addition diagrams for `maybefilter` and `maybeoftype` have been updated:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybefilterpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeoftypepng)related: #5806 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6876?srcpr&elh1) report> merging [#6876](https://codecovio/gh/reactivex/rxjava/pull/6876?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/8c85f5a52115b419beeb84b0e2dc9bb4aa6bcd0f?srcpr&eldesc) will **increase** coverage by `007%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6876/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6876?srcpr&eltree)```diff@@ coverage diff @@## 3x #6876 +/- ##+ coverage 9822% 983% +007% - complexity 6525 6527 +2 files 733 733 lines 47052 47054 +2 branches 6425 6425 + hits 46216 46255 +39 + misses 305 289 -16 + partials 531 510 -21```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6876?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `199 (ø)` | :arrow_down: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `171 (+1)` | :arrow_up: || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34% (-1%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9594% (-136%)` | `2% (ø)` | || [ava3/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb2lulmphdme) | `9204% (-114%)` | `3% (ø)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrotwf5ymuuamf2yq) | `9909% (-091%)` | `2% (ø)` | || [/operators/maybe/maybeflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `959% (-082%)` | `2% (ø)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9676% (-065%)` | `6% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgcm9tsxrlcmfibguuamf2yq) | `9625% (-054%)` | `5% (ø)` | || [3/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvhcm91cej5lmphdme) | `9622% (+031%)` | `3% (ø)` | :arrow_down: || and [13 more](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6876?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6876?srcpr&elfooter) last update [8c85f5a51380db](https://codecovio/gh/reactivex/rxjava/pull/6876?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6852.0,6876,1,1,0,1,1,1,1,1,3x: add singleoftype add `oftype` to `single` already available to the other non-empty base typesrelated #6852 ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleoftypepng)in addition diagrams for `maybefilter` and `maybeoftype` have been updated:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybefilterpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeoftypepng)related: #5806 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6876?srcpr&elh1) report> merging [#6876](https://codecovio/gh/reactivex/rxjava/pull/6876?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/8c85f5a52115b419beeb84b0e2dc9bb4aa6bcd0f?srcpr&eldesc) will **increase** coverage by `007%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6876/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6876?srcpr&eltree)```diff@@ coverage diff @@## 3x #6876 +/- ##+ coverage 9822% 983% +007% - complexity 6525 6527 +2 files 733 733 lines 47052 47054 +2 branches 6425 6425 + hits 46216 46255 +39 + misses 305 289 -16 + partials 531 510 -21```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6876?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `199 (ø)` | :arrow_down: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `171 (+1)` | :arrow_up: || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34% (-1%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9594% (-136%)` | `2% (ø)` | || [ava3/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb2lulmphdme) | `9204% (-114%)` | `3% (ø)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrotwf5ymuuamf2yq) | `9909% (-091%)` | `2% (ø)` | || [/operators/maybe/maybeflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `959% (-082%)` | `2% (ø)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9676% (-065%)` | `6% (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgcm9tsxrlcmfibguuamf2yq) | `9625% (-054%)` | `5% (ø)` | || [3/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvhcm91cej5lmphdme) | `9622% (+031%)` | `3% (ø)` | :arrow_down: || and [13 more](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6876?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6876?srcpr&elfooter) last update [8c85f5a51380db](https://codecovio/gh/reactivex/rxjava/pull/6876?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6852.0,6877,1,0,0,0,0,1,1,1,3x: add doonlifecycle to maybe single & completable add the `doonlifecycle` operator to the remaining classesrelated #6852 ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedoonlifecyclepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledoonlifecyclepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabledoonlifecyclepng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6877?srcpr&elh1) report> merging [#6877](https://codecovio/gh/reactivex/rxjava/pull/6877?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/db0bd715bb512976fb0cac20a89af8176b1e1b22?srcpr&eldesc) will **increase** coverage by `005%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6877/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6877?srcpr&eltree)```diff@@ coverage diff @@## 3x #6877 +/- ##+ coverage 9821% 9827% +005% - complexity 6525 6533 +8 files 733 735 +2 lines 47054 47148 +94 branches 6425 6432 +7 + hits 46214 46334 +120 + misses 307 297 -10 + partials 533 517 -16```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6877?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6877/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `172 (+1)` | :arrow_up: || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6877/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `200 (+1)` | :arrow_up: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6877/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `130 (+1)` | :arrow_up: || [3/internal/operators/maybe/maybedoonlifecyclejava](https://codecovio/gh/reactivex/rxjava/pull/6877/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymveb09utglmzwn5y2xllmphdme) | `100% (ø)` | `2 (?)` | || [internal/operators/single/singledoonlifecyclejava](https://codecovio/gh/reactivex/rxjava/pull/6877/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszurvt25mawzly3ljbguuamf2yq) | `100% (ø)` | `2 (?)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6877/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `9357% (-459%)` | `2% (ø)` | || [ctivex/rxjava3/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6877/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc91dglsl1f1zxvlrhjhaw5izwxwzxiuamf2yq) | `9722% (-139%)` | `56% (-1%)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6877/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrou2luz2xllmphdme) | `9905% (-095%)` | `2% (ø)` | || [/operators/maybe/maybeflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6877/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `959% (-082%)` | `2% (ø)` | || [3/internal/operators/observable/observablezipjava](https://codecovio/gh/reactivex/rxjava/pull/6877/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlwmlwlmphdme) | `9931% (-069%)` | `6% (ø)` | || and [19 more](https://codecovio/gh/reactivex/rxjava/pull/6877/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6877?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6877?srcpr&elfooter) last update [db0bd71e045765](https://codecovio/gh/reactivex/rxjava/pull/6877?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6852.0,6879,1,0,0,1,0,1,1,0,3x: add concatmapx operators (aliases) add the following operator aliases:- `maybeconcatmapcompletable`- `maybeconcatmapsingle`- `singleconcatmapcompletable`- `singleconcatmap`- `singleconcatmapmaybe`related #6852 ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatmapcompletablepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatmapsinglepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleconcatmapcompletablepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleconcatmappng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleconcatmapmaybepng)in addition some missing or wrong `maybe` marbles have been fixed:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatmappng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeflatmapcompletable3png)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeflatmapsingle3png)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeflatmapsingleelementpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6879?srcpr&elh1) report> merging [#6879](https://codecovio/gh/reactivex/rxjava/pull/6879?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/4257ef563a3bf017e0703c00057daf12b54738ba?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6879/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6879?srcpr&eltree)```diff@@ coverage diff @@## 3x #6879 +/- ##+ coverage 9824% 9825% +001% - complexity 6534 6536 +2 files 735 735 lines 47148 47153 +5 branches 6432 6432 + hits 46319 46330 +11 + misses 303 302 -1 + partials 526 521 -5```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6879?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6879/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `175 (+3)` | :arrow_up: || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6879/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `202 (+2)` | :arrow_up: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6879/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvcbg9ja2luz1n1ynnjcmlizs5qyxzh) | `9302% (-466%)` | `10% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6879/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `927% (-365%)` | `2% (ø)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6879/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9417% (-324%)` | `6% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6879/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34% (-1%)` | || [ctivex/rxjava3/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6879/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc91dglsl1f1zxvlrhjhaw5izwxwzxiuamf2yq) | `9722% (-139%)` | `56% (-1%)` | || [3/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6879/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvqdwjsaxnolmphdme) | `9753% (-099%)` | `16% (-1%)` | || [3/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6879/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvhcm91cej5lmphdme) | `9559% (-095%)` | `3% (ø)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6879/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrotwf5ymuuamf2yq) | `9909% (-091%)` | `2% (ø)` | || and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6879/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6879?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6879?srcpr&elfooter) last update [4257ef58f58234](https://codecovio/gh/reactivex/rxjava/pull/6879?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6852.0,6881,1,0,0,1,0,1,1,1,3x: add various concatxdelayerror operators add the following concat kind of operators:- `maybeconcatarrayeagerdelayerror`- `maybeconcatdelayerror(publisher int)`- `singleconcatarraydelayerror`- `singleconcatarrayeagerdelayerror`- `singleconcatdelayerror` + 2- `completableconcatarraydelayerror`- `completableconcatdelayerror` + 2related #6852 ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatarrayeagerdelayerrorpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatdelayerrorpnpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleconcatarraydelayerrorpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleconcatarrayeagerdelayerrorpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleconcatdelayerroripng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleconcatdelayerrorppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleconcatdelayerrorpnpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableconcatarraydelayerrorpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableconcatdelayerroripng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableconcatdelayerrorppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableconcatdelayerrorpnpng)in addition the `maybeconcatdelayerror(publisher)` marble has been fixed:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatdelayerror3ipng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6881?srcpr&elh1) report> merging [#6881](https://codecovio/gh/reactivex/rxjava/pull/6881?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/57bd1a9272464a1b4b201faa2bab7a929a0ae7f3?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6881/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6881?srcpr&eltree)```diff@@ coverage diff @@## 3x #6881 +/- ##- coverage 9829% 9825% -004% - complexity 6540 6547 +7 files 735 735 lines 47153 47163 +10 branches 6432 6432 - hits 46349 46342 -7 - misses 289 297 +8 - partials 515 524 +9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6881?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6881/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `204 (+2)` | :arrow_up: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6881/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `180 (+5)` | :arrow_up: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6881/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `134 (+4)` | :arrow_up: || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6881/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `899% (-826%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6881/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `901% (-521%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6881/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8888% (-477%)` | `2% (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6881/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvcbg9ja2luz1n1ynnjcmlizs5qyxzh) | `9302% (-466%)` | `10% (-1%)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6881/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxszwr1y2vgdwxslmphdme) | `9108% (-199%)` | `2% (ø)` | || [ava3/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/pull/6881/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb2lulmphdme) | `9204% (-114%)` | `3% (ø)` | || [ivex/rxjava3/subscribers/serializedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/6881/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zdwjzy3jpymvycy9tzxjpywxpemvku3vic2nyawjlci5qyxzh) | `9886% (-114%)` | `26% (-1%)` | || and [15 more](https://codecovio/gh/reactivex/rxjava/pull/6881/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6881?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6881?srcpr&elfooter) last update [57bd1a9d2677ad](https://codecovio/gh/reactivex/rxjava/pull/6881?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6852.0,6882,1,0,0,0,0,0,1,0,3x: add singlemergearray & mergearraydelayerror `single` was missing the `mergearray` and `mergearraydelayerror` operators already present in the other classesrelated #6852![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlemergearraypng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlemergearraydelayerrorpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6882?srcpr&elh1) report> merging [#6882](https://codecovio/gh/reactivex/rxjava/pull/6882?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/9283700d3a04d495b0845f947ed119c1ed10ee94?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6882/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6882?srcpr&eltree)```diff@@ coverage diff @@## 3x #6882 +/- ##- coverage 9829% 9827% -003% - complexity 6548 6550 +2 files 735 735 lines 47163 47165 +2 branches 6432 6432 - hits 46359 46351 -8 - misses 289 294 +5 - partials 515 520 +5```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6882?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6882/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `204 (ø)` | :arrow_down: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6882/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `182 (+2)` | :arrow_up: || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6882/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9401% (-428%)` | `2% (ø)` | || [xjava3/internal/observers/futuremultiobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6882/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvrnv0dxjltxvsdglpynnlcnzlci5qyxzh) | `9152% (-339%)` | `25% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6882/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `927% (-313%)` | `2% (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6882/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu3dpdgnotwfwlmphdme) | `9157% (-211%)` | `3% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6882/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34% (-1%)` | || [ava3/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/pull/6882/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb2lulmphdme) | `9204% (-114%)` | `3% (ø)` | || [3/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6882/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvqdwjsaxnolmphdme) | `9753% (-099%)` | `16% (-1%)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6882/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9708% (-065%)` | `6% (ø)` | || and [16 more](https://codecovio/gh/reactivex/rxjava/pull/6882/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6882?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6882?srcpr&elfooter) last update [928370047d7680](https://codecovio/gh/reactivex/rxjava/pull/6882?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6852.0,6884,1,0,0,0,0,1,1,0,3x: add completablesequenceequal the operator was available in all other classesrelated #6852 ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablesequenceequalpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6884?srcpr&elh1) report> merging [#6884](https://codecovio/gh/reactivex/rxjava/pull/6884?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/9283700d3a04d495b0845f947ed119c1ed10ee94?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6884/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6884?srcpr&eltree)```diff@@ coverage diff @@## 3x #6884 +/- ##- coverage 9829% 9828% -002% complexity 6548 6548 files 735 735 lines 47163 47166 +3 branches 6432 6432 - hits 46359 46356 -3 - misses 289 294 +5 - partials 515 516 +1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6884?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `135 (+1)` | :arrow_up: || [xjava3/internal/observers/futuremultiobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvrnv0dxjltxvsdglpynnlcnzlci5qyxzh) | `8644% (-848%)` | `24% (-2%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `9295% (-282%)` | `2% (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9375% (-209%)` | `2% (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% (-2%)` | `34% (-1%)` | || [ava3/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb2lulmphdme) | `9166% (-152%)` | `3% (ø)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9644% (-13%)` | `6% (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu3dpdgnotwfwlmphdme) | `9263% (-106%)` | `3% (ø)` | || [rxjava3/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0v4zwn1dg9yu2nozwr1bgvylmphdme) | `9589% (-092%)` | `10% (ø)` | || [/operators/observable/observablecombinelatestjava](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq29tymluzuxhdgvzdc5qyxzh) | `9617% (-064%)` | `6% (ø)` | || and [12 more](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6884?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6884?srcpr&elfooter) last update [928370012aa0dc](https://codecovio/gh/reactivex/rxjava/pull/6884?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6852.0,6885,1,0,0,0,0,0,1,0,3x: add missing startwith overloads add missing ( ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) ) `startwith` overloads source \ other | f | o | m | s | c |--|--|--|--|--|--|flowable | ![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng) | ![absent](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_offpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)observable | ![absent](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_offpng) | ![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng)| ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)maybe | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)single | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)completable | ![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng) | ![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng)related #6852![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowablestartwithmpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowablestartwithspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowablestartwithcpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observablestartwithmpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observablestartwithspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observablestartwithcpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybestartwithppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybestartwithopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybestartwithmpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybestartwithspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybestartwithcpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlestartwithppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlestartwithopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlestartwithmpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlestartwithspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlestartwithcpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablestartwithmpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablestartwithspng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6885?srcpr&elh1) report> merging [#6885](https://codecovio/gh/reactivex/rxjava/pull/6885?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/78c70d6a5365cb8db532d23397d5a0b4c114b72a?srcpr&eldesc) will **decrease** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6885/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6885?srcpr&eltree)```diff@@ coverage diff @@## 3x #6885 +/- ##- coverage 9829% 9825% -005% - complexity 6550 6563 +13 files 735 735 lines 47165 47201 +36 branches 6432 6432 + hits 46359 46375 +16 - misses 290 298 +8 - partials 516 528 +12```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6885?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `591 (+3)` | :arrow_up: || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `209 (+5)` | :arrow_up: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `136 (+2)` | :arrow_up: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `187 (+5)` | :arrow_up: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `561 (+3)` | :arrow_up: || [vex/rxjava3/internal/operators/maybe/maybeambjava](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvbbwiuamf2yq) | `9696% (-304%)` | `10% (-1%)` | || [a/io/reactivex/rxjava3/subjects/singlesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zdwjqzwn0cy9taw5nbgvtdwjqzwn0lmphdme) | `9753% (-247%)` | `37% (-1%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu3dpdgnotwfwlmphdme) | `9157% (-211%)` | `3% (ø)` | || [a3/internal/subscribers/innerqueuedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zdwjzy3jpymvycy9jbm5lclf1zxvlzfn1ynnjcmlizxiuamf2yq) | `9607% (-197%)` | `18% (-1%)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9743% (-171%)` | `2% (ø)` | || and [23 more](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6885?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6885?srcpr&elfooter) last update [78c70d69ca388c](https://codecovio/gh/reactivex/rxjava/pull/6885?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5806.0,6886,1,0,0,0,0,1,1,0,3x: add completableonerrorreturn[item] the operators were already available elsewhererelated #6852![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableonerrorreturnpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableonerrorreturnitempng)in addition the `maybe` variants have received updated marbles as well:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeonerrorreturnpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeonerrorreturnitempng)related #5806 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6886?srcpr&elh1) report> merging [#6886](https://codecovio/gh/reactivex/rxjava/pull/6886?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/f86753aa4c15717740556ec34418e86edea1b146?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6886/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6886?srcpr&eltree)```diff@@ coverage diff @@## 3x #6886 +/- ##- coverage 9826% 9823% -003% - complexity 6569 6573 +4 files 735 736 +1 lines 47204 47235 +31 branches 6432 6433 +1 + hits 46384 46402 +18 - misses 298 310 +12 - partials 522 523 +1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6886?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `209 (ø)` | :arrow_down: || [3/internal/operators/maybe/maybeonerrorreturnjava](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvpbkvycm9yumv0dxjulmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `139 (+2)` | :arrow_up: || [perators/completable/completableonerrorreturnjava](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvpbkvycm9yumv0dxjulmphdme) | `100% (ø)` | `2 (?)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9029% (-615%)` | `6% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9244% (-291%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `9295% (-212%)` | `2% (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu3dpdgnotwfwlmphdme) | `9157% (-211%)` | `3% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93lmphdme) | `9818% (-182%)` | `3% (ø)` | || [ctivex/rxjava3/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc91dglsl1f1zxvlrhjhaw5izwxwzxiuamf2yq) | `9861% (-139%)` | `57% (-1%)` | || and [20 more](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6886?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6886?srcpr&elfooter) last update [f86753a8a940f3](https://codecovio/gh/reactivex/rxjava/pull/6886?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6852.0,6886,1,0,0,0,0,1,1,0,3x: add completableonerrorreturn[item] the operators were already available elsewhererelated #6852![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableonerrorreturnpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableonerrorreturnitempng)in addition the `maybe` variants have received updated marbles as well:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeonerrorreturnpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeonerrorreturnitempng)related #5806 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6886?srcpr&elh1) report> merging [#6886](https://codecovio/gh/reactivex/rxjava/pull/6886?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/f86753aa4c15717740556ec34418e86edea1b146?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6886/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6886?srcpr&eltree)```diff@@ coverage diff @@## 3x #6886 +/- ##- coverage 9826% 9823% -003% - complexity 6569 6573 +4 files 735 736 +1 lines 47204 47235 +31 branches 6432 6433 +1 + hits 46384 46402 +18 - misses 298 310 +12 - partials 522 523 +1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6886?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `209 (ø)` | :arrow_down: || [3/internal/operators/maybe/maybeonerrorreturnjava](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvpbkvycm9yumv0dxjulmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `139 (+2)` | :arrow_up: || [perators/completable/completableonerrorreturnjava](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvpbkvycm9yumv0dxjulmphdme) | `100% (ø)` | `2 (?)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9029% (-615%)` | `6% (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9244% (-291%)` | `2% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `9295% (-212%)` | `2% (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu3dpdgnotwfwlmphdme) | `9157% (-211%)` | `3% (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93lmphdme) | `9818% (-182%)` | `3% (ø)` | || [ctivex/rxjava3/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc91dglsl1f1zxvlrhjhaw5izwxwzxiuamf2yq) | `9861% (-139%)` | `57% (-1%)` | || and [20 more](https://codecovio/gh/reactivex/rxjava/pull/6886/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6886?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6886?srcpr&elfooter) last update [f86753a8a940f3](https://codecovio/gh/reactivex/rxjava/pull/6886?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
685.0,6887,1,0,0,1,0,1,1,1,3x: add safesubscribe to maybe single & completable add the final missing method `safesubscribe` to `maybe` `single` & `completable`resolves #6852 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6887?srcpr&elh1) report> merging [#6887](https://codecovio/gh/reactivex/rxjava/pull/6887?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/e077ed832678f5efeb15748d2a4aa4aafd29ef5a?srcpr&eldesc) will **decrease** coverage by `008%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6887/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6887?srcpr&eltree)```diff@@ coverage diff @@## 3x #6887 +/- ##- coverage 9832% 9824% -009% - complexity 6576 6598 +22 files 736 739 +3 lines 47235 47329 +94 branches 6433 6433 + hits 46446 46497 +51 - misses 280 308 +28 - partials 509 524 +15```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6887?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6887/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `210 (+1)` | :arrow_up: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6887/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `188 (+1)` | :arrow_up: || [a3/internal/observers/safecompletableobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6887/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvu2fmzunvbxbszxrhymxlt2jzzxj2zxiuamf2yq) | `100% (ø)` | `6 (?)` | || [/rxjava3/internal/observers/safemaybeobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6887/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvu2fmzu1hewjlt2jzzxj2zxiuamf2yq) | `100% (ø)` | `8 (?)` | || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6887/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `140 (+1)` | :arrow_up: || [rxjava3/internal/observers/safesingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6887/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvu2fmzvnpbmdszu9ic2vydmvylmphdme) | `100% (ø)` | `6 (?)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6887/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `838% (-1057%)` | `2% (ø)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6887/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `899% (-826%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6887/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9047% (-477%)` | `2% (ø)` | || [xjava3/internal/observers/futuremultiobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6887/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvrnv0dxjltxvsdglpynnlcnzlci5qyxzh) | `9152% (-339%)` | `25% (-1%)` | || and [16 more](https://codecovio/gh/reactivex/rxjava/pull/6887/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6887?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6887?srcpr&elfooter) last update [e077ed8802e884](https://codecovio/gh/reactivex/rxjava/pull/6887?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6865.0,6888,1,0,0,0,0,1,1,0,3x: use more appropriate operators when delegating to flowable ops many `single` and `maybe` operators delegate to `flowable` operators this pr makes sure they use the most appropriate ones since there are `single`- and `maybe`-specific operators on `flowable` for some time nowsome concatenating non-delayed single operators now use the `flowableconcatmapsingledelayerror(functionsidentity() false)` because an array or `iterable` of `single`s cant just throw anytime like a `publisher >`s `publisher` could hence a delay-error until boundary mode works the same but without the extra coordination of the more general `publisher` variantresolves #6865`completable` didnt have any delegation required changing # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6888?srcpr&elh1) report> merging [#6888](https://codecovio/gh/reactivex/rxjava/pull/6888?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/e077ed832678f5efeb15748d2a4aa4aafd29ef5a?srcpr&eldesc) will **decrease** coverage by `005%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6888/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6888?srcpr&eltree)```diff@@ coverage diff @@## 3x #6888 +/- ##- coverage 9832% 9827% -006% - complexity 6576 6596 +20 files 736 741 +5 lines 47235 47334 +99 branches 6433 6432 -1 + hits 46446 46516 +70 - misses 280 301 +21 - partials 509 517 +8```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6888?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nternal/operators/single/singleinternalhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuludgvybmfssgvscgvylmphdme) | `9545% (-07%)` | `4 (-1)` | || [nal/operators/mixed/observableconcatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvt2jzzxj2ywjszunvbmnhde1hcfnpbmdszs5qyxzh) | `100% (ø)` | `3 (ø)` | :arrow_down: || [rators/mixed/flowableconcatmapsinglepublisherjava](https://codecovio/gh/reactivex/rxjava/pull/6888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvrmxvd2fibgvdb25jyxrnyxbtaw5nbgvqdwjsaxnozxiuamf2yq) | `100% (ø)` | `2 (?)` | || [rators/flowable/flowableflatmapmaybepublisherjava](https://codecovio/gh/reactivex/rxjava/pull/6888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymvqdwjsaxnozxiuamf2yq) | `100% (ø)` | `2 (?)` | || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `209 (ø)` | :arrow_down: || [ators/flowable/flowableflatmapsinglepublisherjava](https://codecovio/gh/reactivex/rxjava/pull/6888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xluhvibglzagvylmphdme) | `100% (ø)` | `2 (?)` | || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `188 (+1)` | :arrow_up: || [erators/mixed/flowableconcatmapmaybepublisherjava](https://codecovio/gh/reactivex/rxjava/pull/6888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvrmxvd2fibgvdb25jyxrnyxbnyxlizvb1ymxpc2hlci5qyxzh) | `100% (ø)` | `2 (?)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8809% (-715%)` | `2% (ø)` | || [nternal/operators/flowable/flowablescalarxmapjava](https://codecovio/gh/reactivex/rxjava/pull/6888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvty2fsyxjytwfwlmphdme) | `9655% (-345%)` | `6% (-1%)` | || and [26 more](https://codecovio/gh/reactivex/rxjava/pull/6888/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6888?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6888?srcpr&elfooter) last update [e077ed8f9c3ef0](https://codecovio/gh/reactivex/rxjava/pull/6888?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6872.0,6890,1,1,1,0,0,0,1,0,3x: fix marble dimensions add program that checks them resolves #6872also added 2 diagrams missing![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/switchmapmaybeopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/switchmapmaybedelayerroropng)and fixed 1 diagram wrongly exported![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableconcatarraydelayerrorpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6890?srcpr&elh1) report> merging [#6890](https://codecovio/gh/reactivex/rxjava/pull/6890?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/2d8660e070fe65b8089855ba1a58ef49d7c1b70a?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6890/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6890?srcpr&eltree)```diff@@ coverage diff @@## 3x #6890 +/- ##+ coverage 9822% 9824% +001% complexity 6594 6594 files 739 741 +2 lines 47329 47334 +5 branches 6433 6432 -1 + hits 46489 46501 +12 + misses 315 304 -11 - partials 525 529 +4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6890?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `591 (ø)` | :arrow_down: || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `209 (-1)` | :arrow_down: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% (ø)` | `140 (ø)` | :arrow_down: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `188 (ø)` | :arrow_down: || [o/reactivex/rxjava3/parallel/parallelflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wyxjhbgxlbc9qyxjhbgxlbezsb3dhymxllmphdme) | `100% (ø)` | `57 (ø)` | :arrow_down: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `561 (ø)` | :arrow_down: || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `899% (-826%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8888% (-635%)` | `2% (ø)` | || [nternal/operators/flowable/flowablescalarxmapjava](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvty2fsyxjytwfwlmphdme) | `9655% (-345%)` | `6% (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `845% (-282%)` | `2% (ø)` | || and [28 more](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6890?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6890?srcpr&elfooter) last update [2d8660e3a5e88e](https://codecovio/gh/reactivex/rxjava/pull/6890?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6878.0,6891,1,0,0,0,0,1,1,0,3x: swap maybeflatmapsingle and maybeflatmapsingleelement resolves #6878dropped the old `maybeflatmapsingle` and replaced it with `maybeflatmapsingleelement` hmm for xflatmaptestmaybesingle if i replace `flatmapsingle()tosingle()` with `tosingle()flatmap()` then the test will pass || the test checks if disposing while in the function the returned `single` never gets subscribed to and thus no error is signaled to the downstream or the global error handler put an `@ignore` on it for now and ill look into the operator tomorrow || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6891?srcpr&elh1) report> merging [#6891](https://codecovio/gh/reactivex/rxjava/pull/6891?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/b3516b2fbf76643d4fce2bb077de64deaf959f90?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6891/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6891?srcpr&eltree)```diff@@ coverage diff @@## 3x #6891 +/- ##+ coverage 9826% 9826% + (ø)` | `208 (-1)` | :arrow_down: || [3/internal/operators/maybe/maybeflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6891/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvgbgf0twfwu2luz2xllmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6891/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `899% (-826%)` | `2% (ø)` | || [xjava3/internal/observers/futuremultiobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6891/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvrnv0dxjltxvsdglpynnlcnzlci5qyxzh) | `9152% (-339%)` | `25% (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6891/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `927% (-261%)` | `2% (ø)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6891/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9482% (-259%)` | `6% (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6891/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9594% (-136%)` | `2% (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6891/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9829% (-086%)` | `2% (ø)` | || [/operators/observable/observablecombinelatestjava](https://codecovio/gh/reactivex/rxjava/pull/6891/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq29tymluzuxhdgvzdc5qyxzh) | `9617% (-064%)` | `6% (ø)` | || [a/io/reactivex/rxjava3/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/pull/6891/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zdwjqzwn0cy9szxbsyxltdwjqzwn0lmphdme) | `9714% (-041%)` | `50% (ø)` | || and [12 more](https://codecovio/gh/reactivex/rxjava/pull/6891/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6891?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6891?srcpr&elfooter) last update [b3516b2ccc3afb](https://codecovio/gh/reactivex/rxjava/pull/6891?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5806.0,6893,1,0,0,0,0,1,1,0,3x: reenable xflatmaptestmaybesingle add missing single operators reenable the `xflatmaptestmaybesingle` and make sure all flatmap variants behave the same when the flow is cancelled/disposed while the mapper function is executing thus the returned inner source doesnt get subscribed to at allresolves #6892while adding the extra tests i noticed two `flatmap` variant is missing from `single`:- a combiner of the original and inner success item: `flatmap(function > bifunction )`- a notification-type mapper: `flatmap(function > function >)`![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleflatmapcombinerpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleflatmapnotificationpng)lastly the same combiner variant for `maybe` received a marble diagram too:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeflatmapcombinerpng)related #5806 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6893?srcpr&elh1) report> merging [#6893](https://codecovio/gh/reactivex/rxjava/pull/6893?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/f1a795da0d4cdfb3133206ad8e3887bdb8ba948b?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6893/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6893?srcpr&eltree)```diff@@ coverage diff @@## 3x #6893 +/- ##+ coverage 9825% 9829% +004% - complexity 6590 6599 +9 files 740 742 +2 lines 47293 47399 +106 branches 6430 6443 +13 + hits 46468 46593 +125 + misses 300 292 -8 + partials 525 514 -11```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6893?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `208 (ø)` | :arrow_down: || [3/internal/operators/maybe/maybeflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvgbgf0twfwu2luz2xllmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || [rnal/operators/maybe/maybeflatmapnotificationjava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvgbgf0twfwtm90awzpy2f0aw9ulmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `190 (+2)` | :arrow_up: || [ernal/operators/single/singleflatmappublisherjava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbqdwjsaxnozxiuamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || [al/operators/single/singleflatmapnotificationjava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbob3rpzmljyxrpb24uamf2yq) | `100% (ø)` | `2 (?)` | || [rnal/operators/single/singleflatmapbiselectorjava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbcavnlbgvjdg9ylmphdme) | `100% (ø)` | `2 (?)` | || [ternal/operators/mixed/maybeflatmapobservablejava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvtwf5ymvgbgf0twfwt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `2 (ø)` | :arrow_down: || [nternal/operators/mixed/maybeflatmappublisherjava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvtwf5ymvgbgf0twfwuhvibglzagvylmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || [ernal/operators/mixed/singleflatmapobservablejava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvu2luz2xlrmxhde1hce9ic2vydmfibguuamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || and [28 more](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6893?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6893?srcpr&elfooter) last update [f1a795d56cd9dd](https://codecovio/gh/reactivex/rxjava/pull/6893?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6892.0,6893,1,0,0,0,0,1,1,0,3x: reenable xflatmaptestmaybesingle add missing single operators reenable the `xflatmaptestmaybesingle` and make sure all flatmap variants behave the same when the flow is cancelled/disposed while the mapper function is executing thus the returned inner source doesnt get subscribed to at allresolves #6892while adding the extra tests i noticed two `flatmap` variant is missing from `single`:- a combiner of the original and inner success item: `flatmap(function > bifunction )`- a notification-type mapper: `flatmap(function > function >)`![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleflatmapcombinerpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleflatmapnotificationpng)lastly the same combiner variant for `maybe` received a marble diagram too:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeflatmapcombinerpng)related #5806 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6893?srcpr&elh1) report> merging [#6893](https://codecovio/gh/reactivex/rxjava/pull/6893?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/f1a795da0d4cdfb3133206ad8e3887bdb8ba948b?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6893/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6893?srcpr&eltree)```diff@@ coverage diff @@## 3x #6893 +/- ##+ coverage 9825% 9829% +004% - complexity 6590 6599 +9 files 740 742 +2 lines 47293 47399 +106 branches 6430 6443 +13 + hits 46468 46593 +125 + misses 300 292 -8 + partials 525 514 -11```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6893?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `208 (ø)` | :arrow_down: || [3/internal/operators/maybe/maybeflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvgbgf0twfwu2luz2xllmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || [rnal/operators/maybe/maybeflatmapnotificationjava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvgbgf0twfwtm90awzpy2f0aw9ulmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `190 (+2)` | :arrow_up: || [ernal/operators/single/singleflatmappublisherjava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbqdwjsaxnozxiuamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || [al/operators/single/singleflatmapnotificationjava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbob3rpzmljyxrpb24uamf2yq) | `100% (ø)` | `2 (?)` | || [rnal/operators/single/singleflatmapbiselectorjava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbcavnlbgvjdg9ylmphdme) | `100% (ø)` | `2 (?)` | || [ternal/operators/mixed/maybeflatmapobservablejava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvtwf5ymvgbgf0twfwt2jzzxj2ywjszs5qyxzh) | `100% (ø)` | `2 (ø)` | :arrow_down: || [nternal/operators/mixed/maybeflatmappublisherjava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvtwf5ymvgbgf0twfwuhvibglzagvylmphdme) | `100% (ø)` | `2 (ø)` | :arrow_down: || [ernal/operators/mixed/singleflatmapobservablejava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvu2luz2xlrmxhde1hce9ic2vydmfibguuamf2yq) | `100% (ø)` | `2 (ø)` | :arrow_down: || and [28 more](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6893?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6893?srcpr&elfooter) last update [f1a795d56cd9dd](https://codecovio/gh/reactivex/rxjava/pull/6893?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
5806.0,6897,1,0,0,0,0,0,1,0,3x: add remaining maybe marbles (+50) resolves #5806 ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeambwithpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeblockinggetpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeblockinggetvpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybecachepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybecomposepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatwithpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybecountpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedefaultifemptypng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedelayppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedelaytpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedelaytbpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedelaytspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedelaytsbpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedoaftersuccesspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedoafterterminatepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedofinallypng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedoondisposepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedoonsubscribepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedoonterminatepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeflatmapobservablepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeflatmappublisherpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeisemptypng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybemergewithpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/mayberepeatnpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/mayberepeatpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/mayberepeatuntilpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/mayberepeatwhenpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/mayberetryfpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/mayberetrygpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/mayberetrynpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/mayberetrynfpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/mayberetrypng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/mayberetrywhenpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeswitchifemptympng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeswitchifemptyspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybetakeuntilmpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybetakeuntilppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybetimeoutmpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybetimeoutmmpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybetimeoutppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybetimeoutpmpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybetimeouttpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybetimeouttmpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybetimeouttspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybetimeouttsmpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybetopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybetoflowablepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybetoobservablepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybetosinglepng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6897?srcpr&elh1) report> merging [#6897](https://codecovio/gh/reactivex/rxjava/pull/6897?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/f1a795da0d4cdfb3133206ad8e3887bdb8ba948b?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6897/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6897?srcpr&eltree)```diff@@ coverage diff @@## 3x #6897 +/- ##+ coverage 9825% 9825% + (ø)` | `208 (ø)` | :arrow_down: || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6897/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9288% (-486%)` | `6% (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6897/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `838% (-423%)` | `2% (ø)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6897/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% (-186%)` | `39% (-1%)` | || [internal/operators/flowable/flowablefromarrayjava](https://codecovio/gh/reactivex/rxjava/pull/6897/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgcm9tqxjyyxkuamf2yq) | `9661% (-17%)` | `3% (ø)` | || [ctivex/rxjava3/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6897/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc91dglsl1f1zxvlrhjhaw5izwxwzxiuamf2yq) | `9861% (-139%)` | `57% (-1%)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6897/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrou2luz2xllmphdme) | `9905% (-095%)` | `2% (ø)` | || [al/operators/observable/observablewindowtimedjava](https://codecovio/gh/reactivex/rxjava/pull/6897/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93vgltzwquamf2yq) | `9612% (-065%)` | `4% (ø)` | || [ternal/operators/flowable/flowablewindowtimedjava](https://codecovio/gh/reactivex/rxjava/pull/6897/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvxaw5kb3duaw1lzc5qyxzh) | `9662% (-057%)` | `5% (ø)` | || [ternal/operators/observable/observablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6897/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlr3jvdxbces5qyxzh) | `9508% (-055%)` | `2% (ø)` | || and [24 more](https://codecovio/gh/reactivex/rxjava/pull/6897/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6897?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6897?srcpr&elfooter) last update [f1a795d55a0867](https://codecovio/gh/reactivex/rxjava/pull/6897?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6880.0,6899,1,0,0,0,0,0,1,0,3x: add concateagerdelayerror across `flowable` `observable` `maybe` and `single` now have a `concateagerdelayerror` delegating to the appropriate `concatmapeagerdelayerror` operatorin addition `maybe` and `single` received an overload `concateager(iterable int)` to expose the `maxconcurrency` option already present in the rest of the typesnote that `completableconcateagerdelayerror` is essentially the same as `mergedelayerror` because there are no items to keep emitting in orderresolves #6880the `flowable` and `observable` variant of `concateager` also received fresh marble diagrams (related #5813)#### flowable![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableconcateageripng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableconcateagerinpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableconcateagerppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableconcateagerpnpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableconcateagerdelayerroripng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableconcateagerdelayerrorinpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableconcateagerdelayerrorppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableconcateagerdelayerrorpnpng)----#### observable![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observableconcateageripng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observableconcateagerinpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observableconcateageropng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observableconcateageronpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observableconcateagerdelayerroripng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observableconcateagerdelayerrorinpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observableconcateagerdelayerroropng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observableconcateagerdelayerroronpng)----#### maybe![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcateagerinpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcateagerpnpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcateagerdelayerroripng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcateagerdelayerrorinpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcateagerdelayerrorppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcateagerdelayerrorpnpng)----#### single![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleconcateagerinpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleconcateagerpnpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleconcateagerdelayerroripng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleconcateagerdelayerrorinpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleconcateagerdelayerrorppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleconcateagerdelayerrorpnpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6899?srcpr&elh1) report> merging [#6899](https://codecovio/gh/reactivex/rxjava/pull/6899?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/7e4bb8b0a076c3b5a4c0c3b2fb559f0ba836c88f?srcpr&eldesc) will **increase** coverage by ` the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6899/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6899?srcpr&eltree)```diff@@ coverage diff @@## 3x #6899 +/- ##+ coverage 9826% 9826% + (ø)` | `140 (ø)` | :arrow_down: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6899/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% (ø)` | `565 (+4)` | :arrow_up: || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6899/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% (ø)` | `214 (+6)` | :arrow_up: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6899/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% (ø)` | `196 (+6)` | :arrow_up: || [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6899/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% (ø)` | `595 (+4)` | :arrow_up: || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6899/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9166% (-469%)` | `2% (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6899/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9126% (-239%)` | `2% (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6899/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb3j0zwrkb2lulmphdme) | `927% (-219%)` | `2% (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6899/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbjdgvyywjszuzsb3dhymxllmphdme) | `95% (-167%)` | `2% (ø)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6899/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrotwf5ymuuamf2yq) | `9909% (-091%)` | `2% (ø)` | || and [21 more](https://codecovio/gh/reactivex/rxjava/pull/6899/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6899?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6899?srcpr&elfooter) last update [7e4bb8bfae8770](https://codecovio/gh/reactivex/rxjava/pull/6899?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
692.0,6921,1,0,0,1,0,1,1,1,3x: fix replay() not resetting when the connection is disposed disposing a `replay()`-based connectable should reset the operator to its fresh state this was supposed to happen but the relevant code changes were not enabled the pr fixes this for both `flowable` and `observable`-based implementationsthe `publish`-based connectables work as intendedfixes #6920 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6921?srcpr&elh1) report> merging [#6921](https://codecovio/gh/reactivex/rxjava/pull/6921?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/042dee38fc9b1655f68a2296ee94035ba5e6efa1&eldesc) will **decrease** coverage by `000%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6921/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6921?srcpr&eltree)```diff@@ coverage diff @@## 3x #6921 +/- ##- coverage 9965% 9965% -001% + complexity 6670 6669 -1 files 742 742 lines 47217 47220 +3 branches 6367 6367 hits 47055 47055 - misses 48 50 +2 - partials 114 115 +1 ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6921?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `9357% (-459%)` | `200% (ø%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9444% (-239%)` | `200% (ø%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9534% (-233%)` | `200% (ø%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9585% (-208%)` | `200% (ø%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9729% (-136%)` | `200% (ø%)` | || [a3/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvszxbsyxkuamf2yq) | `9892% (-108%)` | `2100% (-100%)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrou2luz2xllmphdme) | `9905% (-095%)` | `200% (ø%)` | || [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcc5qyxzh) | `9817% (ø)` | `300% (ø%)` | :arrow_up: || [3/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvhcm91cej5lmphdme) | `9968% (+031%)` | `300% (ø%)` | :arrow_up: || [operators/flowable/flowableconcatmapschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdb25jyxrnyxbty2hlzhvszxiuamf2yq) | `9960% (+039%)` | `400% (ø%)` | :arrow_up: || and [7 more](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6921?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6921?srcpr&elfooter) last update [042dee332f5dbb](https://codecovio/gh/reactivex/rxjava/pull/6921?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6883.0,6944,1,0,0,0,0,0,1,0,update image urls to non-transparent version updated image urls to use non-transparent ones as per #6883resolves #6883 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6944?srcpr&elh1) report> merging [#6944](https://codecovio/gh/reactivex/rxjava/pull/6944?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/a2128ae70dc98410d3b009943cd46f1b0e73049b&eldesc) will **increase** coverage by `000%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6944/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6944?srcpr&eltree)```diff@@ coverage diff @@## 3x #6944 +/- ## coverage 9963% 9964% - complexity 6666 6667 +1 files 742 742 lines 47220 47220 branches 6367 6367 + hits 47049 47051 +2 + misses 54 50 -4 - partials 117 119 +2 ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6944?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `10000% (ø)` | `14000 (ø)` | || [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `10000% (ø)` | `59500 (ø)` | || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `10000% (ø)` | `21400 (ø)` | || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `10000% (ø)` | `56500 (ø)` | || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `10000% (ø)` | `19600 (ø)` | || [activex/rxjava3/flowables/connectableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9mbg93ywjszxmvq29ubmvjdgfibgvgbg93ywjszs5qyxzh) | `10000% (ø)` | `1200 (ø)` | || [operators/flowable/blockingflowablemostrecentjava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvqmxvy2tpbmdgbg93ywjszu1vc3rszwnlbnquamf2yq) | `10000% (ø)` | `200 (ø)` | || [ernal/operators/flowable/blockingflowablenextjava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvqmxvy2tpbmdgbg93ywjszu5lehquamf2yq) | `9836% (ø)` | `200 (ø)` | || [ators/observable/blockingobservablemostrecentjava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9cbg9ja2luz09ic2vydmfibgvnb3n0umvjzw50lmphdme) | `10000% (ø)` | `200 (ø)` | || [l/operators/observable/blockingobservablenextjava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9cbg9ja2luz09ic2vydmfibgvozxh0lmphdme) | `9836% (ø)` | `200 (ø)` | || and [22 more](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6944?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6944?srcpr&elfooter) last update [a2128ae96573bc](https://codecovio/gh/reactivex/rxjava/pull/6944?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks the new v3 images load in properly || glad to help ||
695.0,6956,1,0,0,1,0,1,1,1,3x: fix scheduled tasks fatal exception behavior fatal exceptions may be lost with scheduled direct & scheduled periodic direct tasks because `futuretask` simply treats them as exceptional outcomes for regular tasks [scheduledrunnable](https://githubcom/reactivex/rxjava/blob/3x/src/main/java/io/reactivex/rxjava3/internal/schedulers/scheduledrunnablejava#l67) already avoids rethrowing fatal errors as it would go nowherethis pr adds this behavior to the direct runnable tasksresolves #6954 > this will halt the application when stack overflow:i dont understand as far as i know calling the uncaught exception handler on android kills your app on desktop such calls do nothing but the repetition of the `scheduleperiodicallydirect` should end || > > this will halt the application when stack overflow:> > i dont understand as far as i know calling the uncaught exception handler on android kills your app on desktop such calls do nothing but the repetition of the `scheduleperiodicallydirect` should endi am sorry i think i made a mistake when simplifies #748 case the key point is when stackoverflowerror ocurrs calling error hander without throw may cause stack full again that is also why i selected a complex approach ill check it || > > this will halt the application when stack overflow:> > i dont understand as far as i know calling the uncaught exception handler on android kills your app on desktop such calls do nothing but the repetition of the `scheduleperiodicallydirect` should endhi akarnokd sorry to the above mistakepersonally i think this approach has some flaws1 - this approach means well catch fatal exceptions instead of throwing it through the call stack but the functions on the call stack may need this exception to clean/stop itself for example this change will make periodic tasks unable to stop (at least on desktop or server): @test // fail public void periodictaskshouldstoponerror() throws exception { atomicinteger repeatcount new atomicinteger() new computationscheduler()scheduleperiodicallydirect(new runnable() { @override public void run() { repeatcountincrementandget() if (true) { throw new outofmemoryerror() } } } 0 500 timeunitmilliseconds) threadsleep(1000 * 3) assertequals(1 repeatcountget()) }2 - to solve the above problem we need to rethrow the exception after rxjavapluginsonerror() or make rxjavapluginsonerror() to throw after calling the uncaughtexceptionhandler of the thread this actullay makes some exceptions to be handled more than once and i think it will make things more and more complex as we solve those cases one by one3 - if we are able to check exceptions in the future as #6954 mentioned (and jdk has given us all we need) exception handing in rxjava will be simpler and easier as we do elsewhere: make rxjavapluginsonerror() handle/propagate the exception and continue the work or make rxjavapluginsonerror() throws and exceptions go through the stack to do whatever clean/stop needed and finally to the uncaughtexceptionhandler of the thread || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6956?srcpr&elh1) report> merging [#6956](https://codecovio/gh/reactivex/rxjava/pull/6956?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/b47783e3186f83be6a87257a2d13c9619bccaa42&eldesc) will **increase** coverage by `001%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6956/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6956?srcpr&eltree)```diff@@ coverage diff @@## 3x #6956 +/- ##+ coverage 9964% 9965% +001% - complexity 6667 6668 +1 files 742 742 lines 47228 47248 +20 branches 6369 6369 + hits 47059 47084 +25 + misses 51 50 -1 + partials 118 114 -4 ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6956?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [main/java/io/reactivex/rxjava3/core/schedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1njagvkdwxlci5qyxzh) | `10000% (ø)` | `1100 (ø)` | || [rxjava3/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0v4zwn1dg9yu2nozwr1bgvylmphdme) | `10000% (ø)` | `1000 (ø)` | || [java3/internal/schedulers/instantperiodictaskjava](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0luc3rhbnrqzxjpb2rpy1rhc2suamf2yq) | `10000% (ø)` | `2000 (ø)` | || [ternal/schedulers/scheduleddirectperiodictaskjava](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl1njagvkdwxlzerpcmvjdfblcmlvzgljvgfzay5qyxzh) | `10000% (ø)` | `200 (ø)` | || [java3/internal/schedulers/scheduleddirecttaskjava](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl1njagvkdwxlzerpcmvjdfrhc2suamf2yq) | `10000% (ø)` | `200 (ø)` | || [rxjava3/internal/schedulers/scheduledrunnablejava](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl1njagvkdwxlzfj1bm5hymxllmphdme) | `10000% (ø)` | `3000 (ø)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `9357% (-459%)` | `200% (ø%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `9154% (-353%)` | `200% (ø%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9800% (-200%)` | `3400% (-100%)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9805% (-098%)` | `600% (ø%)` | || and [13 more](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6956?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6956?srcpr&elfooter) last update [b47783e48bf526](https://codecovio/gh/reactivex/rxjava/pull/6956?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || disposing the periodic task on error may be a little tricky workaround 1 - the periodic futuretask is canceled asynchronously until periodicdirecttasksetfuture is done this may cause the periodic task to run some more rounds before actually stop the following test almost cant success on my laptop: @test public void periodictaskshouldstoponerror() throws interruptedexception { try { // suppress log rxjavapluginsseterrorhandler((e) -> {}) countdownlatch latch new countdownlatch(1000) atomicinteger assertcount new atomicinteger() for (int i 0 i 2 yes task wrapper behavior should be consistent acrosswould you like to do this in this pr or later? || great that fixed all corner cases i could seebut i wonder whether calling rxjavapluginsonerror(ex) (calling uncaught exception handler) in the middle of exception throw chain is good and intuitional a little tricky as i seeif youd have a look on #6955 the original pr it requires no more change than this one handling future related erros in one place and not calling uncaught exception handler in the middle of exception throw chain it should pass all tests in this pr as well without modification :) ||
6947.0,6960,1,0,0,0,0,1,1,1,2x: fix observableflatmap with maxconcurrency hangs (#6947) just a backport to 2x of the fix for the scalar-queue max-concurrency issue already fixed for 3x in #6946the code for the fix has been added and also the test for itin addition as was also done for #6946 the corresponding test for `flowableflatmap` has been addedresolves #6947 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6960?srcpr&elh1) report> merging [#6960](https://codecovio/gh/reactivex/rxjava/pull/6960?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/7ca43c7398810ee87c57f7f2165104822c0a4662&eldesc) will **increase** coverage by `000%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6960/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6960?srcpr&eltree)```diff@@ coverage diff @@## 2x #6960 +/- ## coverage 9823% 9823% - complexity 6344 6346 +2 files 677 677 lines 45540 45548 +8 branches 6339 6341 +2 + hits 44735 44745 +10 + misses 256 255 -1 + partials 549 548 -1 ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6960?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6960/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxauamf2yq) | `9022% (+122%)` | `300 (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6960/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% (-397%)` | `200% (ø%)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6960/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9774% (-226%)` | `300% (ø%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6960/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `9800% (-200%)` | `3400% (-100%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6960/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8562% (-197%)` | `200% (ø%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6960/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9420% (-145%)` | `200% (ø%)` | || [ivex/internal/operators/maybe/maybemergearrayjava](https://codecovio/gh/reactivex/rxjava/pull/6960/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjltwvyz2vbcnjhes5qyxzh) | `9662% (-113%)` | `600% (ø%)` | || [/operators/mixed/flowableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6960/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwq29tcgxldgfibguuamf2yq) | `9914% (-086%)` | `200% (ø%)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6960/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9750% (-084%)` | `200% (ø%)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6960/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `9489% (-073%)` | `200% (ø%)` | || and [13 more](https://codecovio/gh/reactivex/rxjava/pull/6960/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6960?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6960?srcpr&elfooter) last update [7ca43c7fe1089b](https://codecovio/gh/reactivex/rxjava/pull/6960?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
696.0,6969,1,0,0,1,0,1,1,1,3x: allow setting the drift tolerance timeunit via system property adds the new system property `rx3schedulerdrift-tolerance-unit` to allow specifying a more fine-grained tolerance amountresolves #6968 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6969?srcpr&elh1) report> merging [#6969](https://codecovio/gh/reactivex/rxjava/pull/6969?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/fbee37a052c8c4052614db021cd242de6f710221&eldesc) will **increase** coverage by `002%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6969/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6969?srcpr&eltree)```diff@@ coverage diff @@## 3x #6969 +/- ##+ coverage 9960% 9963% +002% - complexity 6666 6670 +4 files 742 742 lines 47248 47254 +6 branches 6369 6370 +1 + hits 47061 47080 +19 + misses 60 55 -5 + partials 127 119 -8 ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6969?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [main/java/io/reactivex/rxjava3/core/schedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6969/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1njagvkdwxlci5qyxzh) | `10000% (ø)` | `1400 (+300)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6969/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxszwr1y2vgdwxslmphdme) | `9108% (-397%)` | `200% (ø%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6969/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9800% (-200%)` | `3400% (-100%)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6969/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% (-186%)` | `3900% (-100%)` | || [ternal/operators/flowable/flowablesubscribeonjava](https://codecovio/gh/reactivex/rxjava/pull/6969/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvtdwjzy3jpymvpbi5qyxzh) | `9830% (-170%)` | `200% (ø%)` | || [java3/internal/operators/flowable/flowablezipjava](https://codecovio/gh/reactivex/rxjava/pull/6969/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvaaxauamf2yq) | `9897% (-103%)` | `600% (ø%)` | || [3/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6969/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvhcm91cej5lmphdme) | `9905% (-063%)` | `300% (ø%)` | || [a/io/reactivex/rxjava3/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/pull/6969/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zdwjqzwn0cy9szxbsyxltdwjqzwn0lmphdme) | `9875% (-042%)` | `4900% (ø%)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6969/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9870% (-033%)` | `600% (ø%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6969/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `9154% (ø)` | `200% (ø%)` | || and [12 more](https://codecovio/gh/reactivex/rxjava/pull/6969/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6969?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6969?srcpr&elfooter) last update [fbee37a0ac4e84](https://codecovio/gh/reactivex/rxjava/pull/6969?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6987.0,6996,1,0,0,1,1,1,1,1,suppress undeliverableexception handling in tests (#6987) i used a junit testrule to suppress handling of undeliverableexception for test methods annotated with @suppressundeliverable this approach is coarser than the suggested approach (it suppresses the handling of all undeliverableexceptions for the entire annotated test method)i thought this approach was clean but i can switch to the suggested approach if preferredi added @suppressundeliverable to most tests that were logging undeliverableexceptions with the test method in the stack trace this may be more suppression than was required so just let me knowfixes #6987 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6996?srcpr&elh1) report> merging [#6996](https://codecovio/gh/reactivex/rxjava/pull/6996?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/3f386be351eb7c62379d124a2f65894a9961e604&eldesc) will **decrease** coverage by `005%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6996/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6996?srcpr&eltree)```diff@@ coverage diff @@## 3x #6996 +/- ##- coverage 9957% 9951% -006% + complexity 6670 6667 -3 files 742 742 lines 47270 47270 branches 6373 6373 - hits 47070 47042 -28 - misses 92 107 +15 - partials 108 121 +13 ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6996?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [xjava3/internal/observers/futuremultiobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvrnv0dxjltxvsdglpynnlcnzlci5qyxzh) | `9152% (-509%)` | `2600% (-100%)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `9357% (-459%)` | `200% (ø%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9534% (-233%)` | `200% (ø%)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% (-186%)` | `3900% (-100%)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvtd2l0y2hnyxauamf2yq) | `9858% (-142%)` | `300% (ø%)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9773% (-130%)` | `600% (ø%)` | || [ava3/internal/operators/maybe/maybemergearrayjava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvnzxjnzufycmf5lmphdme) | `9887% (-113%)` | `600% (ø%)` | || [a3/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvszxbsyxkuamf2yq) | `9892% (-086%)` | `2100% (ø%)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9658% (-086%)` | `200% (ø%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9761% (-080%)` | `200% (ø%)` | || and [6 more](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6996?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6996?srcpr&elfooter) last update [3f386be2021748](https://codecovio/gh/reactivex/rxjava/pull/6996?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks! ||
7001.0,7028,1,0,0,0,0,1,1,1,3x: allow mbe in flowablegroupbytestissue6974runpart2noevict issue #7001https://githubcom/reactivex/rxjava/blob/98acac218cdb04d279b5ac49bb1afc65bc6ec4fe/src/test/java/io/reactivex/rxjava3/internal/operators/flowable/flowablegroupbytestjava#l2668-l2669the above test can probabilistically throw an exception thus:https://githubcom/reactivex/rxjava/blob/98acac218cdb04d279b5ac49bb1afc65bc6ec4fe/src/test/java/io/reactivex/rxjava3/internal/operators/flowable/flowablegroupbytestjava#l2681the above assertion would be invalid i have removed the invalid assertionfixes #7001 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/7028?srcpr&elh1) report> merging [#7028](https://codecovio/gh/reactivex/rxjava/pull/7028?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/b345254d55368c7a129c75441e4a7d0dfbd5871f&eldesc) will **increase** coverage by `004%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/7028/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/7028?srcpr&eltree)```diff@@ coverage diff @@## 3x #7028 +/- ##+ coverage 9951% 9955% +004% complexity 6669 6669 files 742 742 lines 47270 47270 branches 6373 6373 + hits 47042 47062 +20 + misses 101 96 -5 + partials 127 112 -15 ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/7028?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/7028/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvcbg9ja2luz1n1ynnjcmlizs5qyxzh) | `9302% (-466%)` | `1000% (-100%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/7028/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9444% (-239%)` | `200% (ø%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/7028/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9800% (-200%)` | `3400% (-100%)` | || [a3/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/7028/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvszxbsyxkuamf2yq) | `9892% (-086%)` | `2100% (ø%)` | || [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/7028/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcc5qyxzh) | `9787% (-036%)` | `300% (ø%)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/7028/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9935% (+032%)` | `600% (ø%)` | || [operators/flowable/flowableconcatmapschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/7028/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdb25jyxrnyxbty2hlzhvszxiuamf2yq) | `9960% (+039%)` | `400% (ø%)` | || [/reactivex/rxjava3/observers/basetestconsumerjava](https://codecovio/gh/reactivex/rxjava/pull/7028/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9vynnlcnzlcnmvqmfzzvrlc3rdb25zdw1lci5qyxzh) | `10000% (+055%)` | `7000% (+100%)` | || [/operators/observable/observablecombinelatestjava](https://codecovio/gh/reactivex/rxjava/pull/7028/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq29tymluzuxhdgvzdc5qyxzh) | `10000% (+061%)` | `600% (ø%)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/7028/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrotwf5ymuuamf2yq) | `10000% (+090%)` | `200% (ø%)` | || and [9 more](https://codecovio/gh/reactivex/rxjava/pull/7028/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/7028?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/7028?srcpr&elfooter) last update [b34525467e4bf4](https://codecovio/gh/reactivex/rxjava/pull/7028?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
7032.0,7033,1,0,0,0,0,0,1,0,{flowableobservable}collect(collector) contravariant on t added `? super` twice would resolve #7032 compilation errors:```> task :compilejava/home/travis/build/reactivex/rxjava/src/main/java/io/reactivex/rxjava3/core/flowablejava:19807: error: cannot infer type arguments for flowablecollectwithcollectorsingle return rxjavapluginsonassembly(new flowablecollectwithcollectorsingle (this collector)) ^ reason: inferred type does not conform to equality constraint(s) inferred: cap#1 equality constraints(s): cap#1t where t is a type-variable: t extends object declared in class flowable where cap#1 is a fresh type-variable: cap#1 extends object super: t from capture of ? super t/home/travis/build/reactivex/rxjava/src/main/java/io/reactivex/rxjava3/core/observablejava:16647: error: cannot infer type arguments for observablecollectwithcollectorsingle return rxjavapluginsonassembly(new observablecollectwithcollectorsingle (this collector)) ^ reason: inferred type does not conform to equality constraint(s) inferred: cap#1 equality constraints(s): cap#1t where t is a type-variable: t extends object declared in class observable where cap#1 is a fresh type-variable: cap#1 extends object super: t from capture of ? super t2 errors``` || hehe i thought i would get away with not even compiling the sources || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/7033?srcpr&elh1) report> merging [#7033](https://codecovio/gh/reactivex/rxjava/pull/7033?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/8e71c100e073dacac6b7a1f910830c0bf7bbaeab&eldesc) will **decrease** coverage by `005%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/7033/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/7033?srcpr&eltree)```diff@@ coverage diff @@## 3x #7033 +/- ##- coverage 9953% 9947% -006% + complexity 6670 6669 -1 files 742 742 lines 47270 47270 branches 6373 6373 - hits 47048 47022 -26 - misses 102 112 +10 - partials 120 136 +16 ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/7033?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/7033/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `10000% (ø)` | `59500 (ø)` | || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/7033/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `10000% (ø)` | `56500 (ø)` | || [a3/internal/jdk8/flowablecollectwithcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/7033/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l0zsb3dhymxlq29sbgvjdfdpdghdb2xszwn0b3iuamf2yq) | `10000% (ø)` | `200 (ø)` | || [ernal/jdk8/flowablecollectwithcollectorsinglejava](https://codecovio/gh/reactivex/rxjava/pull/7033/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l0zsb3dhymxlq29sbgvjdfdpdghdb2xszwn0b3jtaw5nbguuamf2yq) | `10000% (ø)` | `300 (ø)` | || [/internal/jdk8/observablecollectwithcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/7033/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l09ic2vydmfibgvdb2xszwn0v2l0aenvbgxly3rvci5qyxzh) | `10000% (ø)` | `200 (ø)` | || [nal/jdk8/observablecollectwithcollectorsinglejava](https://codecovio/gh/reactivex/rxjava/pull/7033/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l09ic2vydmfibgvdb2xszwn0v2l0aenvbgxly3rvclnpbmdszs5qyxzh) | `10000% (ø)` | `300 (ø)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/7033/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `8990% (-643%)` | `200% (ø%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/7033/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9444% (-318%)` | `200% (ø%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/7033/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `8943% (-282%)` | `200% (ø%)` | || [a3/internal/subscribers/innerqueuedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/7033/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zdwjzy3jpymvycy9jbm5lclf1zxvlzfn1ynnjcmlizxiuamf2yq) | `9772% (-228%)` | `1600% (-100%)` | || and [13 more](https://codecovio/gh/reactivex/rxjava/pull/7033/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/7033?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/7033?srcpr&elfooter) last update [8e71c1029e75e9](https://codecovio/gh/reactivex/rxjava/pull/7033?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
7039.0,7040,1,0,0,0,0,1,1,1,3x: fix map() conditional chain causing npe fix the case when an (async) fused `filter`-`map`-`filter` chain does not handle the null indicator in its conditional path inside `map`fixes #7039 ❤️ wow so happy with the turnaround on this! || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/7040?srcpr&elh1) report> merging [#7040](https://codecovio/gh/reactivex/rxjava/pull/7040?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/343be6a3e6fbe38b6c2b441c5f391211caf3602d&eldesc) will **decrease** coverage by `004%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/7040/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/7040?srcpr&eltree)```diff@@ coverage diff @@## 3x #7040 +/- ##- coverage 9954% 9950% -005% + complexity 6671 6668 -3 files 742 742 lines 47270 47273 +3 branches 6373 6374 +1 - hits 47057 47038 -19 - misses 97 110 +13 - partials 116 125 +9 ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/7040?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [java3/internal/operators/flowable/flowablemapjava](https://codecovio/gh/reactivex/rxjava/pull/7040/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvnyxauamf2yq) | `10000% (ø)` | `300 (ø)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/7040/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `8990% (-367%)` | `200% (ø%)` | || [xjava3/internal/observers/futuremultiobserverjava](https://codecovio/gh/reactivex/rxjava/pull/7040/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvrnv0dxjltxvsdglpynnlcnzlci5qyxzh) | `9661% (-339%)` | `2700% (-100%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/7040/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `9225% (-282%)` | `200% (ø%)` | || [ctivex/rxjava3/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/7040/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc91dglsl1f1zxvlrhjhaw5izwxwzxiuamf2yq) | `9722% (-278%)` | `5600% (-200%)` | || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/7040/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9748% (-252%)` | `5000% (ø%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/7040/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9800% (-200%)` | `3400% (-100%)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/7040/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb3j0zwrkb2lulmphdme) | `9849% (-151%)` | `200% (ø%)` | || [rnal/operators/observable/observableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/7040/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlt2jzzxj2zu9ulmphdme) | `9869% (-131%)` | `300% (ø%)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/7040/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgcm9tsxrlcmfibguuamf2yq) | `9895% (-105%)` | `500% (ø%)` | || and [11 more](https://codecovio/gh/reactivex/rxjava/pull/7040/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/7040?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/7040?srcpr&elfooter) last update [343be6a684033c](https://codecovio/gh/reactivex/rxjava/pull/7040?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
704.0,7049,1,0,0,0,0,1,1,1,3x: fix observablewindow (size skip overlap) dispose behavior disposing the main output of the `observablewindow` operator did not properly propagate the dispose call under certain circumstances such as no current active window or the window(s) were abandoned immediatelyfixes #7048 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/7049?srcpr&elh1) report> merging [#7049](https://codecovio/gh/reactivex/rxjava/pull/7049?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/a8fcaf0bcde19b9ec3b335bfd696cbf3b8beb81c&eldesc) will **decrease** coverage by `001%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/7049/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/7049?srcpr&eltree)```diff@@ coverage diff @@## 3x #7049 +/- ##- coverage 9952% 9951% -002% + complexity 6669 6667 -2 files 742 742 lines 47273 47275 +2 branches 6374 6374 - hits 47048 47045 -3 - misses 105 107 +2 - partials 120 123 +3 ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/7049?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/7049/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93lmphdme) | `10000% (ø)` | `300 (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/7049/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9800% (-200%)` | `3400% (-100%)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/7049/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% (-186%)` | `3900% (-100%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/7049/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxluhvibglzac5qyxzh) | `9729% (-181%)` | `1600% (-100%)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/7049/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9708% (-162%)` | `600% (ø%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/7049/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9729% (-136%)` | `200% (ø%)` | || [ternal/operators/observable/observablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/7049/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlr3jvdxbces5qyxzh) | `9890% (-110%)` | `200% (ø%)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/7049/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrotwf5ymuuamf2yq) | `9909% (-091%)` | `200% (ø%)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/7049/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9914% (-086%)` | `200% (ø%)` | || [/operators/observable/observablecombinelatestjava](https://codecovio/gh/reactivex/rxjava/pull/7049/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq29tymluzuxhdgvzdc5qyxzh) | `9938% (-062%)` | `600% (ø%)` | || and [6 more](https://codecovio/gh/reactivex/rxjava/pull/7049/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/7049?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/7049?srcpr&elfooter) last update [a8fcaf0bf081d5](https://codecovio/gh/reactivex/rxjava/pull/7049?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
680.0,7080,1,0,0,0,0,0,1,0,"change a method name to make consistent with pr#6801 thank you for contributing to rxjava before pressing the ""create pull request"" button please consider the following points: - [x] please give a description about what and why you are contributing even if its trivialin #6801 a method name `flowablezipiterable#error` is changed to `fail` but its similar class `observablezipiterable` was not changedi changed it for consistency - [x] please include the issue list number(s) or other pr numbers in the description if you are contributing in response to thosethis pr is related to #6801 - [ ] please include a reasonable set of unit tests if you contribute new code or change an existing one if you contribute an operator (if applicable) please make sure you have tests for working with an `empty` `just` `range` of values as well as an `error` source with and/or without backpressure and see if unsubscription/cancellation propagates correctlythis change will not affect external behavior # [codecov](https://codecovio/gh/reactivex/rxjava/pull/7080?srcpr&elh1) report> merging [#7080](https://codecovio/gh/reactivex/rxjava/pull/7080?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/6b48855b1fdcefeca9ed9e0c112140c23bd42f6e?eldesc) will **decrease** coverage by `001%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/7080/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/7080?srcpr&eltree)```diff@@ coverage diff @@## 3x #7080 +/- ##- coverage 9951% 9949% -002% complexity 6667 6667 files 742 742 lines 47275 47275 branches 6374 6374 - hits 47044 47037 -7 - misses 105 110 +5 - partials 126 128 +2 ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/7080?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [al/operators/observable/observablezipiterablejava](https://codecovio/gh/reactivex/rxjava/pull/7080/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlwmlwsxrlcmfibguuamf2yq) | `10000% (ø)` | `300 (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/7080/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9444% (-318%)` | `200% (ø%)` | || [va/io/reactivex/rxjava3/subjects/maybesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/7080/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zdwjqzwn0cy9nyxlizvn1ymply3quamf2yq) | `9775% (-225%)` | `4500% (-100%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/7080/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9800% (-200%)` | `3400% (-100%)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/7080/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% (-186%)` | `3900% (-100%)` | || [internal/operators/flowable/flowablefromarrayjava](https://codecovio/gh/reactivex/rxjava/pull/7080/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgcm9tqxjyyxkuamf2yq) | `9661% (-170%)` | `300% (ø%)` | || [java3/internal/operators/flowable/flowablezipjava](https://codecovio/gh/reactivex/rxjava/pull/7080/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvaaxauamf2yq) | `9897% (-103%)` | `600% (ø%)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/7080/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9805% (-098%)` | `600% (ø%)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/7080/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrotwf5ymuuamf2yq) | `9909% (-091%)` | `200% (ø%)` | || [a3/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/7080/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvszxbsyxkuamf2yq) | `9892% (-086%)` | `2100% (ø%)` | || and [11 more](https://codecovio/gh/reactivex/rxjava/pull/7080/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/7080?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/7080?srcpr&elfooter) last update [6b488558d8fb84](https://codecovio/gh/reactivex/rxjava/pull/7080?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||"
7125.0,7126,1,0,0,0,0,1,1,1,3x: improve error messages in the test consumers this pr improves the error messages reported in the `testobserver` and `testsubscriber`:- `assertvalue(predicate)` now shows the value that didnt pass the predicate- `assertvalueat(index t)`: - if the index is out of range the message includes the valid range - the message now includes the index argument where the failure happened- `assertvalueat(index predicate)`: - if the index is out of range the message includes the valid range - shows the value at index that didnt pass the predicate - the message now includes the index argument where the failure happened- `asserterror(predicate)` is now worded to indicate the exception did not pass the predicatein addition the verification tests for the error messages were not actually testing the error message with `assertthrows` and have been updatedresolves #7125 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/7126?srcpr&elh1) report> merging [#7126](https://codecovio/gh/reactivex/rxjava/pull/7126?srcpr&eldesc) (8ceb70f) into [3x](https://codecovio/gh/reactivex/rxjava/commit/67c1a367397f1167f9ad5639dd5071b6608e4230?eldesc) (67c1a36) will **decrease** coverage by `001%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/7126/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/7126?srcpr&eltree)```diff@@ coverage diff @@## 3x #7126 +/- ##- coverage 9957% 9955% -002% - complexity 6671 6673 +2 files 742 742 lines 47267 47273 +6 branches 6374 6376 +2 - hits 47066 47064 -2 - misses 89 94 +5 - partials 112 115 +3 ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/7126?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/reactivex/rxjava3/observers/basetestconsumerjava](https://codecovio/gh/reactivex/rxjava/pull/7126/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9vynnlcnzlcnmvqmfzzvrlc3rdb25zdw1lci5qyxzh) | `10000% (ø)` | `7500 (+500)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/7126/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `9449% (-367%)` | `200% (ø%)` | || [x/rxjava3/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/pull/7126/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuftyi5qyxzh) | `9661% (-339%)` | `900% (-100%)` | || [xjava3/internal/observers/futuremultiobserverjava](https://codecovio/gh/reactivex/rxjava/pull/7126/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvrnv0dxjltxvsdglpynnlcnzlci5qyxzh) | `9661% (-339%)` | `2700% (-100%)` | || [vex/rxjava3/internal/operators/maybe/maybeambjava](https://codecovio/gh/reactivex/rxjava/pull/7126/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvbbwiuamf2yq) | `9696% (-304%)` | `1000% (-100%)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/7126/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxszwr1y2vgdwxslmphdme) | `9108% (-199%)` | `200% (ø%)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/7126/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93lmphdme) | `9821% (-179%)` | `300% (ø%)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/7126/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb3j0zwrkb2lulmphdme) | `9849% (-151%)` | `200% (ø%)` | || [/operators/observable/observablecombinelatestjava](https://codecovio/gh/reactivex/rxjava/pull/7126/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq29tymluzuxhdgvzdc5qyxzh) | `9938% (-062%)` | `600% (ø%)` | || [a/io/reactivex/rxjava3/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/pull/7126/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zdwjqzwn0cy9szxbsyxltdwjqzwn0lmphdme) | `9875% (-042%)` | `4900% (ø%)` | || and [6 more](https://codecovio/gh/reactivex/rxjava/pull/7126/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/7126?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/7126?srcpr&elfooter) last update [67c1a368ceb70f](https://codecovio/gh/reactivex/rxjava/pull/7126?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
6995.0,7144,1,0,0,0,0,0,1,0,3x: update marbles of amb() ambarray() and ambwith() update the marble diagrams in `flowable` and `observable` indicating cancellation of the non-winnersresolves #6995![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableambpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableambarraypng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableambwithpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observableambpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observableambarraypng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observableambwithpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/7144?srcpr&elh1) report> merging [#7144](https://codecovio/gh/reactivex/rxjava/pull/7144?srcpr&eldesc) (f1e8984) into [3x](https://codecovio/gh/reactivex/rxjava/commit/b75c1858b7c223a06b20c090ae86bf4976867e90?eldesc) (b75c185) will **decrease** coverage by `006%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/7144/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/7144?srcpr&eltree)```diff@@ coverage diff @@## 3x #7144 +/- ##- coverage 9957% 9950% -007% + complexity 6706 6705 -1 files 745 745 lines 47327 47327 branches 6375 6375 - hits 47124 47091 -33 - misses 89 109 +20 - partials 114 127 +13 ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/7144?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/7144/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `10000% (ø)` | `59700 (ø)` | || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/7144/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `10000% (ø)` | `56500 (ø)` | || [ors/flowable/flowableonbackpressurereducewithjava](https://codecovio/gh/reactivex/rxjava/pull/7144/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvpbkjhy2twcmvzc3vyzvjlzhvjzvdpdgguamf2yq) | `8800% (-1200%)` | `200% (ø%)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/7144/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `8990% (-826%)` | `200% (ø%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/7144/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `9225% (-423%)` | `200% (ø%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/7144/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9418% (-349%)` | `200% (ø%)` | || [xjava3/internal/observers/futuremultiobserverjava](https://codecovio/gh/reactivex/rxjava/pull/7144/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvrnv0dxjltxvsdglpynnlcnzlci5qyxzh) | `9661% (-339%)` | `2700% (-100%)` | || [a/io/reactivex/rxjava3/subjects/singlesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/7144/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zdwjqzwn0cy9taw5nbgvtdwjqzwn0lmphdme) | `9753% (-247%)` | `3700% (-100%)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/7144/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb3j0zwrkb2lulmphdme) | `9849% (-151%)` | `200% (ø%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/7144/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9729% (-136%)` | `200% (ø%)` | || and [10 more](https://codecovio/gh/reactivex/rxjava/pull/7144/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/7144?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/7144?srcpr&elfooter) last update [b75c185f1e8984](https://codecovio/gh/reactivex/rxjava/pull/7144?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
711.0,7163,1,0,0,0,0,1,1,1,3x: testscheduler option to use onschedule hook the `testscheduler` is a bit inconsistent regarding the use of `rxjavapluginsonschedule` it extends `scheduler` so the `scheduledirect` methods do invoke the hook whereas the workers `schedule` methods dontthis pr adds a constructor flag to enable the use of the hook in the workers `schedule` methods as well this addition should avoid issues with existing tests not expecting the hook to be invoked all of a suddenresolves #7119 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/7163?srcpr&elh1) report> merging [#7163](https://codecovio/gh/reactivex/rxjava/pull/7163?srcpr&eldesc) (0e74bd2) into [3x](https://codecovio/gh/reactivex/rxjava/commit/e65763506e6641c4672337e0311407640f7f188d?eldesc) (e657635) will **decrease** coverage by `000%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/7163/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/7163?srcpr&eltree)```diff@@ coverage diff @@## 3x #7163 +/- ##- coverage 9953% 9953% -001% - complexity 6708 6711 +3 files 745 745 lines 47332 47345 +13 branches 6376 6380 +4 + hits 47113 47123 +10 + misses 100 96 -4 - partials 119 126 +7 ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/7163?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [va/io/reactivex/rxjava3/schedulers/schedulersjava](https://codecovio/gh/reactivex/rxjava/pull/7163/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zy2hlzhvszxjzl1njagvkdwxlcnmuamf2yq) | `10000% (ø)` | `1200 (ø)` | || [io/reactivex/rxjava3/schedulers/testschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/7163/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zy2hlzhvszxjzl1rlc3rty2hlzhvszxiuamf2yq) | `10000% (ø)` | `1300 (+200)` | || [erators/completable/completableconcatiterablejava](https://codecovio/gh/reactivex/rxjava/pull/7163/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvdb25jyxrjdgvyywjszs5qyxzh) | `9591% (-409%)` | `200% (ø%)` | || [java3/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/7163/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl1ryyw1wb2xpbmvty2hlzhvszxiuamf2yq) | `9740% (-260%)` | `600% (ø%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/7163/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9444% (-239%)` | `200% (ø%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/7163/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9418% (-233%)` | `200% (ø%)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/7163/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `9633% (-184%)` | `200% (ø%)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/7163/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9741% (-162%)` | `600% (ø%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/7163/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9729% (-136%)` | `200% (ø%)` | || [operators/flowable/flowableconcatmapschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/7163/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdb25jyxrnyxbty2hlzhvszxiuamf2yq) | `9920% (-040%)` | `400% (ø%)` | || and [8 more](https://codecovio/gh/reactivex/rxjava/pull/7163/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/7163?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/7163?srcpr&elfooter) last update [e6576350e74bd2](https://codecovio/gh/reactivex/rxjava/pull/7163?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
716.0,7164,1,0,0,0,0,0,1,0,updating documentation for scheduleactual method remove unnecessary sentence from `newthreadworkerscheduleactual`resolves #7161 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/7164?srcpr&elh1) report> merging [#7164](https://codecovio/gh/reactivex/rxjava/pull/7164?srcpr&eldesc) (f7cb4fe) into [3x](https://codecovio/gh/reactivex/rxjava/commit/e65763506e6641c4672337e0311407640f7f188d?eldesc) (e657635) will **increase** coverage by `000%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/7164/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/7164?srcpr&eltree)```diff@@ coverage diff @@## 3x #7164 +/- ## coverage 9953% 9954% + complexity 6708 6707 -1 files 745 745 lines 47332 47332 branches 6376 6376 + hits 47113 47116 +3 + misses 100 97 -3 partials 119 119 ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/7164?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [x/rxjava3/internal/schedulers/newthreadworkerjava](https://codecovio/gh/reactivex/rxjava/pull/7164/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl05ld1rocmvhzfdvcmtlci5qyxzh) | `9491% (ø)` | `1900 (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/7164/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9572% (-342%)` | `200% (ø%)` | || [xjava3/internal/observers/futuremultiobserverjava](https://codecovio/gh/reactivex/rxjava/pull/7164/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvrnv0dxjltxvsdglpynnlcnzlci5qyxzh) | `9661% (-339%)` | `2700% (-100%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/7164/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9418% (-233%)` | `200% (ø%)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/7164/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb3j0zwrkb2lulmphdme) | `9849% (-151%)` | `200% (ø%)` | || [va3/internal/operators/parallel/parallelrunonjava](https://codecovio/gh/reactivex/rxjava/pull/7164/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxsdw5pbi5qyxzh) | `9852% (-148%)` | `800% (ø%)` | || [3/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/7164/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvqdwjsaxnolmphdme) | `9900% (-100%)` | `1800% (ø%)` | || [a/io/reactivex/rxjava3/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/pull/7164/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zdwjqzwn0cy9szxbsyxltdwjqzwn0lmphdme) | `9896% (-063%)` | `4900% (ø%)` | || [operators/flowable/flowableconcatmapschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/7164/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdb25jyxrnyxbty2hlzhvszxiuamf2yq) | `9920% (-040%)` | `400% (ø%)` | || [ternal/operators/flowable/flowablewindowtimedjava](https://codecovio/gh/reactivex/rxjava/pull/7164/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvxaw5kb3duaw1lzc5qyxzh) | `9719% (-029%)` | `500% (ø%)` | || and [7 more](https://codecovio/gh/reactivex/rxjava/pull/7164/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/7164?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/7164?srcpr&elfooter) last update [e657635f7cb4fe](https://codecovio/gh/reactivex/rxjava/pull/7164?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || @akarnokd thanks for review 👍 ready to merge 😄 ||
706.0,7165,1,1,0,1,1,1,1,1,3x: add fusion support to concatmap{maybe|single|completable} this pr adds front fusion support to- `flowableconcatmapcompletable`- `flowableconcatmapmaybe`- `flowableconcatmapsingle`- `observableconcatmapcompletable`- `observableconcatmapmaybe`- `observableconcatmapsingle`the operators have been tidied up by factoring out common code pathsin addition the `deferredscalarsubscription`s fusion-emission had to be fixed in async fusion mode `onnext(null)` is generally expected from the upstream but `deferredscalarsubscription` sent the value itself now it correctly sends `null` (`deferredscalardisposable` already did this correctly)resolves #7061 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/7165?srcpr&elh1) report> merging [#7165](https://codecovio/gh/reactivex/rxjava/pull/7165?srcpr&eldesc) (d832fb1) into [3x](https://codecovio/gh/reactivex/rxjava/commit/e65763506e6641c4672337e0311407640f7f188d?eldesc) (e657635) will **increase** coverage by `001%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/7165/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/7165?srcpr&eltree)```diff@@ coverage diff @@## 3x #7165 +/- ##+ coverage 9953% 9954% +001% - complexity 6708 6739 +31 files 745 747 +2 lines 47332 47311 -21 branches 6376 6356 -20 - hits 47113 47097 -16 + misses 100 96 -4 + partials 119 118 -1 ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/7165?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ternal/operators/mixed/concatmapxmainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/7165/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvq29uy2f0twfwwe1haw5pynnlcnzlci5qyxzh) | `10000% (ø)` | `1600 (?)` | || [rnal/operators/mixed/concatmapxmainsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/7165/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvq29uy2f0twfwwe1haw5tdwjzy3jpymvylmphdme) | `10000% (ø)` | `1600 (?)` | || [/operators/mixed/flowableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/7165/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvrmxvd2fibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `10000% (ø)` | `200 (ø)` | || [ternal/operators/mixed/flowableconcatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/7165/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvrmxvd2fibgvdb25jyxrnyxbnyxlizs5qyxzh) | `10000% (ø)` | `200 (ø)` | || [ernal/operators/mixed/flowableconcatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/7165/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvrmxvd2fibgvdb25jyxrnyxbtaw5nbguuamf2yq) | `10000% (ø)` | `200 (ø)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/7165/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvt2jzzxj2ywjszunvbmnhde1hcenvbxbszxrhymxllmphdme) | `10000% (ø)` | `300 (ø)` | || [rnal/operators/mixed/observableconcatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/7165/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvt2jzzxj2ywjszunvbmnhde1hce1hewjllmphdme) | `10000% (ø)` | `300 (ø)` | || [nal/operators/mixed/observableconcatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/7165/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvt2jzzxj2ywjszunvbmnhde1hcfnpbmdszs5qyxzh) | `10000% (ø)` | `300 (ø)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/7165/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zdwjzy3jpchrpb25zl0rlzmvycmvku2nhbgfyu3vic2nyaxb0aw9ulmphdme) | `10000% (ø)` | `2900 (ø)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/7165/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `9174% (-643%)` | `200% (ø%)` | || and [16 more](https://codecovio/gh/reactivex/rxjava/pull/7165/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/7165?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/7165?srcpr&elfooter) last update [e657635d832fb1](https://codecovio/gh/reactivex/rxjava/pull/7165?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
7154.0,7170,1,0,0,1,0,1,1,1,2x: introduce property rx2scheduleruse-otime (#7154) fixes #7169 @akarnokd i had to create a new `schedulertest` class because on the 2x branch the package did not match the package of `scheduler` therefore i could not access the field (package-private) || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/7170?srcpr&elh1) report> merging [#7170](https://codecovio/gh/reactivex/rxjava/pull/7170?srcpr&eldesc) (2c46d3e) into [2x](https://codecovio/gh/reactivex/rxjava/commit/f31aed36fd9d47edf0177164c54c64d4dc28c818?eldesc) (f31aed3) will **increase** coverage by `008%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/7170/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/7170?srcpr&eltree)```diff@@ coverage diff @@## 2x #7170 +/- ##+ coverage 9818% 9826% +008% - complexity 6345 6349 +4 files 677 677 lines 45553 45557 +4 branches 6342 6342 + hits 44724 44765 +41 + misses 263 254 -9 + partials 566 538 -28 ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/7170?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/schedulers/schedulersjava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc2nozwr1bgvycy9ty2hlzhvszxjzlmphdme) | `10000% (ø)` | `1100 (ø)` | || [src/main/java/io/reactivex/schedulerjava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2nozwr1bgvylmphdme) | `10000% (ø)` | `1300 (+200)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `9610% (-260%)` | `600% (ø%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% (-225%)` | `6000% (ø%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `8888% (-145%)` | `200% (ø%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9861% (-139%)` | `5700% (-100%)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% (-106%)` | `300% (ø%)` | || [/operators/mixed/flowableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwq29tcgxldgfibguuamf2yq) | `9914% (-086%)` | `200% (ø%)` | || [internal/operators/flowable/flowableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlt2jzzxj2zu9ulmphdme) | `9665% (-056%)` | `300% (ø%)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9924% (ø)` | `300% (ø%)` | || and [19 more](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/7170?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/7170?srcpr&elfooter) last update [f31aed32c46d3e](https://codecovio/gh/reactivex/rxjava/pull/7170?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
719.0,7191,1,0,0,1,0,1,1,0,3x: add onsubscribe hook to parallelflowable operators parallel operators were missing an `rxjavapluginsonsubscribe` hookresolves #7190 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/7191?srcpr&elh1) report> merging [#7191](https://codecovio/gh/reactivex/rxjava/pull/7191?srcpr&eldesc) (5e33ef0) into [3x](https://codecovio/gh/reactivex/rxjava/commit/abecb9aa882dbeffa08e9d7b42040ff6d2fbdebb?eldesc) (abecb9a) will **decrease** coverage by `004%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/7191/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/7191?srcpr&eltree)```diff@@ coverage diff @@## 3x #7191 +/- ##- coverage 9958% 9953% -005% - complexity 6754 6756 +2 files 747 747 lines 47350 47374 +24 branches 6367 6382 +15 + hits 47153 47155 +2 - misses 91 101 +10 - partials 106 118 +12 ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/7191?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [main/java/io/reactivex/rxjava3/core/schedulerjava](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1njagvkdwxlci5qyxzh) | `10000% (ø)` | `1600 (ø)` | || [3/internal/operators/parallel/parallelcollectjava](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxdb2xszwn0lmphdme) | `10000% (ø)` | `700 (ø)` | || [internal/operators/parallel/parallelconcatmapjava](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxdb25jyxrnyxauamf2yq) | `10000% (ø)` | `500 (ø)` | || [ternal/operators/parallel/paralleldoonnexttryjava](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxeb09utmv4dfryes5qyxzh) | `10000% (ø)` | `600 (ø)` | || [a3/internal/operators/parallel/parallelfilterjava](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgawx0zxiuamf2yq) | `10000% (ø)` | `600 (ø)` | || [internal/operators/parallel/parallelfiltertryjava](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgawx0zxjucnkuamf2yq) | `10000% (ø)` | `600 (ø)` | || [3/internal/operators/parallel/parallelflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgbgf0twfwlmphdme) | `10000% (ø)` | `500 (ø)` | || [al/operators/parallel/parallelflatmapiterablejava](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgbgf0twfwsxrlcmfibguuamf2yq) | `10000% (ø)` | `500 (ø)` | || [internal/operators/parallel/parallelfromarrayjava](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgcm9tqxjyyxkuamf2yq) | `10000% (ø)` | `500 (ø)` | || [rnal/operators/parallel/parallelfrompublisherjava](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgcm9tuhvibglzagvylmphdme) | `10000% (ø)` | `400 (ø)` | || and [24 more](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/7191?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/7191?srcpr&elfooter) last update [abecb9ada2db04](https://codecovio/gh/reactivex/rxjava/pull/7191?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
719.0,7196,1,0,0,0,0,0,1,0,3x: allow singlezip and maybezip result to be garbage collected resolves #7195 @akarnokd sorry hit re-review accidentally :see_no_evil: || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/7196?srcpr&elh1) report> merging [#7196](https://codecovio/gh/reactivex/rxjava/pull/7196?srcpr&eldesc) (bcca53e) into [3x](https://codecovio/gh/reactivex/rxjava/commit/09b2b1b4c9428616b2634a67bea0ee5a09201007?eldesc) (09b2b1b) will **increase** coverage by `003%`> the diff coverage is `9500%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/7196/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/7196?srcpr&eltree)```diff@@ coverage diff @@## 3x #7196 +/- ##+ coverage 9949% 9952% +003% - complexity 6752 6756 +4 files 747 747 lines 47350 47387 +37 branches 6367 6384 +17 + hits 47110 47163 +53 + misses 112 101 -11 + partials 128 123 -5 ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/7196?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ava3/internal/operators/single/singleziparrayjava](https://codecovio/gh/reactivex/rxjava/pull/7196/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszvppcefycmf5lmphdme) | `9868% (-132%)` | `600 (ø)` | || [xjava3/internal/operators/maybe/maybeziparrayjava](https://codecovio/gh/reactivex/rxjava/pull/7196/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvaaxbbcnjhes5qyxzh) | `9879% (-121%)` | `600 (ø)` | || [main/java/io/reactivex/rxjava3/core/schedulerjava](https://codecovio/gh/reactivex/rxjava/pull/7196/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1njagvkdwxlci5qyxzh) | `10000% (ø)` | `1600 (ø)` | || [3/internal/operators/parallel/parallelcollectjava](https://codecovio/gh/reactivex/rxjava/pull/7196/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxdb2xszwn0lmphdme) | `10000% (ø)` | `700 (ø)` | || [internal/operators/parallel/parallelconcatmapjava](https://codecovio/gh/reactivex/rxjava/pull/7196/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxdb25jyxrnyxauamf2yq) | `10000% (ø)` | `500 (ø)` | || [ternal/operators/parallel/paralleldoonnexttryjava](https://codecovio/gh/reactivex/rxjava/pull/7196/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxeb09utmv4dfryes5qyxzh) | `10000% (ø)` | `600 (ø)` | || [a3/internal/operators/parallel/parallelfilterjava](https://codecovio/gh/reactivex/rxjava/pull/7196/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgawx0zxiuamf2yq) | `10000% (ø)` | `600 (ø)` | || [internal/operators/parallel/parallelfiltertryjava](https://codecovio/gh/reactivex/rxjava/pull/7196/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgawx0zxjucnkuamf2yq) | `10000% (ø)` | `600 (ø)` | || [3/internal/operators/parallel/parallelflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/7196/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgbgf0twfwlmphdme) | `10000% (ø)` | `500 (ø)` | || [al/operators/parallel/parallelflatmapiterablejava](https://codecovio/gh/reactivex/rxjava/pull/7196/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgbgf0twfwsxrlcmfibguuamf2yq) | `10000% (ø)` | `500 (ø)` | || and [29 more](https://codecovio/gh/reactivex/rxjava/pull/7196/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/7196?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/7196?srcpr&elfooter) last update [09b2b1b40922cd](https://codecovio/gh/reactivex/rxjava/pull/7196?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
7201.0,7203,1,0,0,0,0,1,1,1,3x: fix schedulersfrom to honor interruptibleworker across methods the direct scheduling methods of the `executorscheduler` created via `schedulersfrom(executor boolean)` did not fully honor the `interruptibleworker` settingsfixes #7201 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/7203?srcpr&elh1) report> merging [#7203](https://codecovio/gh/reactivex/rxjava/pull/7203?srcpr&eldesc) (e9af0e6) into [3x](https://codecovio/gh/reactivex/rxjava/commit/a4e087d980e2356f9aec6fbf6be65d0edb42315b?eldesc) (a4e087d) will **decrease** coverage by `003%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/7203/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/7203?srcpr&eltree)```diff@@ coverage diff @@## 3x #7203 +/- ##- coverage 9954% 9951% -004% complexity 6757 6757 files 747 747 lines 47387 47392 +5 branches 6384 6382 -2 - hits 47170 47160 -10 - misses 99 106 +7 - partials 118 126 +8 ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/7203?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [xjava3/internal/schedulers/abstractdirecttaskjava](https://codecovio/gh/reactivex/rxjava/pull/7203/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0fic3ryywn0rglyzwn0vgfzay5qyxzh) | `10000% (ø)` | `2100 (ø)` | || [rxjava3/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/7203/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0v4zwn1dg9yu2nozwr1bgvylmphdme) | `10000% (ø)` | `1000 (ø)` | || [x/rxjava3/internal/schedulers/newthreadworkerjava](https://codecovio/gh/reactivex/rxjava/pull/7203/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl05ld1rocmvhzfdvcmtlci5qyxzh) | `9491% (ø)` | `1900 (ø)` | || [ternal/schedulers/scheduleddirectperiodictaskjava](https://codecovio/gh/reactivex/rxjava/pull/7203/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl1njagvkdwxlzerpcmvjdfblcmlvzgljvgfzay5qyxzh) | `10000% (ø)` | `200 (ø)` | || [java3/internal/schedulers/scheduleddirecttaskjava](https://codecovio/gh/reactivex/rxjava/pull/7203/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl1njagvkdwxlzerpcmvjdfrhc2suamf2yq) | `10000% (ø)` | `200 (ø)` | || [x/rxjava3/internal/schedulers/singleschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/7203/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl1npbmdszvnjagvkdwxlci5qyxzh) | `9759% (ø)` | `1500 (ø)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/7203/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `9357% (-276%)` | `200% (ø%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/7203/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9444% (-239%)` | `200% (ø%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/7203/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9585% (-208%)` | `200% (ø%)` | || [reactivex/rxjava3/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/7203/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl1b1ymxpc2hqcm9jzxnzb3iuamf2yq) | `9816% (-184%)` | `4100% (-100%)` | || and [11 more](https://codecovio/gh/reactivex/rxjava/pull/7203/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/7203?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/7203?srcpr&elfooter) last update [a4e087d30ac31b](https://codecovio/gh/reactivex/rxjava/pull/7203?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
721.0,7212,1,0,0,0,0,0,1,0,3x: compositeexceptionprintstacktrace to write directly into printstream/printwriter i dont remember why the stacktrace it wasnt printed directly via the printstream/printwriter no reason to aggregate the entire string outputfixes: #7211 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/7212?srcpr&elh1) report> merging [#7212](https://codecovio/gh/reactivex/rxjava/pull/7212?srcpr&eldesc) (993e815) into [3x](https://codecovio/gh/reactivex/rxjava/commit/5c0ca03592620d9a9aa0c279e378e2490121b43e?eldesc) (5c0ca03) will **decrease** coverage by `004%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/7212/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/7212?srcpr&eltree)```diff@@ coverage diff @@## 3x #7212 +/- ##- coverage 9954% 9949% -005% + complexity 6759 6756 -3 files 747 747 lines 47392 47391 -1 branches 6382 6382 - hits 47178 47154 -24 - misses 96 109 +13 - partials 118 128 +10 ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/7212?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [activex/rxjava3/exceptions/compositeexceptionjava](https://codecovio/gh/reactivex/rxjava/pull/7212/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9legnlchrpb25zl0nvbxbvc2l0zuv4y2vwdglvbi5qyxzh) | `10000% (ø)` | `3500 (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/7212/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvcbg9ja2luz1n1ynnjcmlizs5qyxzh) | `9302% (-466%)` | `1000% (-100%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/7212/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `9436% (-282%)` | `200% (ø%)` | || [a/io/reactivex/rxjava3/subjects/singlesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/7212/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zdwjqzwn0cy9taw5nbgvtdwjqzwn0lmphdme) | `9753% (-247%)` | `3700% (-100%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/7212/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxluhvibglzac5qyxzh) | `9729% (-181%)` | `1600% (-100%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/7212/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9523% (-159%)` | `200% (ø%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/7212/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9481% (-156%)` | `200% (ø%)` | || [vable/observableflatmapcompletablecompletablejava](https://codecovio/gh/reactivex/rxjava/pull/7212/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcenvbxbszxrhymxlq29tcgxldgfibguuamf2yq) | `9848% (-152%)` | `300% (ø%)` | || [ators/observable/observableflatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/7212/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcenvbxbszxrhymxllmphdme) | `9852% (-148%)` | `200% (ø%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/7212/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9729% (-136%)` | `200% (ø%)` | || and [12 more](https://codecovio/gh/reactivex/rxjava/pull/7212/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/7212?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ absolute (impact)` `ø not affected` `? missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/7212?srcpr&elfooter) last update [5c0ca03993e815](https://codecovio/gh/reactivex/rxjava/pull/7212?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
